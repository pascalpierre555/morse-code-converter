
morse-code-converter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b68  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d14  08000d1c  00001d1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d14  08000d14  00001d1c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000d14  08000d14  00001d1c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000d14  08000d1c  00001d1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d14  08000d14  00001d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d18  08000d18  00001d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001d1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001d1c  2**0
                  CONTENTS
 10 .bss          00000034  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000034  20000034  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001d1c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012f6  00000000  00000000  00001d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000459  00000000  00000000  00003042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  000034a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f0  00000000  00000000  000035f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000183d  00000000  00000000  000036e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015ba  00000000  00000000  00004f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005989  00000000  00000000  000064d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000be60  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000047c  00000000  00000000  0000bea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0000c320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000cfc 	.word	0x08000cfc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000cfc 	.word	0x08000cfc

080001ec <GPIO_InitConfig>:

uint32_t press_duration = 0; // Variable to store the duration of the button press
uint32_t start_time[2] = {0}; // Variable to store the press time
uint32_t end_time[2] = {0}; // Variable to store the release time

void GPIO_InitConfig(GPIO_Handle_t *GpioBtn, GPIO_Handle_t *GpioLED1, GPIO_Handle_t *GpioLED2) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	60f8      	str	r0, [r7, #12]
 80001f4:	60b9      	str	r1, [r7, #8]
 80001f6:	607a      	str	r2, [r7, #4]
	GPIOA_PCLK_EN();
 80001f8:	4b25      	ldr	r3, [pc, #148]	@ (8000290 <GPIO_InitConfig+0xa4>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fc:	4a24      	ldr	r2, [pc, #144]	@ (8000290 <GPIO_InitConfig+0xa4>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6313      	str	r3, [r2, #48]	@ 0x30
    // Initialize GPIOA as alternate function mode for TIM2_CH1
	GpioBtn->port = GPIOA;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	4a23      	ldr	r2, [pc, #140]	@ (8000294 <GPIO_InitConfig+0xa8>)
 8000208:	601a      	str	r2, [r3, #0]
	GpioBtn->config.pin = 0;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	2200      	movs	r2, #0
 800020e:	605a      	str	r2, [r3, #4]
	GpioBtn->config.mode = GPIO_MODE_AF; // Falling edge trigger
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	2202      	movs	r2, #2
 8000214:	609a      	str	r2, [r3, #8]
	GpioBtn->config.otype = GPIO_OTYPE_PP; // Push-pull
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	2200      	movs	r2, #0
 800021a:	60da      	str	r2, [r3, #12]
	GpioBtn->config.ospeed = GPIO_OSPEED_LOW; // Fast speed
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	2200      	movs	r2, #0
 8000220:	611a      	str	r2, [r3, #16]
	GpioBtn->config.pupd = GPIO_PUPD_UP; // Pull-up
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	2201      	movs	r2, #1
 8000226:	615a      	str	r2, [r3, #20]
	GpioBtn->config.af = 1; // Alternate function 1 (AF1)
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	2201      	movs	r2, #1
 800022c:	619a      	str	r2, [r3, #24]
	GPIO_Init(GpioBtn);
 800022e:	68f8      	ldr	r0, [r7, #12]
 8000230:	f000 f9d2 	bl	80005d8 <GPIO_Init>

    // 初始化 GPIO2 和 GPIO3 為輸出模式
    GpioLED1->port = GPIOA;
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4a17      	ldr	r2, [pc, #92]	@ (8000294 <GPIO_InitConfig+0xa8>)
 8000238:	601a      	str	r2, [r3, #0]
    GpioLED1->config.pin = 4; // GPIO2
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	2204      	movs	r2, #4
 800023e:	605a      	str	r2, [r3, #4]
    GpioLED1->config.mode = GPIO_MODE_OUTPUT;
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	2201      	movs	r2, #1
 8000244:	609a      	str	r2, [r3, #8]
    GpioLED1->config.otype = GPIO_OTYPE_PP;
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
    GpioLED1->config.ospeed = GPIO_OSPEED_LOW;
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	2200      	movs	r2, #0
 8000250:	611a      	str	r2, [r3, #16]
	GpioLED1->config.pupd = GPIO_PUPD_NONE;
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	2200      	movs	r2, #0
 8000256:	615a      	str	r2, [r3, #20]
    GPIO_Init(GpioLED1);
 8000258:	68b8      	ldr	r0, [r7, #8]
 800025a:	f000 f9bd 	bl	80005d8 <GPIO_Init>

    GpioLED2->port = GPIOA;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4a0c      	ldr	r2, [pc, #48]	@ (8000294 <GPIO_InitConfig+0xa8>)
 8000262:	601a      	str	r2, [r3, #0]
    GpioLED2->config.pin = 3; // GPIO3
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2203      	movs	r2, #3
 8000268:	605a      	str	r2, [r3, #4]
    GpioLED2->config.mode = GPIO_MODE_OUTPUT;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2201      	movs	r2, #1
 800026e:	609a      	str	r2, [r3, #8]
    GpioLED2->config.otype = GPIO_OTYPE_PP;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2200      	movs	r2, #0
 8000274:	60da      	str	r2, [r3, #12]
    GpioLED2->config.ospeed = GPIO_OSPEED_LOW;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2200      	movs	r2, #0
 800027a:	611a      	str	r2, [r3, #16]
    GpioLED2->config.pupd = GPIO_PUPD_NONE;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2200      	movs	r2, #0
 8000280:	615a      	str	r2, [r3, #20]
    GPIO_Init(GpioLED2);
 8000282:	6878      	ldr	r0, [r7, #4]
 8000284:	f000 f9a8 	bl	80005d8 <GPIO_Init>
}
 8000288:	bf00      	nop
 800028a:	3710      	adds	r7, #16
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	40023800 	.word	0x40023800
 8000294:	40020000 	.word	0x40020000

08000298 <TIM_Config>:

// TIM2 configuration
void TIM_Config(TIM_Handle_t *TIMBtn, TIM_Handle_t *TIMLED1, TIM_Handle_t *TIMLED2) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	60b9      	str	r1, [r7, #8]
 80002a2:	607a      	str	r2, [r7, #4]
	// Initialize TIM2 for TIMBtn
	TIMBtn->pTIMx = TIM2;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002aa:	601a      	str	r2, [r3, #0]
	TIMBtn->config.prescaler = 16000; // Prescaler value
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80002b2:	605a      	str	r2, [r3, #4]
	TIMBtn->config.period = 0xFFFF; // Auto-reload value
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002ba:	609a      	str	r2, [r3, #8]
	TIMBtn->config.mode = 0; // Timer mode (up)
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	2200      	movs	r2, #0
 80002c0:	60da      	str	r2, [r3, #12]
	TIMBtn->config.channelConfig[0].ccm = TIM_CC_SELECTION_INPUT_DEFAULT; // 默認輸入捕捉
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	2201      	movs	r2, #1
 80002c6:	615a      	str	r2, [r3, #20]
	TIMBtn->config.channelConfig[0].ic_mode = TIM_IC_MODE_RF; // 捕捉上升沿
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	220a      	movs	r2, #10
 80002cc:	619a      	str	r2, [r3, #24]
	TIM_Init(TIMBtn); // Initialize TIM2
 80002ce:	68f8      	ldr	r0, [r7, #12]
 80002d0:	f000 fc0a 	bl	8000ae8 <TIM_Init>
	TIM2_PCLK_EN();
 80002d4:	4b33      	ldr	r3, [pc, #204]	@ (80003a4 <TIM_Config+0x10c>)
 80002d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002d8:	4a32      	ldr	r2, [pc, #200]	@ (80003a4 <TIM_Config+0x10c>)
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6413      	str	r3, [r2, #64]	@ 0x40

	// Initialize TIM3 for LED1
	TIMLED1->pTIMx = TIM3;
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	4a31      	ldr	r2, [pc, #196]	@ (80003a8 <TIM_Config+0x110>)
 80002e4:	601a      	str	r2, [r3, #0]
	TIM3->ARR = 600;
 80002e6:	4b30      	ldr	r3, [pc, #192]	@ (80003a8 <TIM_Config+0x110>)
 80002e8:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80002ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->PSC = 16000 - 1; // Prescaler value
 80002ee:	4b2e      	ldr	r3, [pc, #184]	@ (80003a8 <TIM_Config+0x110>)
 80002f0:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80002f4:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->CR[0] = 0; // Timer mode (up)
 80002f6:	4b2c      	ldr	r3, [pc, #176]	@ (80003a8 <TIM_Config+0x110>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
	TIM3_PCLK_EN();
 80002fc:	4b29      	ldr	r3, [pc, #164]	@ (80003a4 <TIM_Config+0x10c>)
 80002fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000300:	4a28      	ldr	r2, [pc, #160]	@ (80003a4 <TIM_Config+0x10c>)
 8000302:	f043 0302 	orr.w	r3, r3, #2
 8000306:	6413      	str	r3, [r2, #64]	@ 0x40

	// Initialize TIM4 for LED2
	TIMLED2->pTIMx = TIM4;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a28      	ldr	r2, [pc, #160]	@ (80003ac <TIM_Config+0x114>)
 800030c:	601a      	str	r2, [r3, #0]
	TIMLED2->config.prescaler = 16000; // Prescaler value
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000314:	605a      	str	r2, [r3, #4]
	TIMLED2->config.period = 1200; // Auto-reload value
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800031c:	609a      	str	r2, [r3, #8]
	TIMLED2->config.mode = 0;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]
	TIM_Init(TIMLED2); // Initialize TIM4
 8000324:	6878      	ldr	r0, [r7, #4]
 8000326:	f000 fbdf 	bl	8000ae8 <TIM_Init>
	TIM4_PCLK_EN();
 800032a:	4b1e      	ldr	r3, [pc, #120]	@ (80003a4 <TIM_Config+0x10c>)
 800032c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800032e:	4a1d      	ldr	r2, [pc, #116]	@ (80003a4 <TIM_Config+0x10c>)
 8000330:	f043 0304 	orr.w	r3, r3, #4
 8000334:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM_SetupChannel(TIMBtn, TIM_CC1); // Setup input channel 0
 8000336:	2100      	movs	r1, #0
 8000338:	68f8      	ldr	r0, [r7, #12]
 800033a:	f000 fc03 	bl	8000b44 <TIM_SetupChannel>

	TIM_EnableInterrupt(TIMBtn, TIM_CC1); // Enable interrupt for channel 0
 800033e:	2100      	movs	r1, #0
 8000340:	68f8      	ldr	r0, [r7, #12]
 8000342:	f000 fc74 	bl	8000c2e <TIM_EnableInterrupt>
	TIMLED1->pTIMx->DIER |= (1 << 0); // Enable interrupt for TIM3
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	68da      	ldr	r2, [r3, #12]
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f042 0201 	orr.w	r2, r2, #1
 8000354:	60da      	str	r2, [r3, #12]
	TIMLED2->pTIMx->DIER |= (1 << 0); // Enable interrupt for TIM4
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	68da      	ldr	r2, [r3, #12]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f042 0201 	orr.w	r2, r2, #1
 8000364:	60da      	str	r2, [r3, #12]
	TIM_Start(TIMBtn); // Start the timer
 8000366:	68f8      	ldr	r0, [r7, #12]
 8000368:	f000 fbda 	bl	8000b20 <TIM_Start>
	GPIO_IRQPriorityConfig(IRQ_NO_TIM2, NVIC_IRQ_PRI0); // Set TIM2 interrupt priority
 800036c:	2100      	movs	r1, #0
 800036e:	201c      	movs	r0, #28
 8000370:	f000 fb90 	bl	8000a94 <GPIO_IRQPriorityConfig>
	GPIO_IRQPriorityConfig(IRQ_NO_TIM3, NVIC_IRQ_PRI1); // Set TIM3 interrupt priority
 8000374:	2101      	movs	r1, #1
 8000376:	201d      	movs	r0, #29
 8000378:	f000 fb8c 	bl	8000a94 <GPIO_IRQPriorityConfig>
	GPIO_IRQPriorityConfig(IRQ_NO_TIM4, NVIC_IRQ_PRI2); // Set TIM4 interrupt priority
 800037c:	2102      	movs	r1, #2
 800037e:	201e      	movs	r0, #30
 8000380:	f000 fb88 	bl	8000a94 <GPIO_IRQPriorityConfig>
	GPIO_IRQConfig(IRQ_NO_TIM2, ENABLE); // Enable TIM2 interrupt in NVIC
 8000384:	2101      	movs	r1, #1
 8000386:	201c      	movs	r0, #28
 8000388:	f000 fafe 	bl	8000988 <GPIO_IRQConfig>
	GPIO_IRQConfig(IRQ_NO_TIM3, ENABLE); // Enable TIM3 interrupt in NVIC
 800038c:	2101      	movs	r1, #1
 800038e:	201d      	movs	r0, #29
 8000390:	f000 fafa 	bl	8000988 <GPIO_IRQConfig>
	GPIO_IRQConfig(IRQ_NO_TIM4, ENABLE); // Enable TIM4 interrupt in NVIC
 8000394:	2101      	movs	r1, #1
 8000396:	201e      	movs	r0, #30
 8000398:	f000 faf6 	bl	8000988 <GPIO_IRQConfig>
}
 800039c:	bf00      	nop
 800039e:	3710      	adds	r7, #16
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40000400 	.word	0x40000400
 80003ac:	40000800 	.word	0x40000800

080003b0 <Timer3_StartCountdown>:

void Timer3_StartCountdown(uint32_t milliseconds) {
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
    TIM3->CR[0] &= ~(1 << 0);        // 確保 Timer 先停住
 80003b8:	4b17      	ldr	r3, [pc, #92]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a16      	ldr	r2, [pc, #88]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003be:	f023 0301 	bic.w	r3, r3, #1
 80003c2:	6013      	str	r3, [r2, #0]
    TIM3->CR[0] |= (1 << 2);
 80003c4:	4b14      	ldr	r3, [pc, #80]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a13      	ldr	r2, [pc, #76]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003ca:	f043 0304 	orr.w	r3, r3, #4
 80003ce:	6013      	str	r3, [r2, #0]
	TIM3->PSC = 16000 - 1;         // 設定 Prescaler
 80003d0:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003d2:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80003d6:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = milliseconds - 1;    // 設定 ARR
 80003d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	3b01      	subs	r3, #1
 80003de:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM3->CNT = 0;                   // 重設計數器
 80003e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->EGR |= (1 << 0);
 80003e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6153      	str	r3, [r2, #20]
    TIM3->SR &= ~TIM_FLAG_UIF;       // 清除中斷旗標
 80003f2:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003f4:	691b      	ldr	r3, [r3, #16]
 80003f6:	4a08      	ldr	r2, [pc, #32]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003f8:	f023 0301 	bic.w	r3, r3, #1
 80003fc:	6113      	str	r3, [r2, #16]
    TIM3->CR[0] |= (1 << 0);         // 啟動 Timer
 80003fe:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <Timer3_StartCountdown+0x68>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a05      	ldr	r2, [pc, #20]	@ (8000418 <Timer3_StartCountdown+0x68>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6013      	str	r3, [r2, #0]
}
 800040a:	bf00      	nop
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	40000400 	.word	0x40000400

0800041c <Timer3_Stop>:
	TIM4->CNT = 0;
	TIM4->SR &= ~TIM_FLAG_UIF; // 清除 update flag
	TIM4->CR[0] |= (1 << 0); // 啟動 Timer
}

void Timer3_Stop(void) {
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
    TIM3->CR[0] &= ~(1 << 0); // 停止計數
 8000420:	4b09      	ldr	r3, [pc, #36]	@ (8000448 <Timer3_Stop+0x2c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a08      	ldr	r2, [pc, #32]	@ (8000448 <Timer3_Stop+0x2c>)
 8000426:	f023 0301 	bic.w	r3, r3, #1
 800042a:	6013      	str	r3, [r2, #0]
    TIM3->CNT = 0;
 800042c:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <Timer3_Stop+0x2c>)
 800042e:	2200      	movs	r2, #0
 8000430:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM3->SR &= ~TIM_FLAG_UIF;   // 清除旗標
 8000432:	4b05      	ldr	r3, [pc, #20]	@ (8000448 <Timer3_Stop+0x2c>)
 8000434:	691b      	ldr	r3, [r3, #16]
 8000436:	4a04      	ldr	r2, [pc, #16]	@ (8000448 <Timer3_Stop+0x2c>)
 8000438:	f023 0301 	bic.w	r3, r3, #1
 800043c:	6113      	str	r3, [r2, #16]
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	40000400 	.word	0x40000400

0800044c <TIM2_IRQHandler>:
	TIM4->CR[0] &= ~(1 << 0); // 停止計數
	TIM4->CNT = 0;
	TIM4->SR &= ~TIM_FLAG_UIF;   // 清除旗標
}

void TIM2_IRQHandler(void) {
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	static volatile uint32_t overflow_count = 0; // Overflow count
    if (TIM2->SR & TIM_FLAG_CC1IF) {
 8000450:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000454:	691b      	ldr	r3, [r3, #16]
 8000456:	f003 0302 	and.w	r3, r3, #2
 800045a:	2b00      	cmp	r3, #0
 800045c:	d02e      	beq.n	80004bc <TIM2_IRQHandler+0x70>
        // Clear the interrupt flag
		if (GPIOA->IDR & (1 << 0)) { // Check if the button is pressed
 800045e:	4b23      	ldr	r3, [pc, #140]	@ (80004ec <TIM2_IRQHandler+0xa0>)
 8000460:	691b      	ldr	r3, [r3, #16]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	2b00      	cmp	r3, #0
 8000468:	d012      	beq.n	8000490 <TIM2_IRQHandler+0x44>
			end_time[0] = TIM2->CCR[0]; // Read the captured value
 800046a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800046e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000470:	4a1f      	ldr	r2, [pc, #124]	@ (80004f0 <TIM2_IRQHandler+0xa4>)
 8000472:	6013      	str	r3, [r2, #0]
			end_time[1] = overflow_count; // Store the overflow count
 8000474:	4b1f      	ldr	r3, [pc, #124]	@ (80004f4 <TIM2_IRQHandler+0xa8>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a1d      	ldr	r2, [pc, #116]	@ (80004f0 <TIM2_IRQHandler+0xa4>)
 800047a:	6053      	str	r3, [r2, #4]
			press_duration = end_time[0] - start_time[0];
 800047c:	4b1c      	ldr	r3, [pc, #112]	@ (80004f0 <TIM2_IRQHandler+0xa4>)
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	4b1d      	ldr	r3, [pc, #116]	@ (80004f8 <TIM2_IRQHandler+0xac>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	1ad3      	subs	r3, r2, r3
 8000486:	4a1d      	ldr	r2, [pc, #116]	@ (80004fc <TIM2_IRQHandler+0xb0>)
 8000488:	6013      	str	r3, [r2, #0]
			Timer3_Stop(); // Stop the countdown
 800048a:	f7ff ffc7 	bl	800041c <Timer3_Stop>
 800048e:	e00c      	b.n	80004aa <TIM2_IRQHandler+0x5e>
		}
		else { // Check if the button is released
			start_time[0] = TIM2->CCR[0]; // Read the captured value
 8000490:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000496:	4a18      	ldr	r2, [pc, #96]	@ (80004f8 <TIM2_IRQHandler+0xac>)
 8000498:	6013      	str	r3, [r2, #0]
			start_time[1] = overflow_count; // Store the overflow count
 800049a:	4b16      	ldr	r3, [pc, #88]	@ (80004f4 <TIM2_IRQHandler+0xa8>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a16      	ldr	r2, [pc, #88]	@ (80004f8 <TIM2_IRQHandler+0xac>)
 80004a0:	6053      	str	r3, [r2, #4]
			Timer3_StartCountdown(1000); //Start 600ms countdown to determine it's a short press or a long press
 80004a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004a6:	f7ff ff83 	bl	80003b0 <Timer3_StartCountdown>
		}
		TIM2->SR &= ~TIM_FLAG_CC1IF;
 80004aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004ae:	691b      	ldr	r3, [r3, #16]
 80004b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004b4:	f023 0302 	bic.w	r3, r3, #2
 80004b8:	6113      	str	r3, [r2, #16]
	else if (TIM2->SR & TIM_FLAG_UIF) {
		// Clear the update interrupt flag
		TIM2->SR &= ~TIM_FLAG_UIF;
		overflow_count++;
	}
    return;
 80004ba:	e014      	b.n	80004e6 <TIM2_IRQHandler+0x9a>
	else if (TIM2->SR & TIM_FLAG_UIF) {
 80004bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004c0:	691b      	ldr	r3, [r3, #16]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d00d      	beq.n	80004e6 <TIM2_IRQHandler+0x9a>
		TIM2->SR &= ~TIM_FLAG_UIF;
 80004ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004ce:	691b      	ldr	r3, [r3, #16]
 80004d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004d4:	f023 0301 	bic.w	r3, r3, #1
 80004d8:	6113      	str	r3, [r2, #16]
		overflow_count++;
 80004da:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <TIM2_IRQHandler+0xa8>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	3301      	adds	r3, #1
 80004e0:	4a04      	ldr	r2, [pc, #16]	@ (80004f4 <TIM2_IRQHandler+0xa8>)
 80004e2:	6013      	str	r3, [r2, #0]
    return;
 80004e4:	bf00      	nop
 80004e6:	bf00      	nop
}
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40020000 	.word	0x40020000
 80004f0:	20000028 	.word	0x20000028
 80004f4:	20000030 	.word	0x20000030
 80004f8:	20000020 	.word	0x20000020
 80004fc:	2000001c 	.word	0x2000001c

08000500 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_FLAG_UIF) {
 8000504:	4b10      	ldr	r3, [pc, #64]	@ (8000548 <TIM3_IRQHandler+0x48>)
 8000506:	691b      	ldr	r3, [r3, #16]
 8000508:	f003 0301 	and.w	r3, r3, #1
 800050c:	2b00      	cmp	r3, #0
 800050e:	d015      	beq.n	800053c <TIM3_IRQHandler+0x3c>
        TIM3->SR &= ~TIM_FLAG_UIF; // 清中斷旗標
 8000510:	4b0d      	ldr	r3, [pc, #52]	@ (8000548 <TIM3_IRQHandler+0x48>)
 8000512:	691b      	ldr	r3, [r3, #16]
 8000514:	4a0c      	ldr	r2, [pc, #48]	@ (8000548 <TIM3_IRQHandler+0x48>)
 8000516:	f023 0301 	bic.w	r3, r3, #1
 800051a:	6113      	str	r3, [r2, #16]
		TIM3->CR[0] &= ~(1 << 0); // 停止計數
 800051c:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <TIM3_IRQHandler+0x48>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a09      	ldr	r2, [pc, #36]	@ (8000548 <TIM3_IRQHandler+0x48>)
 8000522:	f023 0301 	bic.w	r3, r3, #1
 8000526:	6013      	str	r3, [r2, #0]
    	TIM3->CNT = 0;
 8000528:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <TIM3_IRQHandler+0x48>)
 800052a:	2200      	movs	r2, #0
 800052c:	625a      	str	r2, [r3, #36]	@ 0x24
        GPIOA->ODR |= (1 << 4); // Set GPIO3
 800052e:	4b07      	ldr	r3, [pc, #28]	@ (800054c <TIM3_IRQHandler+0x4c>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a06      	ldr	r2, [pc, #24]	@ (800054c <TIM3_IRQHandler+0x4c>)
 8000534:	f043 0310 	orr.w	r3, r3, #16
 8000538:	6153      	str	r3, [r2, #20]
    }
    return;
 800053a:	bf00      	nop
 800053c:	bf00      	nop
}
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40000400 	.word	0x40000400
 800054c:	40020000 	.word	0x40020000

08000550 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_FLAG_UIF) {
 8000554:	4b10      	ldr	r3, [pc, #64]	@ (8000598 <TIM4_IRQHandler+0x48>)
 8000556:	691b      	ldr	r3, [r3, #16]
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	2b00      	cmp	r3, #0
 800055e:	d015      	beq.n	800058c <TIM4_IRQHandler+0x3c>
        TIM4->SR &= ~TIM_FLAG_UIF; // 清中斷旗標
 8000560:	4b0d      	ldr	r3, [pc, #52]	@ (8000598 <TIM4_IRQHandler+0x48>)
 8000562:	691b      	ldr	r3, [r3, #16]
 8000564:	4a0c      	ldr	r2, [pc, #48]	@ (8000598 <TIM4_IRQHandler+0x48>)
 8000566:	f023 0301 	bic.w	r3, r3, #1
 800056a:	6113      	str	r3, [r2, #16]
		TIM4->CR[0] &= ~(1 << 0); // 停止計數
 800056c:	4b0a      	ldr	r3, [pc, #40]	@ (8000598 <TIM4_IRQHandler+0x48>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a09      	ldr	r2, [pc, #36]	@ (8000598 <TIM4_IRQHandler+0x48>)
 8000572:	f023 0301 	bic.w	r3, r3, #1
 8000576:	6013      	str	r3, [r2, #0]
    	TIM4->CNT = 0;
 8000578:	4b07      	ldr	r3, [pc, #28]	@ (8000598 <TIM4_IRQHandler+0x48>)
 800057a:	2200      	movs	r2, #0
 800057c:	625a      	str	r2, [r3, #36]	@ 0x24
        GPIOA->ODR |= (1 << 2); // Set GPIO3
 800057e:	4b07      	ldr	r3, [pc, #28]	@ (800059c <TIM4_IRQHandler+0x4c>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a06      	ldr	r2, [pc, #24]	@ (800059c <TIM4_IRQHandler+0x4c>)
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	6153      	str	r3, [r2, #20]
    }
    return;
 800058a:	bf00      	nop
 800058c:	bf00      	nop
}
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40000800 	.word	0x40000800
 800059c:	40020000 	.word	0x40020000

080005a0 <main>:


int main(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b0c6      	sub	sp, #280	@ 0x118
 80005a4:	af00      	add	r7, sp, #0
	// TIMER and GPIO handle;
	TIM_Handle_t TimBtn, TimLED1, TimLED2;
	GPIO_Handle_t GPIOBtn, GPIOLED1, GPIOLED2;
	uint32_t t;
	GPIO_InitConfig(&GPIOBtn, &GPIOLED1, &GPIOLED2); // Initialize GPIO configuration
 80005a6:	463a      	mov	r2, r7
 80005a8:	f107 011c 	add.w	r1, r7, #28
 80005ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fe1b 	bl	80001ec <GPIO_InitConfig>
	TIM_Config(&TimBtn, &TimLED1, &TimLED2); // Initialize TIM2 configuration
 80005b6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80005ba:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 80005be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fe68 	bl	8000298 <TIM_Config>
	while(1){
		t = press_duration;
 80005c8:	4b02      	ldr	r3, [pc, #8]	@ (80005d4 <main+0x34>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80005d0:	e7fa      	b.n	80005c8 <main+0x28>
 80005d2:	bf00      	nop
 80005d4:	2000001c 	.word	0x2000001c

080005d8 <GPIO_Init>:
        else {
        }
    }
}

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]


    // Configure the mode
    if (pGPIOHandle->config.mode <= GPIO_MODE_ANALOG) {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	2b03      	cmp	r3, #3
 80005ea:	d81f      	bhi.n	800062c <GPIO_Init+0x54>
        temp = (pGPIOHandle->config.mode << (2 * pGPIOHandle->config.pin));
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	689a      	ldr	r2, [r3, #8]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	fa02 f303 	lsl.w	r3, r2, r3
 80005fa:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->MODER &= ~(0x03 << (2 * pGPIOHandle->config.pin)); // Clear the bits
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	2103      	movs	r1, #3
 800060a:	fa01 f303 	lsl.w	r3, r1, r3
 800060e:	43db      	mvns	r3, r3
 8000610:	4619      	mov	r1, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	400a      	ands	r2, r1
 8000618:	601a      	str	r2, [r3, #0]
        pGPIOHandle->port->MODER |= temp;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	6819      	ldr	r1, [r3, #0]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	430a      	orrs	r2, r1
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	e0e6      	b.n	80007fa <GPIO_Init+0x222>
    }
    else {
        if (pGPIOHandle->config.mode == GPIO_MODE_IT_FT) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	2b04      	cmp	r3, #4
 8000632:	d117      	bne.n	8000664 <GPIO_Init+0x8c>
            // Configure for falling edge trigger
            EXTI->FTSR |= (1 << pGPIOHandle->config.pin);
 8000634:	4b4e      	ldr	r3, [pc, #312]	@ (8000770 <GPIO_Init+0x198>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	6852      	ldr	r2, [r2, #4]
 800063c:	2101      	movs	r1, #1
 800063e:	fa01 f202 	lsl.w	r2, r1, r2
 8000642:	4611      	mov	r1, r2
 8000644:	4a4a      	ldr	r2, [pc, #296]	@ (8000770 <GPIO_Init+0x198>)
 8000646:	430b      	orrs	r3, r1
 8000648:	60d3      	str	r3, [r2, #12]
            EXTI->RTSR &= ~(1 << pGPIOHandle->config.pin); // Clear the rising edge trigger
 800064a:	4b49      	ldr	r3, [pc, #292]	@ (8000770 <GPIO_Init+0x198>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	6852      	ldr	r2, [r2, #4]
 8000652:	2101      	movs	r1, #1
 8000654:	fa01 f202 	lsl.w	r2, r1, r2
 8000658:	43d2      	mvns	r2, r2
 800065a:	4611      	mov	r1, r2
 800065c:	4a44      	ldr	r2, [pc, #272]	@ (8000770 <GPIO_Init+0x198>)
 800065e:	400b      	ands	r3, r1
 8000660:	6093      	str	r3, [r2, #8]
 8000662:	e035      	b.n	80006d0 <GPIO_Init+0xf8>
        }
        else if (pGPIOHandle->config.mode == GPIO_MODE_IT_RT) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	2b05      	cmp	r3, #5
 800066a:	d117      	bne.n	800069c <GPIO_Init+0xc4>
            // Configure for rising edge trigger
            EXTI->RTSR |= (1 << pGPIOHandle->config.pin);
 800066c:	4b40      	ldr	r3, [pc, #256]	@ (8000770 <GPIO_Init+0x198>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	6852      	ldr	r2, [r2, #4]
 8000674:	2101      	movs	r1, #1
 8000676:	fa01 f202 	lsl.w	r2, r1, r2
 800067a:	4611      	mov	r1, r2
 800067c:	4a3c      	ldr	r2, [pc, #240]	@ (8000770 <GPIO_Init+0x198>)
 800067e:	430b      	orrs	r3, r1
 8000680:	6093      	str	r3, [r2, #8]
            EXTI->FTSR &= ~(1 << pGPIOHandle->config.pin); // Clear the falling edge trigger
 8000682:	4b3b      	ldr	r3, [pc, #236]	@ (8000770 <GPIO_Init+0x198>)
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	6852      	ldr	r2, [r2, #4]
 800068a:	2101      	movs	r1, #1
 800068c:	fa01 f202 	lsl.w	r2, r1, r2
 8000690:	43d2      	mvns	r2, r2
 8000692:	4611      	mov	r1, r2
 8000694:	4a36      	ldr	r2, [pc, #216]	@ (8000770 <GPIO_Init+0x198>)
 8000696:	400b      	ands	r3, r1
 8000698:	60d3      	str	r3, [r2, #12]
 800069a:	e019      	b.n	80006d0 <GPIO_Init+0xf8>
        }
        else if (pGPIOHandle->config.mode == GPIO_MODE_IT_RFT) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d115      	bne.n	80006d0 <GPIO_Init+0xf8>
            // Configure for both edges trigger
            EXTI->RTSR |= (1 << pGPIOHandle->config.pin);
 80006a4:	4b32      	ldr	r3, [pc, #200]	@ (8000770 <GPIO_Init+0x198>)
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	6852      	ldr	r2, [r2, #4]
 80006ac:	2101      	movs	r1, #1
 80006ae:	fa01 f202 	lsl.w	r2, r1, r2
 80006b2:	4611      	mov	r1, r2
 80006b4:	4a2e      	ldr	r2, [pc, #184]	@ (8000770 <GPIO_Init+0x198>)
 80006b6:	430b      	orrs	r3, r1
 80006b8:	6093      	str	r3, [r2, #8]
            EXTI->FTSR |= (1 << pGPIOHandle->config.pin);
 80006ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000770 <GPIO_Init+0x198>)
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	6852      	ldr	r2, [r2, #4]
 80006c2:	2101      	movs	r1, #1
 80006c4:	fa01 f202 	lsl.w	r2, r1, r2
 80006c8:	4611      	mov	r1, r2
 80006ca:	4a29      	ldr	r2, [pc, #164]	@ (8000770 <GPIO_Init+0x198>)
 80006cc:	430b      	orrs	r3, r1
 80006ce:	60d3      	str	r3, [r2, #12]
        }

        //configure gpio portselection in SYSCFG_EXTICR
        uint8_t temp1 = pGPIOHandle->config.pin / 4;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	089b      	lsrs	r3, r3, #2
 80006d6:	72fb      	strb	r3, [r7, #11]
        uint8_t temp2 = pGPIOHandle->config.pin % 4;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	f003 0303 	and.w	r3, r3, #3
 80006e2:	72bb      	strb	r3, [r7, #10]
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->port);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a22      	ldr	r2, [pc, #136]	@ (8000774 <GPIO_Init+0x19c>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d056      	beq.n	800079c <GPIO_Init+0x1c4>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a21      	ldr	r2, [pc, #132]	@ (8000778 <GPIO_Init+0x1a0>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d039      	beq.n	800076c <GPIO_Init+0x194>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a1f      	ldr	r2, [pc, #124]	@ (800077c <GPIO_Init+0x1a4>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d032      	beq.n	8000768 <GPIO_Init+0x190>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a1e      	ldr	r2, [pc, #120]	@ (8000780 <GPIO_Init+0x1a8>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d02b      	beq.n	8000764 <GPIO_Init+0x18c>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <GPIO_Init+0x1ac>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d024      	beq.n	8000760 <GPIO_Init+0x188>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a1b      	ldr	r2, [pc, #108]	@ (8000788 <GPIO_Init+0x1b0>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d01d      	beq.n	800075c <GPIO_Init+0x184>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a19      	ldr	r2, [pc, #100]	@ (800078c <GPIO_Init+0x1b4>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d016      	beq.n	8000758 <GPIO_Init+0x180>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a18      	ldr	r2, [pc, #96]	@ (8000790 <GPIO_Init+0x1b8>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d00f      	beq.n	8000754 <GPIO_Init+0x17c>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a16      	ldr	r2, [pc, #88]	@ (8000794 <GPIO_Init+0x1bc>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d008      	beq.n	8000750 <GPIO_Init+0x178>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a15      	ldr	r2, [pc, #84]	@ (8000798 <GPIO_Init+0x1c0>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d101      	bne.n	800074c <GPIO_Init+0x174>
 8000748:	2309      	movs	r3, #9
 800074a:	e028      	b.n	800079e <GPIO_Init+0x1c6>
 800074c:	230a      	movs	r3, #10
 800074e:	e026      	b.n	800079e <GPIO_Init+0x1c6>
 8000750:	2308      	movs	r3, #8
 8000752:	e024      	b.n	800079e <GPIO_Init+0x1c6>
 8000754:	2307      	movs	r3, #7
 8000756:	e022      	b.n	800079e <GPIO_Init+0x1c6>
 8000758:	2306      	movs	r3, #6
 800075a:	e020      	b.n	800079e <GPIO_Init+0x1c6>
 800075c:	2305      	movs	r3, #5
 800075e:	e01e      	b.n	800079e <GPIO_Init+0x1c6>
 8000760:	2304      	movs	r3, #4
 8000762:	e01c      	b.n	800079e <GPIO_Init+0x1c6>
 8000764:	2303      	movs	r3, #3
 8000766:	e01a      	b.n	800079e <GPIO_Init+0x1c6>
 8000768:	2302      	movs	r3, #2
 800076a:	e018      	b.n	800079e <GPIO_Init+0x1c6>
 800076c:	2301      	movs	r3, #1
 800076e:	e016      	b.n	800079e <GPIO_Init+0x1c6>
 8000770:	40013c00 	.word	0x40013c00
 8000774:	40020000 	.word	0x40020000
 8000778:	40020400 	.word	0x40020400
 800077c:	40020800 	.word	0x40020800
 8000780:	40020c00 	.word	0x40020c00
 8000784:	40021000 	.word	0x40021000
 8000788:	40021400 	.word	0x40021400
 800078c:	40021800 	.word	0x40021800
 8000790:	40021c00 	.word	0x40021c00
 8000794:	40022000 	.word	0x40022000
 8000798:	40022400 	.word	0x40022400
 800079c:	2300      	movs	r3, #0
 800079e:	727b      	strb	r3, [r7, #9]
        SYSCFG_PCLK_EN(); // Enable SYSCFG clock
 80007a0:	4b76      	ldr	r3, [pc, #472]	@ (800097c <GPIO_Init+0x3a4>)
 80007a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007a4:	4a75      	ldr	r2, [pc, #468]	@ (800097c <GPIO_Init+0x3a4>)
 80007a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007aa:	6453      	str	r3, [r2, #68]	@ 0x44
        SYSCFG->EXTICR[temp1] &= ~(0x0F << (temp2 * 4)); // Clear the bits
 80007ac:	4a74      	ldr	r2, [pc, #464]	@ (8000980 <GPIO_Init+0x3a8>)
 80007ae:	7afb      	ldrb	r3, [r7, #11]
 80007b0:	3302      	adds	r3, #2
 80007b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007b6:	7abb      	ldrb	r3, [r7, #10]
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	210f      	movs	r1, #15
 80007bc:	fa01 f303 	lsl.w	r3, r1, r3
 80007c0:	43db      	mvns	r3, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	496e      	ldr	r1, [pc, #440]	@ (8000980 <GPIO_Init+0x3a8>)
 80007c6:	7afb      	ldrb	r3, [r7, #11]
 80007c8:	4002      	ands	r2, r0
 80007ca:	3302      	adds	r3, #2
 80007cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4); // Set the bits
 80007d0:	7a7a      	ldrb	r2, [r7, #9]
 80007d2:	7abb      	ldrb	r3, [r7, #10]
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	fa02 f103 	lsl.w	r1, r2, r3
 80007da:	4a69      	ldr	r2, [pc, #420]	@ (8000980 <GPIO_Init+0x3a8>)
 80007dc:	7afb      	ldrb	r3, [r7, #11]
 80007de:	3302      	adds	r3, #2
 80007e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        // Enable the interrupt
        EXTI->IMR |= (1 << pGPIOHandle->config.pin); // Unmask the interrupt
 80007e4:	4b67      	ldr	r3, [pc, #412]	@ (8000984 <GPIO_Init+0x3ac>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	6852      	ldr	r2, [r2, #4]
 80007ec:	2101      	movs	r1, #1
 80007ee:	fa01 f202 	lsl.w	r2, r1, r2
 80007f2:	4611      	mov	r1, r2
 80007f4:	4a63      	ldr	r2, [pc, #396]	@ (8000984 <GPIO_Init+0x3ac>)
 80007f6:	430b      	orrs	r3, r1
 80007f8:	6013      	str	r3, [r2, #0]
    }
    temp = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

    // Configure the output type
    if (pGPIOHandle->config.otype <= GPIO_OTYPE_OD) {
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	68db      	ldr	r3, [r3, #12]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d81c      	bhi.n	8000840 <GPIO_Init+0x268>
        temp = (pGPIOHandle->config.otype << pGPIOHandle->config.pin);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	68da      	ldr	r2, [r3, #12]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->OTYPER &= ~(0x01 << pGPIOHandle->config.pin); // Clear the bit
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	2101      	movs	r1, #1
 8000820:	fa01 f303 	lsl.w	r3, r1, r3
 8000824:	43db      	mvns	r3, r3
 8000826:	4619      	mov	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	400a      	ands	r2, r1
 800082e:	605a      	str	r2, [r3, #4]
        pGPIOHandle->port->OTYPER |= temp; // Set the bit
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	6859      	ldr	r1, [r3, #4]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	430a      	orrs	r2, r1
 800083e:	605a      	str	r2, [r3, #4]
    }
    temp = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]

    // Configure the speed
    if (pGPIOHandle->config.ospeed <= 3) {
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	691b      	ldr	r3, [r3, #16]
 8000848:	2b03      	cmp	r3, #3
 800084a:	d81e      	bhi.n	800088a <GPIO_Init+0x2b2>
        temp = (pGPIOHandle->config.ospeed << (2 * pGPIOHandle->config.pin));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	691a      	ldr	r2, [r3, #16]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->config.pin)); // Clear the bits
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	689a      	ldr	r2, [r3, #8]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	2103      	movs	r1, #3
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	4619      	mov	r1, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	400a      	ands	r2, r1
 8000878:	609a      	str	r2, [r3, #8]
        pGPIOHandle->port->OSPEEDR |= temp; // Set the bits
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	6899      	ldr	r1, [r3, #8]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	430a      	orrs	r2, r1
 8000888:	609a      	str	r2, [r3, #8]
    }
    temp = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]

    // Configure the pull-up/pull-down
    if (pGPIOHandle->config.pupd <= 3) {
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	2b03      	cmp	r3, #3
 8000894:	d81e      	bhi.n	80008d4 <GPIO_Init+0x2fc>
        temp = (pGPIOHandle->config.pupd << (2 * pGPIOHandle->config.pin));
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	695a      	ldr	r2, [r3, #20]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->PUPDR &= ~(0x03 << (2 * pGPIOHandle->config.pin)); // Clear the bits
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	68da      	ldr	r2, [r3, #12]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	2103      	movs	r1, #3
 80008b4:	fa01 f303 	lsl.w	r3, r1, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	4619      	mov	r1, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	400a      	ands	r2, r1
 80008c2:	60da      	str	r2, [r3, #12]
        pGPIOHandle->port->PUPDR |= temp; // Set the bits
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	68d9      	ldr	r1, [r3, #12]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	430a      	orrs	r2, r1
 80008d2:	60da      	str	r2, [r3, #12]
    }
    temp = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]

    // Configure the alternate function
    if (pGPIOHandle->config.mode == GPIO_MODE_AF) {
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d144      	bne.n	800096a <GPIO_Init+0x392>
        if (pGPIOHandle->config.pin < 8) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2b07      	cmp	r3, #7
 80008e6:	d81f      	bhi.n	8000928 <GPIO_Init+0x350>
            temp = (pGPIOHandle->config.af << (4 * pGPIOHandle->config.pin));
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	699a      	ldr	r2, [r3, #24]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	60fb      	str	r3, [r7, #12]
            pGPIOHandle->port->AFR[0] &= ~(0x0F << (4 * pGPIOHandle->config.pin)); // Clear the bits
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	6a1a      	ldr	r2, [r3, #32]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	210f      	movs	r1, #15
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	4619      	mov	r1, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	400a      	ands	r2, r1
 8000914:	621a      	str	r2, [r3, #32]
            pGPIOHandle->port->AFR[0] |= temp;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	6a19      	ldr	r1, [r3, #32]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	68fa      	ldr	r2, [r7, #12]
 8000922:	430a      	orrs	r2, r1
 8000924:	621a      	str	r2, [r3, #32]
 8000926:	e020      	b.n	800096a <GPIO_Init+0x392>
        }
        else {
            temp = (pGPIOHandle->config.af << (4 * (pGPIOHandle->config.pin - 8)));
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	699a      	ldr	r2, [r3, #24]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	3b08      	subs	r3, #8
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	60fb      	str	r3, [r7, #12]
            pGPIOHandle->port->AFR[1] &= ~(0x0F << (4 * (pGPIOHandle->config.pin - 8))); // Clear the bits
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	3b08      	subs	r3, #8
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	210f      	movs	r1, #15
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	4619      	mov	r1, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	400a      	ands	r2, r1
 8000958:	625a      	str	r2, [r3, #36]	@ 0x24
            pGPIOHandle->port->AFR[1] |= temp;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	68fa      	ldr	r2, [r7, #12]
 8000966:	430a      	orrs	r2, r1
 8000968:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }
    temp = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
}
 800096e:	bf00      	nop
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40013800 	.word	0x40013800
 8000984:	40013c00 	.word	0x40013c00

08000988 <GPIO_IRQConfig>:

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
    pGPIOx->ODR ^= (1 << PinNumber);
}

void GPIO_IRQConfig (uint8_t IRQNumber, uint8_t EnorDi) {
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	460a      	mov	r2, r1
 8000992:	71fb      	strb	r3, [r7, #7]
 8000994:	4613      	mov	r3, r2
 8000996:	71bb      	strb	r3, [r7, #6]
    if (EnorDi == ENABLE) {
 8000998:	79bb      	ldrb	r3, [r7, #6]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d133      	bne.n	8000a06 <GPIO_IRQConfig+0x7e>
        if (IRQNumber <= 31) {
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2b1f      	cmp	r3, #31
 80009a2:	d80a      	bhi.n	80009ba <GPIO_IRQConfig+0x32>
            // Program ISER0 register
            *NVIC_ISER0 |= (1 << IRQNumber);
 80009a4:	4b35      	ldr	r3, [pc, #212]	@ (8000a7c <GPIO_IRQConfig+0xf4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	79fa      	ldrb	r2, [r7, #7]
 80009aa:	2101      	movs	r1, #1
 80009ac:	fa01 f202 	lsl.w	r2, r1, r2
 80009b0:	4611      	mov	r1, r2
 80009b2:	4a32      	ldr	r2, [pc, #200]	@ (8000a7c <GPIO_IRQConfig+0xf4>)
 80009b4:	430b      	orrs	r3, r1
 80009b6:	6013      	str	r3, [r2, #0]
        else if (IRQNumber >= 64 && IRQNumber < 96) {
            // Program ICER2 register
            *NVIC_ICER2 |= (1 << (IRQNumber % 64));
        }
    }
}
 80009b8:	e059      	b.n	8000a6e <GPIO_IRQConfig+0xe6>
        else if (IRQNumber > 31 && IRQNumber < 64) {
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b1f      	cmp	r3, #31
 80009be:	d90f      	bls.n	80009e0 <GPIO_IRQConfig+0x58>
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80009c4:	d80c      	bhi.n	80009e0 <GPIO_IRQConfig+0x58>
            *NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80009c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a80 <GPIO_IRQConfig+0xf8>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	79fa      	ldrb	r2, [r7, #7]
 80009cc:	f002 021f 	and.w	r2, r2, #31
 80009d0:	2101      	movs	r1, #1
 80009d2:	fa01 f202 	lsl.w	r2, r1, r2
 80009d6:	4611      	mov	r1, r2
 80009d8:	4a29      	ldr	r2, [pc, #164]	@ (8000a80 <GPIO_IRQConfig+0xf8>)
 80009da:	430b      	orrs	r3, r1
 80009dc:	6013      	str	r3, [r2, #0]
 80009de:	e046      	b.n	8000a6e <GPIO_IRQConfig+0xe6>
        else if (IRQNumber >= 64 && IRQNumber < 96) {
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80009e4:	d943      	bls.n	8000a6e <GPIO_IRQConfig+0xe6>
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b5f      	cmp	r3, #95	@ 0x5f
 80009ea:	d840      	bhi.n	8000a6e <GPIO_IRQConfig+0xe6>
            *NVIC_ISER2 |= (1 << (IRQNumber % 64));
 80009ec:	4b25      	ldr	r3, [pc, #148]	@ (8000a84 <GPIO_IRQConfig+0xfc>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	79fa      	ldrb	r2, [r7, #7]
 80009f2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80009f6:	2101      	movs	r1, #1
 80009f8:	fa01 f202 	lsl.w	r2, r1, r2
 80009fc:	4611      	mov	r1, r2
 80009fe:	4a21      	ldr	r2, [pc, #132]	@ (8000a84 <GPIO_IRQConfig+0xfc>)
 8000a00:	430b      	orrs	r3, r1
 8000a02:	6013      	str	r3, [r2, #0]
}
 8000a04:	e033      	b.n	8000a6e <GPIO_IRQConfig+0xe6>
        if (IRQNumber <= 31) {
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b1f      	cmp	r3, #31
 8000a0a:	d80a      	bhi.n	8000a22 <GPIO_IRQConfig+0x9a>
            *NVIC_ICER0 |= (1 << IRQNumber);
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a88 <GPIO_IRQConfig+0x100>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	79fa      	ldrb	r2, [r7, #7]
 8000a12:	2101      	movs	r1, #1
 8000a14:	fa01 f202 	lsl.w	r2, r1, r2
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4a1b      	ldr	r2, [pc, #108]	@ (8000a88 <GPIO_IRQConfig+0x100>)
 8000a1c:	430b      	orrs	r3, r1
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	e025      	b.n	8000a6e <GPIO_IRQConfig+0xe6>
        else if (IRQNumber > 31 && IRQNumber < 64) {
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b1f      	cmp	r3, #31
 8000a26:	d90f      	bls.n	8000a48 <GPIO_IRQConfig+0xc0>
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a2c:	d80c      	bhi.n	8000a48 <GPIO_IRQConfig+0xc0>
            *NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000a2e:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <GPIO_IRQConfig+0x104>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	f002 021f 	and.w	r2, r2, #31
 8000a38:	2101      	movs	r1, #1
 8000a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4a12      	ldr	r2, [pc, #72]	@ (8000a8c <GPIO_IRQConfig+0x104>)
 8000a42:	430b      	orrs	r3, r1
 8000a44:	6013      	str	r3, [r2, #0]
 8000a46:	e012      	b.n	8000a6e <GPIO_IRQConfig+0xe6>
        else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a4c:	d90f      	bls.n	8000a6e <GPIO_IRQConfig+0xe6>
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b5f      	cmp	r3, #95	@ 0x5f
 8000a52:	d80c      	bhi.n	8000a6e <GPIO_IRQConfig+0xe6>
            *NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000a54:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <GPIO_IRQConfig+0x108>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	79fa      	ldrb	r2, [r7, #7]
 8000a5a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000a5e:	2101      	movs	r1, #1
 8000a60:	fa01 f202 	lsl.w	r2, r1, r2
 8000a64:	4611      	mov	r1, r2
 8000a66:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <GPIO_IRQConfig+0x108>)
 8000a68:	430b      	orrs	r3, r1
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	e7ff      	b.n	8000a6e <GPIO_IRQConfig+0xe6>
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e100 	.word	0xe000e100
 8000a80:	e000e104 	.word	0xe000e104
 8000a84:	e000e108 	.word	0xe000e108
 8000a88:	e000e180 	.word	0xe000e180
 8000a8c:	e000e184 	.word	0xe000e184
 8000a90:	e000e188 	.word	0xe000e188

08000a94 <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
    // Calculate the priority group
    uint8_t iprx = IRQNumber / 4;
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	089b      	lsrs	r3, r3, #2
 8000aa4:	73fb      	strb	r3, [r7, #15]
    uint8_t iprx_section = IRQNumber % 4;
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 0303 	and.w	r3, r3, #3
 8000aac:	73bb      	strb	r3, [r7, #14]
    uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000aae:	7bbb      	ldrb	r3, [r7, #14]
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	737b      	strb	r3, [r7, #13]
    *(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000ac0:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000ac4:	6819      	ldr	r1, [r3, #0]
 8000ac6:	7b7b      	ldrb	r3, [r7, #13]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	409a      	lsls	r2, r3
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000ad4:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	601a      	str	r2, [r3, #0]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <TIM_Init>:
 */

#include "stm32f429i.h"
#include "stm32f429i_timer_driver.h"

void TIM_Init(TIM_Handle_t *pTIMHandle) {
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
    // Enable the peripheral clock for the timer

    // Configure the timer
    pTIMHandle->pTIMx->PSC = pTIMHandle->config.prescaler - 1; // Set prescaler
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	3a01      	subs	r2, #1
 8000afa:	629a      	str	r2, [r3, #40]	@ 0x28
    pTIMHandle->pTIMx->ARR = pTIMHandle->config.period - 1;    // Set auto-reload value
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	3a01      	subs	r2, #1
 8000b06:	62da      	str	r2, [r3, #44]	@ 0x2c
    pTIMHandle->pTIMx->CR[0] = (pTIMHandle->config.mode << 4); // Set mode
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	68da      	ldr	r2, [r3, #12]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	0112      	lsls	r2, r2, #4
 8000b12:	601a      	str	r2, [r3, #0]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <TIM_Start>:

void TIM_SetPrescaler(TIM_Handle_t *pTIMHandle, uint32_t prescaler) {
    pTIMHandle->pTIMx->PSC = prescaler - 1; // Set prescaler
}

void TIM_Start(TIM_Handle_t *pTIMHandle) {
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    pTIMHandle->pTIMx->CR[0] |= (1 << 0); // Enable the timer
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f042 0201 	orr.w	r2, r2, #1
 8000b36:	601a      	str	r2, [r3, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <TIM_SetupChannel>:

void TIM_Stop(TIM_Handle_t *pTIMHandle) {
    pTIMHandle->pTIMx->CR[0] &= ~(1 << 0); // Disable the timer
}

void TIM_SetupChannel(TIM_Handle_t *pTIMHandle, uint32_t channel) {
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
    uint8_t temp1 = channel / 2;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	085b      	lsrs	r3, r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
    uint8_t temp2 = channel % 2;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	73bb      	strb	r3, [r7, #14]
    // Configure the channel
    pTIMHandle->pTIMx->CCMR[temp1] &= ~(0x03 << (4 * temp2)); // Clear the bits
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	7bfa      	ldrb	r2, [r7, #15]
 8000b64:	3206      	adds	r2, #6
 8000b66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b6a:	7bbb      	ldrb	r3, [r7, #14]
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	2203      	movs	r2, #3
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	43db      	mvns	r3, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	7bfa      	ldrb	r2, [r7, #15]
 8000b7e:	4001      	ands	r1, r0
 8000b80:	3206      	adds	r2, #6
 8000b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pTIMHandle->pTIMx->CCMR[temp1] |= (pTIMHandle->config.channelConfig[channel].ccm << temp2); // Set Capture/Compare mode
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	7bfa      	ldrb	r2, [r7, #15]
 8000b8c:	3206      	adds	r2, #6
 8000b8e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	4613      	mov	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4413      	add	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	3314      	adds	r3, #20
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	7bbb      	ldrb	r3, [r7, #14]
 8000ba6:	fa02 f103 	lsl.w	r1, r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	7bfa      	ldrb	r2, [r7, #15]
 8000bb0:	4301      	orrs	r1, r0
 8000bb2:	3206      	adds	r2, #6
 8000bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pTIMHandle->pTIMx->CCER &= ~(0x06 << (4 * channel)); // Clear the CCxP bits
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	6a1a      	ldr	r2, [r3, #32]
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	2106      	movs	r1, #6
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	4619      	mov	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	400a      	ands	r2, r1
 8000bd2:	621a      	str	r2, [r3, #32]
    uint32_t tmp = (pTIMHandle->config.channelConfig[channel].ic_mode);
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	683a      	ldr	r2, [r7, #0]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	4413      	add	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	440b      	add	r3, r1
 8000be2:	3318      	adds	r3, #24
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	60bb      	str	r3, [r7, #8]
    pTIMHandle->pTIMx->CCER |= (pTIMHandle->config.channelConfig[channel].ic_mode); // Set Input Capture mode
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6a19      	ldr	r1, [r3, #32]
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	683a      	ldr	r2, [r7, #0]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	4413      	add	r3, r2
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	4403      	add	r3, r0
 8000bfc:	3318      	adds	r3, #24
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	430a      	orrs	r2, r1
 8000c06:	621a      	str	r2, [r3, #32]
    pTIMHandle->pTIMx->CCER |= (1 << (4 * channel)); // Enable the channel
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	6a1a      	ldr	r2, [r3, #32]
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	2101      	movs	r1, #1
 8000c14:	fa01 f303 	lsl.w	r3, r1, r3
 8000c18:	4619      	mov	r1, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	621a      	str	r2, [r3, #32]
}
 8000c22:	bf00      	nop
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <TIM_EnableInterrupt>:
//         pTIMHandle->pTIMx->SR &= ~TIM_FLAG_CC1IF;
//         // Handle the interrupt (e.g., read captured value)
//     }
// }

void TIM_EnableInterrupt(TIM_Handle_t *pTIMHandle, uint32_t channel) {
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	6039      	str	r1, [r7, #0]
    pTIMHandle->pTIMx->DIER |= (1 << (channel + 1)); // Enable interrupt for the specified channel
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	68da      	ldr	r2, [r3, #12]
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	3301      	adds	r3, #1
 8000c42:	2101      	movs	r1, #1
 8000c44:	fa01 f303 	lsl.w	r3, r1, r3
 8000c48:	4619      	mov	r1, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	60da      	str	r2, [r3, #12]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c60:	480d      	ldr	r0, [pc, #52]	@ (8000c98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c62:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c64:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c68:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6a:	490d      	ldr	r1, [pc, #52]	@ (8000ca0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca4 <LoopForever+0xe>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c80:	4c0a      	ldr	r4, [pc, #40]	@ (8000cac <LoopForever+0x16>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c8e:	f000 f811 	bl	8000cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c92:	f7ff fc85 	bl	80005a0 <main>

08000c96 <LoopForever>:

LoopForever:
  b LoopForever
 8000c96:	e7fe      	b.n	8000c96 <LoopForever>
  ldr   r0, =_estack
 8000c98:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ca4:	08000d1c 	.word	0x08000d1c
  ldr r2, =_sbss
 8000ca8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000cac:	20000034 	.word	0x20000034

08000cb0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC_IRQHandler>
	...

08000cb4 <__libc_init_array>:
 8000cb4:	b570      	push	{r4, r5, r6, lr}
 8000cb6:	4d0d      	ldr	r5, [pc, #52]	@ (8000cec <__libc_init_array+0x38>)
 8000cb8:	4c0d      	ldr	r4, [pc, #52]	@ (8000cf0 <__libc_init_array+0x3c>)
 8000cba:	1b64      	subs	r4, r4, r5
 8000cbc:	10a4      	asrs	r4, r4, #2
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	42a6      	cmp	r6, r4
 8000cc2:	d109      	bne.n	8000cd8 <__libc_init_array+0x24>
 8000cc4:	4d0b      	ldr	r5, [pc, #44]	@ (8000cf4 <__libc_init_array+0x40>)
 8000cc6:	4c0c      	ldr	r4, [pc, #48]	@ (8000cf8 <__libc_init_array+0x44>)
 8000cc8:	f000 f818 	bl	8000cfc <_init>
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	10a4      	asrs	r4, r4, #2
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	42a6      	cmp	r6, r4
 8000cd4:	d105      	bne.n	8000ce2 <__libc_init_array+0x2e>
 8000cd6:	bd70      	pop	{r4, r5, r6, pc}
 8000cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cdc:	4798      	blx	r3
 8000cde:	3601      	adds	r6, #1
 8000ce0:	e7ee      	b.n	8000cc0 <__libc_init_array+0xc>
 8000ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ce6:	4798      	blx	r3
 8000ce8:	3601      	adds	r6, #1
 8000cea:	e7f2      	b.n	8000cd2 <__libc_init_array+0x1e>
 8000cec:	08000d14 	.word	0x08000d14
 8000cf0:	08000d14 	.word	0x08000d14
 8000cf4:	08000d14 	.word	0x08000d14
 8000cf8:	08000d18 	.word	0x08000d18

08000cfc <_init>:
 8000cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfe:	bf00      	nop
 8000d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d02:	bc08      	pop	{r3}
 8000d04:	469e      	mov	lr, r3
 8000d06:	4770      	bx	lr

08000d08 <_fini>:
 8000d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0a:	bf00      	nop
 8000d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d0e:	bc08      	pop	{r3}
 8000d10:	469e      	mov	lr, r3
 8000d12:	4770      	bx	lr
