
morse-code-converter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012a4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08001450  08001450  00002450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800153c  0800153c  00003050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800153c  0800153c  00003050  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800153c  0800153c  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800153c  0800153c  0000253c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001540  08001540  00002540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001544  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003050  2**0
                  CONTENTS
 10 .bss          00000178  20000050  20000050  00003050  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  00003050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001677  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000062f  00000000  00000000  000046f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  00004d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000116  00000000  00000000  00004eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002910  00000000  00000000  00004fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000225d  00000000  00000000  000078d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000094ad  00000000  00000000  00009b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00012fe0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000007c8  00000000  00000000  00013024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  000137ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000050 	.word	0x20000050
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001438 	.word	0x08001438

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000054 	.word	0x20000054
 80001e8:	08001438 	.word	0x08001438

080001ec <GPIO_InitConfig>:
#endif

char morse_input[6] = {0}; // Variable to store the Morse code input
int morse_index = 0; // Index for the Morse code input

void GPIO_InitConfig(GPIO_Handle_t *GpioBtn, GPIO_Handle_t *GpioLED1, GPIO_Handle_t *GpioLED2) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	60f8      	str	r0, [r7, #12]
 80001f4:	60b9      	str	r1, [r7, #8]
 80001f6:	607a      	str	r2, [r7, #4]
	GPIOA_PCLK_EN();
 80001f8:	4b24      	ldr	r3, [pc, #144]	@ (800028c <GPIO_InitConfig+0xa0>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fc:	4a23      	ldr	r2, [pc, #140]	@ (800028c <GPIO_InitConfig+0xa0>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6313      	str	r3, [r2, #48]	@ 0x30
    // Initialize GPIOA as alternate function mode for TIM2_CH1
	GpioBtn->port = GPIOA;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	4a22      	ldr	r2, [pc, #136]	@ (8000290 <GPIO_InitConfig+0xa4>)
 8000208:	601a      	str	r2, [r3, #0]
	GpioBtn->config.pin = 0;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	2200      	movs	r2, #0
 800020e:	605a      	str	r2, [r3, #4]
	GpioBtn->config.mode = GPIO_MODE_IT_RFT; // Interrupt mode
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	2206      	movs	r2, #6
 8000214:	609a      	str	r2, [r3, #8]
	GpioBtn->config.otype = GPIO_OTYPE_PP; // Push-pull
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	2200      	movs	r2, #0
 800021a:	60da      	str	r2, [r3, #12]
	GpioBtn->config.ospeed = GPIO_OSPEED_LOW; // Fast speed
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	2200      	movs	r2, #0
 8000220:	611a      	str	r2, [r3, #16]
	GpioBtn->config.pupd = GPIO_PUPD_NONE; // Pull-up
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	2200      	movs	r2, #0
 8000226:	615a      	str	r2, [r3, #20]
	GPIO_Init(GpioBtn);
 8000228:	68f8      	ldr	r0, [r7, #12]
 800022a:	f000 fc71 	bl	8000b10 <GPIO_Init>

    // 初始化 GPIO2 和 GPIO3 為輸出模式
    GpioLED1->port = GPIOA;
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	4a17      	ldr	r2, [pc, #92]	@ (8000290 <GPIO_InitConfig+0xa4>)
 8000232:	601a      	str	r2, [r3, #0]
    GpioLED1->config.pin = 4; // GPIO2
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	2204      	movs	r2, #4
 8000238:	605a      	str	r2, [r3, #4]
    GpioLED1->config.mode = GPIO_MODE_OUTPUT;
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	2201      	movs	r2, #1
 800023e:	609a      	str	r2, [r3, #8]
    GpioLED1->config.otype = GPIO_OTYPE_PP;
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	2200      	movs	r2, #0
 8000244:	60da      	str	r2, [r3, #12]
    GpioLED1->config.ospeed = GPIO_OSPEED_LOW;
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	2200      	movs	r2, #0
 800024a:	611a      	str	r2, [r3, #16]
	GpioLED1->config.pupd = GPIO_PUPD_NONE;
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	2200      	movs	r2, #0
 8000250:	615a      	str	r2, [r3, #20]
    GPIO_Init(GpioLED1);
 8000252:	68b8      	ldr	r0, [r7, #8]
 8000254:	f000 fc5c 	bl	8000b10 <GPIO_Init>

    GpioLED2->port = GPIOA;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a0d      	ldr	r2, [pc, #52]	@ (8000290 <GPIO_InitConfig+0xa4>)
 800025c:	601a      	str	r2, [r3, #0]
    GpioLED2->config.pin = 5; // GPIO3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2205      	movs	r2, #5
 8000262:	605a      	str	r2, [r3, #4]
    GpioLED2->config.mode = GPIO_MODE_OUTPUT;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2201      	movs	r2, #1
 8000268:	609a      	str	r2, [r3, #8]
    GpioLED2->config.otype = GPIO_OTYPE_PP;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2200      	movs	r2, #0
 800026e:	60da      	str	r2, [r3, #12]
    GpioLED2->config.ospeed = GPIO_OSPEED_LOW;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2200      	movs	r2, #0
 8000274:	611a      	str	r2, [r3, #16]
    GpioLED2->config.pupd = GPIO_PUPD_NONE;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2200      	movs	r2, #0
 800027a:	615a      	str	r2, [r3, #20]
    GPIO_Init(GpioLED2);
 800027c:	6878      	ldr	r0, [r7, #4]
 800027e:	f000 fc47 	bl	8000b10 <GPIO_Init>
}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40023800 	.word	0x40023800
 8000290:	40020000 	.word	0x40020000

08000294 <TIM_Config>:

// TIM2 configuration
void TIM_Config(TIM_Handle_t *TIMBtn, TIM_Handle_t *TIMLED1, TIM_Handle_t *TIMLED2) {
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	60f8      	str	r0, [r7, #12]
 800029c:	60b9      	str	r1, [r7, #8]
 800029e:	607a      	str	r2, [r7, #4]
	// Initialize TIM2 for LED1
	TIMBtn->pTIMx = TIM2;
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002a6:	601a      	str	r2, [r3, #0]
	TIM2->ARR = 600;
 80002a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ac:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80002b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->PSC = 16000 - 1; // Prescaler value
 80002b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b6:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80002ba:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->CR[0] = 0; // Timer mode (up)
 80002bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
	TIM2_PCLK_EN();
 80002c4:	4b30      	ldr	r3, [pc, #192]	@ (8000388 <TIM_Config+0xf4>)
 80002c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002c8:	4a2f      	ldr	r2, [pc, #188]	@ (8000388 <TIM_Config+0xf4>)
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	6413      	str	r3, [r2, #64]	@ 0x40

	// Initialize TIM3 for LED1
	TIMLED1->pTIMx = TIM3;
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	4a2e      	ldr	r2, [pc, #184]	@ (800038c <TIM_Config+0xf8>)
 80002d4:	601a      	str	r2, [r3, #0]
	TIM3->ARR = 600;
 80002d6:	4b2d      	ldr	r3, [pc, #180]	@ (800038c <TIM_Config+0xf8>)
 80002d8:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80002dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->PSC = 16000 - 1; // Prescaler value
 80002de:	4b2b      	ldr	r3, [pc, #172]	@ (800038c <TIM_Config+0xf8>)
 80002e0:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80002e4:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->CR[0] = 0; // Timer mode (up)
 80002e6:	4b29      	ldr	r3, [pc, #164]	@ (800038c <TIM_Config+0xf8>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
	TIM3_PCLK_EN();
 80002ec:	4b26      	ldr	r3, [pc, #152]	@ (8000388 <TIM_Config+0xf4>)
 80002ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002f0:	4a25      	ldr	r2, [pc, #148]	@ (8000388 <TIM_Config+0xf4>)
 80002f2:	f043 0302 	orr.w	r3, r3, #2
 80002f6:	6413      	str	r3, [r2, #64]	@ 0x40

	// Initialize TIM4 for LED2
	TIMLED2->pTIMx = TIM4;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a25      	ldr	r2, [pc, #148]	@ (8000390 <TIM_Config+0xfc>)
 80002fc:	601a      	str	r2, [r3, #0]
	TIMLED2->config.prescaler = 16000; // Prescaler value
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000304:	605a      	str	r2, [r3, #4]
	TIMLED2->config.period = 1200; // Auto-reload value
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800030c:	609a      	str	r2, [r3, #8]
	TIMLED2->config.mode = 0;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
	TIM4_PCLK_EN();
 8000314:	4b1c      	ldr	r3, [pc, #112]	@ (8000388 <TIM_Config+0xf4>)
 8000316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000318:	4a1b      	ldr	r2, [pc, #108]	@ (8000388 <TIM_Config+0xf4>)
 800031a:	f043 0304 	orr.w	r3, r3, #4
 800031e:	6413      	str	r3, [r2, #64]	@ 0x40

	TIMBtn->pTIMx->DIER |= (1 << 0); // Enable interrupt for TIM2
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	68da      	ldr	r2, [r3, #12]
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f042 0201 	orr.w	r2, r2, #1
 800032e:	60da      	str	r2, [r3, #12]
	TIMLED1->pTIMx->DIER |= (1 << 0); // Enable interrupt for TIM3
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	68da      	ldr	r2, [r3, #12]
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f042 0201 	orr.w	r2, r2, #1
 800033e:	60da      	str	r2, [r3, #12]
	TIMLED2->pTIMx->DIER |= (1 << 0); // Enable interrupt for TIM4
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	68da      	ldr	r2, [r3, #12]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f042 0201 	orr.w	r2, r2, #1
 800034e:	60da      	str	r2, [r3, #12]
	GPIO_IRQPriorityConfig(IRQ_NO_TIM2, NVIC_IRQ_PRI0); // Set TIM2 interrupt priority
 8000350:	2100      	movs	r1, #0
 8000352:	201c      	movs	r0, #28
 8000354:	f000 fe3a 	bl	8000fcc <GPIO_IRQPriorityConfig>
	GPIO_IRQPriorityConfig(IRQ_NO_TIM3, NVIC_IRQ_PRI1); // Set TIM3 interrupt priority
 8000358:	2101      	movs	r1, #1
 800035a:	201d      	movs	r0, #29
 800035c:	f000 fe36 	bl	8000fcc <GPIO_IRQPriorityConfig>
	GPIO_IRQPriorityConfig(IRQ_NO_TIM4, NVIC_IRQ_PRI2); // Set TIM4 interrupt priority
 8000360:	2102      	movs	r1, #2
 8000362:	201e      	movs	r0, #30
 8000364:	f000 fe32 	bl	8000fcc <GPIO_IRQPriorityConfig>
	GPIO_IRQConfig(IRQ_NO_TIM2, ENABLE); // Enable TIM2 interrupt in NVIC
 8000368:	2101      	movs	r1, #1
 800036a:	201c      	movs	r0, #28
 800036c:	f000 fda8 	bl	8000ec0 <GPIO_IRQConfig>
	GPIO_IRQConfig(IRQ_NO_TIM3, ENABLE); // Enable TIM3 interrupt in NVIC
 8000370:	2101      	movs	r1, #1
 8000372:	201d      	movs	r0, #29
 8000374:	f000 fda4 	bl	8000ec0 <GPIO_IRQConfig>
	GPIO_IRQConfig(IRQ_NO_TIM4, ENABLE); // Enable TIM4 interrupt in NVIC
 8000378:	2101      	movs	r1, #1
 800037a:	201e      	movs	r0, #30
 800037c:	f000 fda0 	bl	8000ec0 <GPIO_IRQConfig>
}
 8000380:	bf00      	nop
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40023800 	.word	0x40023800
 800038c:	40000400 	.word	0x40000400
 8000390:	40000800 	.word	0x40000800

08000394 <Timer2_StartCountdown>:

void Timer2_StartCountdown(uint32_t milliseconds) {
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	TIM2->CR[0] &= ~(1 << 0);        // 確保 Timer 先停住
 800039c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003a6:	f023 0301 	bic.w	r3, r3, #1
 80003aa:	6013      	str	r3, [r2, #0]
	TIM2->CR[0] |= (1 << 2);
 80003ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003b6:	f043 0304 	orr.w	r3, r3, #4
 80003ba:	6013      	str	r3, [r2, #0]
	TIM2->PSC = 16000 - 1;         // 設定 Prescaler
 80003bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c0:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80003c4:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = milliseconds - 1;    // 設定 ARR
 80003c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	3b01      	subs	r3, #1
 80003ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM2->CNT = 0;                   // 重設計數器
 80003d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003d4:	2200      	movs	r2, #0
 80003d6:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->EGR |= (1 << 0);
 80003d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003e2:	f043 0301 	orr.w	r3, r3, #1
 80003e6:	6153      	str	r3, [r2, #20]
	TIM2->SR &= ~TIM_FLAG_UIF;       // 清除中斷旗標
 80003e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ec:	691b      	ldr	r3, [r3, #16]
 80003ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003f2:	f023 0301 	bic.w	r3, r3, #1
 80003f6:	6113      	str	r3, [r2, #16]
	TIM2->CR[0] |= (1 << 0);         // 啟動 Timer
 80003f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000402:	f043 0301 	orr.w	r3, r3, #1
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <Timer3_StartCountdown>:

void Timer3_StartCountdown(uint32_t milliseconds) {
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
    TIM3->CR[0] &= ~(1 << 0);        // 確保 Timer 先停住
 800041c:	4b17      	ldr	r3, [pc, #92]	@ (800047c <Timer3_StartCountdown+0x68>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a16      	ldr	r2, [pc, #88]	@ (800047c <Timer3_StartCountdown+0x68>)
 8000422:	f023 0301 	bic.w	r3, r3, #1
 8000426:	6013      	str	r3, [r2, #0]
    TIM3->CR[0] |= (1 << 2);
 8000428:	4b14      	ldr	r3, [pc, #80]	@ (800047c <Timer3_StartCountdown+0x68>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a13      	ldr	r2, [pc, #76]	@ (800047c <Timer3_StartCountdown+0x68>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6013      	str	r3, [r2, #0]
	TIM3->PSC = 16000 - 1;         // 設定 Prescaler
 8000434:	4b11      	ldr	r3, [pc, #68]	@ (800047c <Timer3_StartCountdown+0x68>)
 8000436:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800043a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = milliseconds - 1;    // 設定 ARR
 800043c:	4a0f      	ldr	r2, [pc, #60]	@ (800047c <Timer3_StartCountdown+0x68>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	3b01      	subs	r3, #1
 8000442:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM3->CNT = 0;                   // 重設計數器
 8000444:	4b0d      	ldr	r3, [pc, #52]	@ (800047c <Timer3_StartCountdown+0x68>)
 8000446:	2200      	movs	r2, #0
 8000448:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->EGR |= (1 << 0);
 800044a:	4b0c      	ldr	r3, [pc, #48]	@ (800047c <Timer3_StartCountdown+0x68>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a0b      	ldr	r2, [pc, #44]	@ (800047c <Timer3_StartCountdown+0x68>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6153      	str	r3, [r2, #20]
    TIM3->SR &= ~TIM_FLAG_UIF;       // 清除中斷旗標
 8000456:	4b09      	ldr	r3, [pc, #36]	@ (800047c <Timer3_StartCountdown+0x68>)
 8000458:	691b      	ldr	r3, [r3, #16]
 800045a:	4a08      	ldr	r2, [pc, #32]	@ (800047c <Timer3_StartCountdown+0x68>)
 800045c:	f023 0301 	bic.w	r3, r3, #1
 8000460:	6113      	str	r3, [r2, #16]
    TIM3->CR[0] |= (1 << 0);         // 啟動 Timer
 8000462:	4b06      	ldr	r3, [pc, #24]	@ (800047c <Timer3_StartCountdown+0x68>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a05      	ldr	r2, [pc, #20]	@ (800047c <Timer3_StartCountdown+0x68>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6013      	str	r3, [r2, #0]
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40000400 	.word	0x40000400

08000480 <Timer4_StartCountdown>:

void Timer4_StartCountdown(uint32_t milliseconds) {
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	TIM4->CR[0] &= ~(1 << 0); // 確保 Timer 先停住
 8000488:	4b17      	ldr	r3, [pc, #92]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a16      	ldr	r2, [pc, #88]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 800048e:	f023 0301 	bic.w	r3, r3, #1
 8000492:	6013      	str	r3, [r2, #0]
	TIM4->CR[0] |= (1 << 2);
 8000494:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a13      	ldr	r2, [pc, #76]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 800049a:	f043 0304 	orr.w	r3, r3, #4
 800049e:	6013      	str	r3, [r2, #0]
	TIM4->PSC = 16000 - 1; // 設定 Prescaler
 80004a0:	4b11      	ldr	r3, [pc, #68]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 80004a2:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80004a6:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = milliseconds - 1;
 80004a8:	4a0f      	ldr	r2, [pc, #60]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	3b01      	subs	r3, #1
 80004ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM4->CNT = 0;
 80004b0:	4b0d      	ldr	r3, [pc, #52]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->EGR |= (1 << 0); // 更新計數器
 80004b6:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a0b      	ldr	r2, [pc, #44]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6153      	str	r3, [r2, #20]
	TIM4->SR &= ~TIM_FLAG_UIF; // 清除 update flag
 80004c2:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 80004c4:	691b      	ldr	r3, [r3, #16]
 80004c6:	4a08      	ldr	r2, [pc, #32]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 80004c8:	f023 0301 	bic.w	r3, r3, #1
 80004cc:	6113      	str	r3, [r2, #16]
	TIM4->CR[0] |= (1 << 0); // 啟動 Timer
 80004ce:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a05      	ldr	r2, [pc, #20]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6013      	str	r3, [r2, #0]
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40000800 	.word	0x40000800

080004ec <Timer2_Stop>:

void Timer2_Stop(void) {
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
	TIM2->CR[0] &= ~(1 << 0); // 停止計數
 80004f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004fa:	f023 0301 	bic.w	r3, r3, #1
 80004fe:	6013      	str	r3, [r2, #0]
	TIM2->CNT = 0;
 8000500:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000504:	2200      	movs	r2, #0
 8000506:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->SR &= ~TIM_FLAG_UIF;   // 清除旗標
 8000508:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800050c:	691b      	ldr	r3, [r3, #16]
 800050e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000512:	f023 0301 	bic.w	r3, r3, #1
 8000516:	6113      	str	r3, [r2, #16]
	GPIOA->ODR &= ~(1 << 4); // Reset GPIO1
 8000518:	4b05      	ldr	r3, [pc, #20]	@ (8000530 <Timer2_Stop+0x44>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	4a04      	ldr	r2, [pc, #16]	@ (8000530 <Timer2_Stop+0x44>)
 800051e:	f023 0310 	bic.w	r3, r3, #16
 8000522:	6153      	str	r3, [r2, #20]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40020000 	.word	0x40020000

08000534 <Timer3_Stop>:

void Timer3_Stop(void) {
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
    TIM3->CR[0] &= ~(1 << 0); // 停止計數
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <Timer3_Stop+0x38>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a0b      	ldr	r2, [pc, #44]	@ (800056c <Timer3_Stop+0x38>)
 800053e:	f023 0301 	bic.w	r3, r3, #1
 8000542:	6013      	str	r3, [r2, #0]
    TIM3->CNT = 0;
 8000544:	4b09      	ldr	r3, [pc, #36]	@ (800056c <Timer3_Stop+0x38>)
 8000546:	2200      	movs	r2, #0
 8000548:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM3->SR &= ~TIM_FLAG_UIF;   // 清除旗標
 800054a:	4b08      	ldr	r3, [pc, #32]	@ (800056c <Timer3_Stop+0x38>)
 800054c:	691b      	ldr	r3, [r3, #16]
 800054e:	4a07      	ldr	r2, [pc, #28]	@ (800056c <Timer3_Stop+0x38>)
 8000550:	f023 0301 	bic.w	r3, r3, #1
 8000554:	6113      	str	r3, [r2, #16]
	GPIOA->ODR &= ~(1 << 4); // Reset GPIO2
 8000556:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <Timer3_Stop+0x3c>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a05      	ldr	r2, [pc, #20]	@ (8000570 <Timer3_Stop+0x3c>)
 800055c:	f023 0310 	bic.w	r3, r3, #16
 8000560:	6153      	str	r3, [r2, #20]
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	40000400 	.word	0x40000400
 8000570:	40020000 	.word	0x40020000

08000574 <Timer4_Stop>:

void Timer4_Stop(void) {
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	TIM4->CR[0] &= ~(1 << 0); // 停止計數
 8000578:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <Timer4_Stop+0x38>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a0b      	ldr	r2, [pc, #44]	@ (80005ac <Timer4_Stop+0x38>)
 800057e:	f023 0301 	bic.w	r3, r3, #1
 8000582:	6013      	str	r3, [r2, #0]
	TIM4->CNT = 0;
 8000584:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <Timer4_Stop+0x38>)
 8000586:	2200      	movs	r2, #0
 8000588:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->SR &= ~TIM_FLAG_UIF;   // 清除旗標
 800058a:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <Timer4_Stop+0x38>)
 800058c:	691b      	ldr	r3, [r3, #16]
 800058e:	4a07      	ldr	r2, [pc, #28]	@ (80005ac <Timer4_Stop+0x38>)
 8000590:	f023 0301 	bic.w	r3, r3, #1
 8000594:	6113      	str	r3, [r2, #16]
	GPIOA->ODR &= ~(1 << 5); // Reset GPIO2
 8000596:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <Timer4_Stop+0x3c>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a05      	ldr	r2, [pc, #20]	@ (80005b0 <Timer4_Stop+0x3c>)
 800059c:	f023 0320 	bic.w	r3, r3, #32
 80005a0:	6153      	str	r3, [r2, #20]
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	40000800 	.word	0x40000800
 80005b0:	40020000 	.word	0x40020000

080005b4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(0);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 fd30 	bl	8001020 <GPIO_IRQHandling>
	 	if (GPIOA->IDR & (1 << 0)) { // Check if the button is pressed
 80005c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000670 <EXTI0_IRQHandler+0xbc>)
 80005c2:	691b      	ldr	r3, [r3, #16]
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d044      	beq.n	8000656 <EXTI0_IRQHandler+0xa2>
	 		if (morse_index < 6) {
 80005cc:	4b29      	ldr	r3, [pc, #164]	@ (8000674 <EXTI0_IRQHandler+0xc0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b05      	cmp	r3, #5
 80005d2:	dc24      	bgt.n	800061e <EXTI0_IRQHandler+0x6a>
	 			if (TIM2->SR & TIM_FLAG_UIF) {
 80005d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005d8:	691b      	ldr	r3, [r3, #16]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d012      	beq.n	8000608 <EXTI0_IRQHandler+0x54>
	 				morse_input[morse_index] = '-'; // Store the dash
 80005e2:	4b24      	ldr	r3, [pc, #144]	@ (8000674 <EXTI0_IRQHandler+0xc0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a24      	ldr	r2, [pc, #144]	@ (8000678 <EXTI0_IRQHandler+0xc4>)
 80005e8:	212d      	movs	r1, #45	@ 0x2d
 80005ea:	54d1      	strb	r1, [r2, r3]
	 				morse_index++;
 80005ec:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <EXTI0_IRQHandler+0xc0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	4a20      	ldr	r2, [pc, #128]	@ (8000674 <EXTI0_IRQHandler+0xc0>)
 80005f4:	6013      	str	r3, [r2, #0]
	 				TIM2->SR &= ~TIM_FLAG_UIF; // 清中斷旗標
 80005f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000600:	f023 0301 	bic.w	r3, r3, #1
 8000604:	6113      	str	r3, [r2, #16]
 8000606:	e01b      	b.n	8000640 <EXTI0_IRQHandler+0x8c>
	 			}
	 			else {
	 				morse_input[morse_index] = '.'; // Store the dot
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <EXTI0_IRQHandler+0xc0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a1a      	ldr	r2, [pc, #104]	@ (8000678 <EXTI0_IRQHandler+0xc4>)
 800060e:	212e      	movs	r1, #46	@ 0x2e
 8000610:	54d1      	strb	r1, [r2, r3]
	 				morse_index++;
 8000612:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <EXTI0_IRQHandler+0xc0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	4a16      	ldr	r2, [pc, #88]	@ (8000674 <EXTI0_IRQHandler+0xc0>)
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	e010      	b.n	8000640 <EXTI0_IRQHandler+0x8c>
	 			}
	 		}
	 		else {
	 			for (int i = 0; i < 6; i++) {
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	e007      	b.n	8000634 <EXTI0_IRQHandler+0x80>
	 				morse_input[i] = 0; // Reset the input
 8000624:	4a14      	ldr	r2, [pc, #80]	@ (8000678 <EXTI0_IRQHandler+0xc4>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
	 			for (int i = 0; i < 6; i++) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3301      	adds	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b05      	cmp	r3, #5
 8000638:	ddf4      	ble.n	8000624 <EXTI0_IRQHandler+0x70>
	 			}
	 			morse_index = 0;
 800063a:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <EXTI0_IRQHandler+0xc0>)
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
	 		}
	 		Timer2_Stop(); // Stop the countdown
 8000640:	f7ff ff54 	bl	80004ec <Timer2_Stop>
	 		Timer3_StartCountdown(600);
 8000644:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000648:	f7ff fee4 	bl	8000414 <Timer3_StartCountdown>
	 		Timer4_StartCountdown(2500);
 800064c:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000650:	f7ff ff16 	bl	8000480 <Timer4_StartCountdown>
	 	else { // Check if the button is released
	 		Timer3_Stop();
	 		Timer4_Stop();
	 		Timer2_StartCountdown(600); //Start 600ms countdown to determine it's a short press or a long press
	 	}
     return;
 8000654:	e008      	b.n	8000668 <EXTI0_IRQHandler+0xb4>
	 		Timer3_Stop();
 8000656:	f7ff ff6d 	bl	8000534 <Timer3_Stop>
	 		Timer4_Stop();
 800065a:	f7ff ff8b 	bl	8000574 <Timer4_Stop>
	 		Timer2_StartCountdown(600); //Start 600ms countdown to determine it's a short press or a long press
 800065e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000662:	f7ff fe97 	bl	8000394 <Timer2_StartCountdown>
     return;
 8000666:	bf00      	nop
}
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40020000 	.word	0x40020000
 8000674:	20000074 	.word	0x20000074
 8000678:	2000006c 	.word	0x2000006c

0800067c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_FLAG_UIF) {
 8000680:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000684:	691b      	ldr	r3, [r3, #16]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	2b00      	cmp	r3, #0
 800068c:	d012      	beq.n	80006b4 <TIM2_IRQHandler+0x38>
		TIM2->CR[0] &= ~(1 << 0); // 停止計數
 800068e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000698:	f023 0301 	bic.w	r3, r3, #1
 800069c:	6013      	str	r3, [r2, #0]
    	TIM2->CNT = 0;
 800069e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	@ 0x24
        GPIOA->ODR |= (1 << 4); // Set GPIO3
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <TIM2_IRQHandler+0x44>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	4a05      	ldr	r2, [pc, #20]	@ (80006c0 <TIM2_IRQHandler+0x44>)
 80006ac:	f043 0310 	orr.w	r3, r3, #16
 80006b0:	6153      	str	r3, [r2, #20]
    }
    return;
 80006b2:	bf00      	nop
 80006b4:	bf00      	nop
}
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40020000 	.word	0x40020000

080006c4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_FLAG_UIF) {
 80006ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <TIM3_IRQHandler+0x84>)
 80006cc:	691b      	ldr	r3, [r3, #16]
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d033      	beq.n	800073e <TIM3_IRQHandler+0x7a>
        TIM3->SR &= ~TIM_FLAG_UIF; // 清中斷旗標
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <TIM3_IRQHandler+0x84>)
 80006d8:	691b      	ldr	r3, [r3, #16]
 80006da:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <TIM3_IRQHandler+0x84>)
 80006dc:	f023 0301 	bic.w	r3, r3, #1
 80006e0:	6113      	str	r3, [r2, #16]
		TIM3->CR[0] &= ~(1 << 0); // 停止計數
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <TIM3_IRQHandler+0x84>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a18      	ldr	r2, [pc, #96]	@ (8000748 <TIM3_IRQHandler+0x84>)
 80006e8:	f023 0301 	bic.w	r3, r3, #1
 80006ec:	6013      	str	r3, [r2, #0]
    	TIM3->CNT = 0;
 80006ee:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <TIM3_IRQHandler+0x84>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	@ 0x24
        GPIOA->ODR |= (1 << 4); // Set GPIO3
 80006f4:	4b15      	ldr	r3, [pc, #84]	@ (800074c <TIM3_IRQHandler+0x88>)
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	4a14      	ldr	r2, [pc, #80]	@ (800074c <TIM3_IRQHandler+0x88>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	6153      	str	r3, [r2, #20]
		char inputLetter = morse_lookup(morse_input);
 8000700:	4813      	ldr	r0, [pc, #76]	@ (8000750 <TIM3_IRQHandler+0x8c>)
 8000702:	f000 f9b7 	bl	8000a74 <morse_lookup>
 8000706:	4603      	mov	r3, r0
 8000708:	70fb      	strb	r3, [r7, #3]
		if (inputLetter != '?') {
 800070a:	78fb      	ldrb	r3, [r7, #3]
 800070c:	2b3f      	cmp	r3, #63	@ 0x3f
 800070e:	d004      	beq.n	800071a <TIM3_IRQHandler+0x56>
			I2C1_SendByte(0x08, inputLetter); // Call the lookup function
 8000710:	78fb      	ldrb	r3, [r7, #3]
 8000712:	4619      	mov	r1, r3
 8000714:	2008      	movs	r0, #8
 8000716:	f000 fcfb 	bl	8001110 <I2C1_SendByte>
		}
		for (int i = 0; i < 6; i++) {
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	e007      	b.n	8000730 <TIM3_IRQHandler+0x6c>
			morse_input[i] = 0; // Reset the input
 8000720:	4a0b      	ldr	r2, [pc, #44]	@ (8000750 <TIM3_IRQHandler+0x8c>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 6; i++) {
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3301      	adds	r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b05      	cmp	r3, #5
 8000734:	ddf4      	ble.n	8000720 <TIM3_IRQHandler+0x5c>
		}
		morse_index = 0;
 8000736:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <TIM3_IRQHandler+0x90>)
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
    }
    return;
 800073c:	bf00      	nop
 800073e:	bf00      	nop
}
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40000400 	.word	0x40000400
 800074c:	40020000 	.word	0x40020000
 8000750:	2000006c 	.word	0x2000006c
 8000754:	20000074 	.word	0x20000074

08000758 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_FLAG_UIF) {
 800075c:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <TIM4_IRQHandler+0x48>)
 800075e:	691b      	ldr	r3, [r3, #16]
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	2b00      	cmp	r3, #0
 8000766:	d019      	beq.n	800079c <TIM4_IRQHandler+0x44>
        TIM4->SR &= ~TIM_FLAG_UIF; // 清中斷旗標
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <TIM4_IRQHandler+0x48>)
 800076a:	691b      	ldr	r3, [r3, #16]
 800076c:	4a0c      	ldr	r2, [pc, #48]	@ (80007a0 <TIM4_IRQHandler+0x48>)
 800076e:	f023 0301 	bic.w	r3, r3, #1
 8000772:	6113      	str	r3, [r2, #16]
		TIM4->CR[0] &= ~(1 << 0); // 停止計數
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <TIM4_IRQHandler+0x48>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a09      	ldr	r2, [pc, #36]	@ (80007a0 <TIM4_IRQHandler+0x48>)
 800077a:	f023 0301 	bic.w	r3, r3, #1
 800077e:	6013      	str	r3, [r2, #0]
    	TIM4->CNT = 0;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <TIM4_IRQHandler+0x48>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	@ 0x24
        GPIOA->ODR |= (1 << 5); // Set GPIO3
 8000786:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <TIM4_IRQHandler+0x4c>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a06      	ldr	r2, [pc, #24]	@ (80007a4 <TIM4_IRQHandler+0x4c>)
 800078c:	f043 0320 	orr.w	r3, r3, #32
 8000790:	6153      	str	r3, [r2, #20]
		I2C1_SendByte(0x08, ' '); // Call the lookup function
 8000792:	2120      	movs	r1, #32
 8000794:	2008      	movs	r0, #8
 8000796:	f000 fcbb 	bl	8001110 <I2C1_SendByte>
    }
    return;
 800079a:	bf00      	nop
 800079c:	bf00      	nop
}
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40000800 	.word	0x40000800
 80007a4:	40020000 	.word	0x40020000

080007a8 <main>:


int main(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0c6      	sub	sp, #280	@ 0x118
 80007ac:	af00      	add	r7, sp, #0
	 // TIMER and GPIO handle;
	 TIM_Handle_t TimBtn, TimLED1, TimLED2;
	 GPIO_Handle_t GPIOBtn, GPIOLED1, GPIOLED2;\
     I2C1_Init();
 80007ae:	f000 fc57 	bl	8001060 <I2C1_Init>
	 GPIO_InitConfig(&GPIOBtn, &GPIOLED1, &GPIOLED2); // Initialize GPIO configuration
 80007b2:	1d3a      	adds	r2, r7, #4
 80007b4:	f107 0120 	add.w	r1, r7, #32
 80007b8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fd15 	bl	80001ec <GPIO_InitConfig>
	 GPIO_IRQConfig(IRQ_NO_EXTI0, ENABLE); // Enable EXTI0 interrupt in NVIC
 80007c2:	2101      	movs	r1, #1
 80007c4:	2006      	movs	r0, #6
 80007c6:	f000 fb7b 	bl	8000ec0 <GPIO_IRQConfig>
	 GPIO_IRQPriorityConfig(IRQ_NO_EXTI0, NVIC_IRQ_PRI0); // Set EXTI0 interrupt priority
 80007ca:	2100      	movs	r1, #0
 80007cc:	2006      	movs	r0, #6
 80007ce:	f000 fbfd 	bl	8000fcc <GPIO_IRQPriorityConfig>
	 TIM_Config(&TimBtn, &TimLED1, &TimLED2); // Initialize TIM2 configuration
 80007d2:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80007d6:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80007da:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fd58 	bl	8000294 <TIM_Config>
	 morse_trie_init();
 80007e4:	f000 f85c 	bl	80008a0 <morse_trie_init>
     while (1) {
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <main+0x40>

080007ec <create_node>:
} TrieNode;

static TrieNode* root = NULL;

// 建立節點
static TrieNode* create_node(void) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
    TrieNode* node = (TrieNode*)malloc(sizeof(TrieNode));
 80007f2:	200c      	movs	r0, #12
 80007f4:	f000 fd2e 	bl	8001254 <malloc>
 80007f8:	4603      	mov	r3, r0
 80007fa:	607b      	str	r3, [r7, #4]
    node->letter = '\0';
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
    node->dot = NULL;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
    node->dash = NULL;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
    return node;
 800080e:	687b      	ldr	r3, [r7, #4]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <insert>:

// 插入字元進 Trie
static void insert(const char* code, char letter) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	70fb      	strb	r3, [r7, #3]
    TrieNode* curr = root;
 8000824:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <insert+0x84>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	60fb      	str	r3, [r7, #12]
    for (int i = 0; code[i]; ++i) {
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	e027      	b.n	8000880 <insert+0x68>
        if (code[i] == '.') {
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b2e      	cmp	r3, #46	@ 0x2e
 800083a:	d10c      	bne.n	8000856 <insert+0x3e>
            if (!curr->dot) curr->dot = create_node();
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d104      	bne.n	800084e <insert+0x36>
 8000844:	f7ff ffd2 	bl	80007ec <create_node>
 8000848:	4602      	mov	r2, r0
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	605a      	str	r2, [r3, #4]
            curr = curr->dot;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	e011      	b.n	800087a <insert+0x62>
        } else if (code[i] == '-') {
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	4413      	add	r3, r2
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b2d      	cmp	r3, #45	@ 0x2d
 8000860:	d10b      	bne.n	800087a <insert+0x62>
            if (!curr->dash) curr->dash = create_node();
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d104      	bne.n	8000874 <insert+0x5c>
 800086a:	f7ff ffbf 	bl	80007ec <create_node>
 800086e:	4602      	mov	r2, r0
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	609a      	str	r2, [r3, #8]
            curr = curr->dash;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	60fb      	str	r3, [r7, #12]
    for (int i = 0; code[i]; ++i) {
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	3301      	adds	r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1d1      	bne.n	8000830 <insert+0x18>
        }
    }
    curr->letter = letter;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	78fa      	ldrb	r2, [r7, #3]
 8000890:	701a      	strb	r2, [r3, #0]
}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000078 	.word	0x20000078

080008a0 <morse_trie_init>:

// 初始化 Trie Tree：摩斯碼對照表
void morse_trie_init(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
    root = create_node();
 80008a4:	f7ff ffa2 	bl	80007ec <create_node>
 80008a8:	4603      	mov	r3, r0
 80008aa:	4a4c      	ldr	r2, [pc, #304]	@ (80009dc <morse_trie_init+0x13c>)
 80008ac:	6013      	str	r3, [r2, #0]

    insert(".-", 'A');    insert("-...", 'B');  insert("-.-.", 'C'); insert("-..", 'D');
 80008ae:	2141      	movs	r1, #65	@ 0x41
 80008b0:	484b      	ldr	r0, [pc, #300]	@ (80009e0 <morse_trie_init+0x140>)
 80008b2:	f7ff ffb1 	bl	8000818 <insert>
 80008b6:	2142      	movs	r1, #66	@ 0x42
 80008b8:	484a      	ldr	r0, [pc, #296]	@ (80009e4 <morse_trie_init+0x144>)
 80008ba:	f7ff ffad 	bl	8000818 <insert>
 80008be:	2143      	movs	r1, #67	@ 0x43
 80008c0:	4849      	ldr	r0, [pc, #292]	@ (80009e8 <morse_trie_init+0x148>)
 80008c2:	f7ff ffa9 	bl	8000818 <insert>
 80008c6:	2144      	movs	r1, #68	@ 0x44
 80008c8:	4848      	ldr	r0, [pc, #288]	@ (80009ec <morse_trie_init+0x14c>)
 80008ca:	f7ff ffa5 	bl	8000818 <insert>
    insert(".", 'E');     insert("..-.", 'F');  insert("--.", 'G');  insert("....", 'H');
 80008ce:	2145      	movs	r1, #69	@ 0x45
 80008d0:	4847      	ldr	r0, [pc, #284]	@ (80009f0 <morse_trie_init+0x150>)
 80008d2:	f7ff ffa1 	bl	8000818 <insert>
 80008d6:	2146      	movs	r1, #70	@ 0x46
 80008d8:	4846      	ldr	r0, [pc, #280]	@ (80009f4 <morse_trie_init+0x154>)
 80008da:	f7ff ff9d 	bl	8000818 <insert>
 80008de:	2147      	movs	r1, #71	@ 0x47
 80008e0:	4845      	ldr	r0, [pc, #276]	@ (80009f8 <morse_trie_init+0x158>)
 80008e2:	f7ff ff99 	bl	8000818 <insert>
 80008e6:	2148      	movs	r1, #72	@ 0x48
 80008e8:	4844      	ldr	r0, [pc, #272]	@ (80009fc <morse_trie_init+0x15c>)
 80008ea:	f7ff ff95 	bl	8000818 <insert>
    insert("..", 'I');    insert(".---", 'J');  insert("-.-", 'K');  insert(".-..", 'L');
 80008ee:	2149      	movs	r1, #73	@ 0x49
 80008f0:	4843      	ldr	r0, [pc, #268]	@ (8000a00 <morse_trie_init+0x160>)
 80008f2:	f7ff ff91 	bl	8000818 <insert>
 80008f6:	214a      	movs	r1, #74	@ 0x4a
 80008f8:	4842      	ldr	r0, [pc, #264]	@ (8000a04 <morse_trie_init+0x164>)
 80008fa:	f7ff ff8d 	bl	8000818 <insert>
 80008fe:	214b      	movs	r1, #75	@ 0x4b
 8000900:	4841      	ldr	r0, [pc, #260]	@ (8000a08 <morse_trie_init+0x168>)
 8000902:	f7ff ff89 	bl	8000818 <insert>
 8000906:	214c      	movs	r1, #76	@ 0x4c
 8000908:	4840      	ldr	r0, [pc, #256]	@ (8000a0c <morse_trie_init+0x16c>)
 800090a:	f7ff ff85 	bl	8000818 <insert>
    insert("--", 'M');    insert("-.", 'N');    insert("---", 'O');  insert(".--.", 'P');
 800090e:	214d      	movs	r1, #77	@ 0x4d
 8000910:	483f      	ldr	r0, [pc, #252]	@ (8000a10 <morse_trie_init+0x170>)
 8000912:	f7ff ff81 	bl	8000818 <insert>
 8000916:	214e      	movs	r1, #78	@ 0x4e
 8000918:	483e      	ldr	r0, [pc, #248]	@ (8000a14 <morse_trie_init+0x174>)
 800091a:	f7ff ff7d 	bl	8000818 <insert>
 800091e:	214f      	movs	r1, #79	@ 0x4f
 8000920:	483d      	ldr	r0, [pc, #244]	@ (8000a18 <morse_trie_init+0x178>)
 8000922:	f7ff ff79 	bl	8000818 <insert>
 8000926:	2150      	movs	r1, #80	@ 0x50
 8000928:	483c      	ldr	r0, [pc, #240]	@ (8000a1c <morse_trie_init+0x17c>)
 800092a:	f7ff ff75 	bl	8000818 <insert>
    insert("--.-", 'Q');  insert(".-.", 'R');   insert("...", 'S');  insert("-", 'T');
 800092e:	2151      	movs	r1, #81	@ 0x51
 8000930:	483b      	ldr	r0, [pc, #236]	@ (8000a20 <morse_trie_init+0x180>)
 8000932:	f7ff ff71 	bl	8000818 <insert>
 8000936:	2152      	movs	r1, #82	@ 0x52
 8000938:	483a      	ldr	r0, [pc, #232]	@ (8000a24 <morse_trie_init+0x184>)
 800093a:	f7ff ff6d 	bl	8000818 <insert>
 800093e:	2153      	movs	r1, #83	@ 0x53
 8000940:	4839      	ldr	r0, [pc, #228]	@ (8000a28 <morse_trie_init+0x188>)
 8000942:	f7ff ff69 	bl	8000818 <insert>
 8000946:	2154      	movs	r1, #84	@ 0x54
 8000948:	4838      	ldr	r0, [pc, #224]	@ (8000a2c <morse_trie_init+0x18c>)
 800094a:	f7ff ff65 	bl	8000818 <insert>
    insert("..-", 'U');   insert("...-", 'V');  insert(".--", 'W');  insert("-..-", 'X');
 800094e:	2155      	movs	r1, #85	@ 0x55
 8000950:	4837      	ldr	r0, [pc, #220]	@ (8000a30 <morse_trie_init+0x190>)
 8000952:	f7ff ff61 	bl	8000818 <insert>
 8000956:	2156      	movs	r1, #86	@ 0x56
 8000958:	4836      	ldr	r0, [pc, #216]	@ (8000a34 <morse_trie_init+0x194>)
 800095a:	f7ff ff5d 	bl	8000818 <insert>
 800095e:	2157      	movs	r1, #87	@ 0x57
 8000960:	4835      	ldr	r0, [pc, #212]	@ (8000a38 <morse_trie_init+0x198>)
 8000962:	f7ff ff59 	bl	8000818 <insert>
 8000966:	2158      	movs	r1, #88	@ 0x58
 8000968:	4834      	ldr	r0, [pc, #208]	@ (8000a3c <morse_trie_init+0x19c>)
 800096a:	f7ff ff55 	bl	8000818 <insert>
    insert("-.--", 'Y');  insert("--..", 'Z');
 800096e:	2159      	movs	r1, #89	@ 0x59
 8000970:	4833      	ldr	r0, [pc, #204]	@ (8000a40 <morse_trie_init+0x1a0>)
 8000972:	f7ff ff51 	bl	8000818 <insert>
 8000976:	215a      	movs	r1, #90	@ 0x5a
 8000978:	4832      	ldr	r0, [pc, #200]	@ (8000a44 <morse_trie_init+0x1a4>)
 800097a:	f7ff ff4d 	bl	8000818 <insert>

    insert("-----", '0'); insert(".----", '1'); insert("..---", '2'); insert("...--", '3');
 800097e:	2130      	movs	r1, #48	@ 0x30
 8000980:	4831      	ldr	r0, [pc, #196]	@ (8000a48 <morse_trie_init+0x1a8>)
 8000982:	f7ff ff49 	bl	8000818 <insert>
 8000986:	2131      	movs	r1, #49	@ 0x31
 8000988:	4830      	ldr	r0, [pc, #192]	@ (8000a4c <morse_trie_init+0x1ac>)
 800098a:	f7ff ff45 	bl	8000818 <insert>
 800098e:	2132      	movs	r1, #50	@ 0x32
 8000990:	482f      	ldr	r0, [pc, #188]	@ (8000a50 <morse_trie_init+0x1b0>)
 8000992:	f7ff ff41 	bl	8000818 <insert>
 8000996:	2133      	movs	r1, #51	@ 0x33
 8000998:	482e      	ldr	r0, [pc, #184]	@ (8000a54 <morse_trie_init+0x1b4>)
 800099a:	f7ff ff3d 	bl	8000818 <insert>
    insert("....-", '4'); insert(".....", '5'); insert("-....", '6'); insert("--...", '7');
 800099e:	2134      	movs	r1, #52	@ 0x34
 80009a0:	482d      	ldr	r0, [pc, #180]	@ (8000a58 <morse_trie_init+0x1b8>)
 80009a2:	f7ff ff39 	bl	8000818 <insert>
 80009a6:	2135      	movs	r1, #53	@ 0x35
 80009a8:	482c      	ldr	r0, [pc, #176]	@ (8000a5c <morse_trie_init+0x1bc>)
 80009aa:	f7ff ff35 	bl	8000818 <insert>
 80009ae:	2136      	movs	r1, #54	@ 0x36
 80009b0:	482b      	ldr	r0, [pc, #172]	@ (8000a60 <morse_trie_init+0x1c0>)
 80009b2:	f7ff ff31 	bl	8000818 <insert>
 80009b6:	2137      	movs	r1, #55	@ 0x37
 80009b8:	482a      	ldr	r0, [pc, #168]	@ (8000a64 <morse_trie_init+0x1c4>)
 80009ba:	f7ff ff2d 	bl	8000818 <insert>
    insert("---..", '8'); insert("----.", '9');
 80009be:	2138      	movs	r1, #56	@ 0x38
 80009c0:	4829      	ldr	r0, [pc, #164]	@ (8000a68 <morse_trie_init+0x1c8>)
 80009c2:	f7ff ff29 	bl	8000818 <insert>
 80009c6:	2139      	movs	r1, #57	@ 0x39
 80009c8:	4828      	ldr	r0, [pc, #160]	@ (8000a6c <morse_trie_init+0x1cc>)
 80009ca:	f7ff ff25 	bl	8000818 <insert>

    insert("/", ' ');  // 字間空白
 80009ce:	2120      	movs	r1, #32
 80009d0:	4827      	ldr	r0, [pc, #156]	@ (8000a70 <morse_trie_init+0x1d0>)
 80009d2:	f7ff ff21 	bl	8000818 <insert>
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000078 	.word	0x20000078
 80009e0:	08001450 	.word	0x08001450
 80009e4:	08001454 	.word	0x08001454
 80009e8:	0800145c 	.word	0x0800145c
 80009ec:	08001464 	.word	0x08001464
 80009f0:	08001468 	.word	0x08001468
 80009f4:	0800146c 	.word	0x0800146c
 80009f8:	08001474 	.word	0x08001474
 80009fc:	08001478 	.word	0x08001478
 8000a00:	08001480 	.word	0x08001480
 8000a04:	08001484 	.word	0x08001484
 8000a08:	0800148c 	.word	0x0800148c
 8000a0c:	08001490 	.word	0x08001490
 8000a10:	08001498 	.word	0x08001498
 8000a14:	0800149c 	.word	0x0800149c
 8000a18:	080014a0 	.word	0x080014a0
 8000a1c:	080014a4 	.word	0x080014a4
 8000a20:	080014ac 	.word	0x080014ac
 8000a24:	080014b4 	.word	0x080014b4
 8000a28:	080014b8 	.word	0x080014b8
 8000a2c:	080014bc 	.word	0x080014bc
 8000a30:	080014c0 	.word	0x080014c0
 8000a34:	080014c4 	.word	0x080014c4
 8000a38:	080014cc 	.word	0x080014cc
 8000a3c:	080014d0 	.word	0x080014d0
 8000a40:	080014d8 	.word	0x080014d8
 8000a44:	080014e0 	.word	0x080014e0
 8000a48:	080014e8 	.word	0x080014e8
 8000a4c:	080014f0 	.word	0x080014f0
 8000a50:	080014f8 	.word	0x080014f8
 8000a54:	08001500 	.word	0x08001500
 8000a58:	08001508 	.word	0x08001508
 8000a5c:	08001510 	.word	0x08001510
 8000a60:	08001518 	.word	0x08001518
 8000a64:	08001520 	.word	0x08001520
 8000a68:	08001528 	.word	0x08001528
 8000a6c:	08001530 	.word	0x08001530
 8000a70:	08001538 	.word	0x08001538

08000a74 <morse_lookup>:

// 查詢摩斯碼對應字元
char morse_lookup(const char* morse_code) {
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
    TrieNode* curr = root;
 8000a7c:	4b23      	ldr	r3, [pc, #140]	@ (8000b0c <morse_lookup+0x98>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	60fb      	str	r3, [r7, #12]
    for (int i = 0; morse_code[i]; ++i) {
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	e02c      	b.n	8000ae2 <morse_lookup+0x6e>
        if (morse_code[i] == '.') {
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a92:	d109      	bne.n	8000aa8 <morse_lookup+0x34>
            if (!curr->dot) return '?';
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d101      	bne.n	8000aa0 <morse_lookup+0x2c>
 8000a9c:	233f      	movs	r3, #63	@ 0x3f
 8000a9e:	e02e      	b.n	8000afe <morse_lookup+0x8a>
            curr = curr->dot;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	e019      	b.n	8000adc <morse_lookup+0x68>
        } else if (morse_code[i] == '-') {
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b2d      	cmp	r3, #45	@ 0x2d
 8000ab2:	d109      	bne.n	8000ac8 <morse_lookup+0x54>
            if (!curr->dash) return '?';
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <morse_lookup+0x4c>
 8000abc:	233f      	movs	r3, #63	@ 0x3f
 8000abe:	e01e      	b.n	8000afe <morse_lookup+0x8a>
            curr = curr->dash;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	e009      	b.n	8000adc <morse_lookup+0x68>
        } else if (morse_code[i] == '/') {
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b2f      	cmp	r3, #47	@ 0x2f
 8000ad2:	d101      	bne.n	8000ad8 <morse_lookup+0x64>
            return ' ';  // 單字分隔符
 8000ad4:	2320      	movs	r3, #32
 8000ad6:	e012      	b.n	8000afe <morse_lookup+0x8a>
        } else {
            return '?';  // 不合法的符號
 8000ad8:	233f      	movs	r3, #63	@ 0x3f
 8000ada:	e010      	b.n	8000afe <morse_lookup+0x8a>
    for (int i = 0; morse_code[i]; ++i) {
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1cc      	bne.n	8000a88 <morse_lookup+0x14>
        }
    }
    return curr->letter ? curr->letter : '?';
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d002      	beq.n	8000afc <morse_lookup+0x88>
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	e000      	b.n	8000afe <morse_lookup+0x8a>
 8000afc:	233f      	movs	r3, #63	@ 0x3f
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000078 	.word	0x20000078

08000b10 <GPIO_Init>:
        else {
        }
    }
}

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]


    // Configure the mode
    if (pGPIOHandle->config.mode <= GPIO_MODE_ANALOG) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d81f      	bhi.n	8000b64 <GPIO_Init+0x54>
        temp = (pGPIOHandle->config.mode << (2 * pGPIOHandle->config.pin));
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689a      	ldr	r2, [r3, #8]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->MODER &= ~(0x03 << (2 * pGPIOHandle->config.pin)); // Clear the bits
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	2103      	movs	r1, #3
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	4619      	mov	r1, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	400a      	ands	r2, r1
 8000b50:	601a      	str	r2, [r3, #0]
        pGPIOHandle->port->MODER |= temp;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6819      	ldr	r1, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	e0e6      	b.n	8000d32 <GPIO_Init+0x222>
    }
    else {
        if (pGPIOHandle->config.mode == GPIO_MODE_IT_FT) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d117      	bne.n	8000b9c <GPIO_Init+0x8c>
            // Configure for falling edge trigger
            EXTI->FTSR |= (1 << pGPIOHandle->config.pin);
 8000b6c:	4b4e      	ldr	r3, [pc, #312]	@ (8000ca8 <GPIO_Init+0x198>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	6852      	ldr	r2, [r2, #4]
 8000b74:	2101      	movs	r1, #1
 8000b76:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4a4a      	ldr	r2, [pc, #296]	@ (8000ca8 <GPIO_Init+0x198>)
 8000b7e:	430b      	orrs	r3, r1
 8000b80:	60d3      	str	r3, [r2, #12]
            EXTI->RTSR &= ~(1 << pGPIOHandle->config.pin); // Clear the rising edge trigger
 8000b82:	4b49      	ldr	r3, [pc, #292]	@ (8000ca8 <GPIO_Init+0x198>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	6852      	ldr	r2, [r2, #4]
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b90:	43d2      	mvns	r2, r2
 8000b92:	4611      	mov	r1, r2
 8000b94:	4a44      	ldr	r2, [pc, #272]	@ (8000ca8 <GPIO_Init+0x198>)
 8000b96:	400b      	ands	r3, r1
 8000b98:	6093      	str	r3, [r2, #8]
 8000b9a:	e035      	b.n	8000c08 <GPIO_Init+0xf8>
        }
        else if (pGPIOHandle->config.mode == GPIO_MODE_IT_RT) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	2b05      	cmp	r3, #5
 8000ba2:	d117      	bne.n	8000bd4 <GPIO_Init+0xc4>
            // Configure for rising edge trigger
            EXTI->RTSR |= (1 << pGPIOHandle->config.pin);
 8000ba4:	4b40      	ldr	r3, [pc, #256]	@ (8000ca8 <GPIO_Init+0x198>)
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	6852      	ldr	r2, [r2, #4]
 8000bac:	2101      	movs	r1, #1
 8000bae:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4a3c      	ldr	r2, [pc, #240]	@ (8000ca8 <GPIO_Init+0x198>)
 8000bb6:	430b      	orrs	r3, r1
 8000bb8:	6093      	str	r3, [r2, #8]
            EXTI->FTSR &= ~(1 << pGPIOHandle->config.pin); // Clear the falling edge trigger
 8000bba:	4b3b      	ldr	r3, [pc, #236]	@ (8000ca8 <GPIO_Init+0x198>)
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	6852      	ldr	r2, [r2, #4]
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc8:	43d2      	mvns	r2, r2
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4a36      	ldr	r2, [pc, #216]	@ (8000ca8 <GPIO_Init+0x198>)
 8000bce:	400b      	ands	r3, r1
 8000bd0:	60d3      	str	r3, [r2, #12]
 8000bd2:	e019      	b.n	8000c08 <GPIO_Init+0xf8>
        }
        else if (pGPIOHandle->config.mode == GPIO_MODE_IT_RFT) {
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	2b06      	cmp	r3, #6
 8000bda:	d115      	bne.n	8000c08 <GPIO_Init+0xf8>
            // Configure for both edges trigger
            EXTI->RTSR |= (1 << pGPIOHandle->config.pin);
 8000bdc:	4b32      	ldr	r3, [pc, #200]	@ (8000ca8 <GPIO_Init+0x198>)
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	6852      	ldr	r2, [r2, #4]
 8000be4:	2101      	movs	r1, #1
 8000be6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bea:	4611      	mov	r1, r2
 8000bec:	4a2e      	ldr	r2, [pc, #184]	@ (8000ca8 <GPIO_Init+0x198>)
 8000bee:	430b      	orrs	r3, r1
 8000bf0:	6093      	str	r3, [r2, #8]
            EXTI->FTSR |= (1 << pGPIOHandle->config.pin);
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca8 <GPIO_Init+0x198>)
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	6852      	ldr	r2, [r2, #4]
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000c00:	4611      	mov	r1, r2
 8000c02:	4a29      	ldr	r2, [pc, #164]	@ (8000ca8 <GPIO_Init+0x198>)
 8000c04:	430b      	orrs	r3, r1
 8000c06:	60d3      	str	r3, [r2, #12]
        }

        //configure gpio portselection in SYSCFG_EXTICR
        uint8_t temp1 = pGPIOHandle->config.pin / 4;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	089b      	lsrs	r3, r3, #2
 8000c0e:	72fb      	strb	r3, [r7, #11]
        uint8_t temp2 = pGPIOHandle->config.pin % 4;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	f003 0303 	and.w	r3, r3, #3
 8000c1a:	72bb      	strb	r3, [r7, #10]
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->port);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a22      	ldr	r2, [pc, #136]	@ (8000cac <GPIO_Init+0x19c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d056      	beq.n	8000cd4 <GPIO_Init+0x1c4>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a21      	ldr	r2, [pc, #132]	@ (8000cb0 <GPIO_Init+0x1a0>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d039      	beq.n	8000ca4 <GPIO_Init+0x194>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a1f      	ldr	r2, [pc, #124]	@ (8000cb4 <GPIO_Init+0x1a4>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d032      	beq.n	8000ca0 <GPIO_Init+0x190>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000cb8 <GPIO_Init+0x1a8>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d02b      	beq.n	8000c9c <GPIO_Init+0x18c>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a1c      	ldr	r2, [pc, #112]	@ (8000cbc <GPIO_Init+0x1ac>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d024      	beq.n	8000c98 <GPIO_Init+0x188>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc0 <GPIO_Init+0x1b0>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d01d      	beq.n	8000c94 <GPIO_Init+0x184>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a19      	ldr	r2, [pc, #100]	@ (8000cc4 <GPIO_Init+0x1b4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d016      	beq.n	8000c90 <GPIO_Init+0x180>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a18      	ldr	r2, [pc, #96]	@ (8000cc8 <GPIO_Init+0x1b8>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d00f      	beq.n	8000c8c <GPIO_Init+0x17c>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a16      	ldr	r2, [pc, #88]	@ (8000ccc <GPIO_Init+0x1bc>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d008      	beq.n	8000c88 <GPIO_Init+0x178>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a15      	ldr	r2, [pc, #84]	@ (8000cd0 <GPIO_Init+0x1c0>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d101      	bne.n	8000c84 <GPIO_Init+0x174>
 8000c80:	2309      	movs	r3, #9
 8000c82:	e028      	b.n	8000cd6 <GPIO_Init+0x1c6>
 8000c84:	230a      	movs	r3, #10
 8000c86:	e026      	b.n	8000cd6 <GPIO_Init+0x1c6>
 8000c88:	2308      	movs	r3, #8
 8000c8a:	e024      	b.n	8000cd6 <GPIO_Init+0x1c6>
 8000c8c:	2307      	movs	r3, #7
 8000c8e:	e022      	b.n	8000cd6 <GPIO_Init+0x1c6>
 8000c90:	2306      	movs	r3, #6
 8000c92:	e020      	b.n	8000cd6 <GPIO_Init+0x1c6>
 8000c94:	2305      	movs	r3, #5
 8000c96:	e01e      	b.n	8000cd6 <GPIO_Init+0x1c6>
 8000c98:	2304      	movs	r3, #4
 8000c9a:	e01c      	b.n	8000cd6 <GPIO_Init+0x1c6>
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	e01a      	b.n	8000cd6 <GPIO_Init+0x1c6>
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	e018      	b.n	8000cd6 <GPIO_Init+0x1c6>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e016      	b.n	8000cd6 <GPIO_Init+0x1c6>
 8000ca8:	40013c00 	.word	0x40013c00
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020400 	.word	0x40020400
 8000cb4:	40020800 	.word	0x40020800
 8000cb8:	40020c00 	.word	0x40020c00
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40021400 	.word	0x40021400
 8000cc4:	40021800 	.word	0x40021800
 8000cc8:	40021c00 	.word	0x40021c00
 8000ccc:	40022000 	.word	0x40022000
 8000cd0:	40022400 	.word	0x40022400
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	727b      	strb	r3, [r7, #9]
        SYSCFG_PCLK_EN(); // Enable SYSCFG clock
 8000cd8:	4b76      	ldr	r3, [pc, #472]	@ (8000eb4 <GPIO_Init+0x3a4>)
 8000cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cdc:	4a75      	ldr	r2, [pc, #468]	@ (8000eb4 <GPIO_Init+0x3a4>)
 8000cde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce2:	6453      	str	r3, [r2, #68]	@ 0x44
        SYSCFG->EXTICR[temp1] &= ~(0x0F << (temp2 * 4)); // Clear the bits
 8000ce4:	4a74      	ldr	r2, [pc, #464]	@ (8000eb8 <GPIO_Init+0x3a8>)
 8000ce6:	7afb      	ldrb	r3, [r7, #11]
 8000ce8:	3302      	adds	r3, #2
 8000cea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cee:	7abb      	ldrb	r3, [r7, #10]
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	496e      	ldr	r1, [pc, #440]	@ (8000eb8 <GPIO_Init+0x3a8>)
 8000cfe:	7afb      	ldrb	r3, [r7, #11]
 8000d00:	4002      	ands	r2, r0
 8000d02:	3302      	adds	r3, #2
 8000d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4); // Set the bits
 8000d08:	7a7a      	ldrb	r2, [r7, #9]
 8000d0a:	7abb      	ldrb	r3, [r7, #10]
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	fa02 f103 	lsl.w	r1, r2, r3
 8000d12:	4a69      	ldr	r2, [pc, #420]	@ (8000eb8 <GPIO_Init+0x3a8>)
 8000d14:	7afb      	ldrb	r3, [r7, #11]
 8000d16:	3302      	adds	r3, #2
 8000d18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        // Enable the interrupt
        EXTI->IMR |= (1 << pGPIOHandle->config.pin); // Unmask the interrupt
 8000d1c:	4b67      	ldr	r3, [pc, #412]	@ (8000ebc <GPIO_Init+0x3ac>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	6852      	ldr	r2, [r2, #4]
 8000d24:	2101      	movs	r1, #1
 8000d26:	fa01 f202 	lsl.w	r2, r1, r2
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4a63      	ldr	r2, [pc, #396]	@ (8000ebc <GPIO_Init+0x3ac>)
 8000d2e:	430b      	orrs	r3, r1
 8000d30:	6013      	str	r3, [r2, #0]
    }
    temp = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]

    // Configure the output type
    if (pGPIOHandle->config.otype <= GPIO_OTYPE_OD) {
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d81c      	bhi.n	8000d78 <GPIO_Init+0x268>
        temp = (pGPIOHandle->config.otype << pGPIOHandle->config.pin);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->OTYPER &= ~(0x01 << pGPIOHandle->config.pin); // Clear the bit
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2101      	movs	r1, #1
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	4619      	mov	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	400a      	ands	r2, r1
 8000d66:	605a      	str	r2, [r3, #4]
        pGPIOHandle->port->OTYPER |= temp; // Set the bit
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6859      	ldr	r1, [r3, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	430a      	orrs	r2, r1
 8000d76:	605a      	str	r2, [r3, #4]
    }
    temp = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]

    // Configure the speed
    if (pGPIOHandle->config.ospeed <= 3) {
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	d81e      	bhi.n	8000dc2 <GPIO_Init+0x2b2>
        temp = (pGPIOHandle->config.ospeed << (2 * pGPIOHandle->config.pin));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	691a      	ldr	r2, [r3, #16]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->config.pin)); // Clear the bits
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	2103      	movs	r1, #3
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	4619      	mov	r1, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	400a      	ands	r2, r1
 8000db0:	609a      	str	r2, [r3, #8]
        pGPIOHandle->port->OSPEEDR |= temp; // Set the bits
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6899      	ldr	r1, [r3, #8]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	609a      	str	r2, [r3, #8]
    }
    temp = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]

    // Configure the pull-up/pull-down
    if (pGPIOHandle->config.pupd <= 3) {
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d81e      	bhi.n	8000e0c <GPIO_Init+0x2fc>
        temp = (pGPIOHandle->config.pupd << (2 * pGPIOHandle->config.pin));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	695a      	ldr	r2, [r3, #20]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->PUPDR &= ~(0x03 << (2 * pGPIOHandle->config.pin)); // Clear the bits
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2103      	movs	r1, #3
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	4619      	mov	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	400a      	ands	r2, r1
 8000dfa:	60da      	str	r2, [r3, #12]
        pGPIOHandle->port->PUPDR |= temp; // Set the bits
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68d9      	ldr	r1, [r3, #12]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	60da      	str	r2, [r3, #12]
    }
    temp = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]

    // Configure the alternate function
    if (pGPIOHandle->config.mode == GPIO_MODE_AF) {
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d144      	bne.n	8000ea2 <GPIO_Init+0x392>
        if (pGPIOHandle->config.pin < 8) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b07      	cmp	r3, #7
 8000e1e:	d81f      	bhi.n	8000e60 <GPIO_Init+0x350>
            temp = (pGPIOHandle->config.af << (4 * pGPIOHandle->config.pin));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	699a      	ldr	r2, [r3, #24]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	60fb      	str	r3, [r7, #12]
            pGPIOHandle->port->AFR[0] &= ~(0x0F << (4 * pGPIOHandle->config.pin)); // Clear the bits
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6a1a      	ldr	r2, [r3, #32]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	210f      	movs	r1, #15
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	4619      	mov	r1, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	400a      	ands	r2, r1
 8000e4c:	621a      	str	r2, [r3, #32]
            pGPIOHandle->port->AFR[0] |= temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6a19      	ldr	r1, [r3, #32]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68fa      	ldr	r2, [r7, #12]
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	621a      	str	r2, [r3, #32]
 8000e5e:	e020      	b.n	8000ea2 <GPIO_Init+0x392>
        }
        else {
            temp = (pGPIOHandle->config.af << (4 * (pGPIOHandle->config.pin - 8)));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	699a      	ldr	r2, [r3, #24]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	3b08      	subs	r3, #8
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	60fb      	str	r3, [r7, #12]
            pGPIOHandle->port->AFR[1] &= ~(0x0F << (4 * (pGPIOHandle->config.pin - 8))); // Clear the bits
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	3b08      	subs	r3, #8
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	210f      	movs	r1, #15
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	4619      	mov	r1, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	400a      	ands	r2, r1
 8000e90:	625a      	str	r2, [r3, #36]	@ 0x24
            pGPIOHandle->port->AFR[1] |= temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }
    temp = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40013800 	.word	0x40013800
 8000ebc:	40013c00 	.word	0x40013c00

08000ec0 <GPIO_IRQConfig>:

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
    pGPIOx->ODR ^= (1 << PinNumber);
}

void GPIO_IRQConfig (uint8_t IRQNumber, uint8_t EnorDi) {
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	460a      	mov	r2, r1
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	71bb      	strb	r3, [r7, #6]
    if (EnorDi == ENABLE) {
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d133      	bne.n	8000f3e <GPIO_IRQConfig+0x7e>
        if (IRQNumber <= 31) {
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b1f      	cmp	r3, #31
 8000eda:	d80a      	bhi.n	8000ef2 <GPIO_IRQConfig+0x32>
            // Program ISER0 register
            *NVIC_ISER0 |= (1 << IRQNumber);
 8000edc:	4b35      	ldr	r3, [pc, #212]	@ (8000fb4 <GPIO_IRQConfig+0xf4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	79fa      	ldrb	r2, [r7, #7]
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4a32      	ldr	r2, [pc, #200]	@ (8000fb4 <GPIO_IRQConfig+0xf4>)
 8000eec:	430b      	orrs	r3, r1
 8000eee:	6013      	str	r3, [r2, #0]
        else if (IRQNumber >= 64 && IRQNumber < 96) {
            // Program ICER2 register
            *NVIC_ICER2 |= (1 << (IRQNumber % 64));
        }
    }
}
 8000ef0:	e059      	b.n	8000fa6 <GPIO_IRQConfig+0xe6>
        else if (IRQNumber > 31 && IRQNumber < 64) {
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b1f      	cmp	r3, #31
 8000ef6:	d90f      	bls.n	8000f18 <GPIO_IRQConfig+0x58>
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	2b3f      	cmp	r3, #63	@ 0x3f
 8000efc:	d80c      	bhi.n	8000f18 <GPIO_IRQConfig+0x58>
            *NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000efe:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb8 <GPIO_IRQConfig+0xf8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	79fa      	ldrb	r2, [r7, #7]
 8000f04:	f002 021f 	and.w	r2, r2, #31
 8000f08:	2101      	movs	r1, #1
 8000f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4a29      	ldr	r2, [pc, #164]	@ (8000fb8 <GPIO_IRQConfig+0xf8>)
 8000f12:	430b      	orrs	r3, r1
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	e046      	b.n	8000fa6 <GPIO_IRQConfig+0xe6>
        else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f1c:	d943      	bls.n	8000fa6 <GPIO_IRQConfig+0xe6>
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b5f      	cmp	r3, #95	@ 0x5f
 8000f22:	d840      	bhi.n	8000fa6 <GPIO_IRQConfig+0xe6>
            *NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000f24:	4b25      	ldr	r3, [pc, #148]	@ (8000fbc <GPIO_IRQConfig+0xfc>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	79fa      	ldrb	r2, [r7, #7]
 8000f2a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000f2e:	2101      	movs	r1, #1
 8000f30:	fa01 f202 	lsl.w	r2, r1, r2
 8000f34:	4611      	mov	r1, r2
 8000f36:	4a21      	ldr	r2, [pc, #132]	@ (8000fbc <GPIO_IRQConfig+0xfc>)
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	e033      	b.n	8000fa6 <GPIO_IRQConfig+0xe6>
        if (IRQNumber <= 31) {
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b1f      	cmp	r3, #31
 8000f42:	d80a      	bhi.n	8000f5a <GPIO_IRQConfig+0x9a>
            *NVIC_ICER0 |= (1 << IRQNumber);
 8000f44:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc0 <GPIO_IRQConfig+0x100>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	79fa      	ldrb	r2, [r7, #7]
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	4611      	mov	r1, r2
 8000f52:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc0 <GPIO_IRQConfig+0x100>)
 8000f54:	430b      	orrs	r3, r1
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	e025      	b.n	8000fa6 <GPIO_IRQConfig+0xe6>
        else if (IRQNumber > 31 && IRQNumber < 64) {
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b1f      	cmp	r3, #31
 8000f5e:	d90f      	bls.n	8000f80 <GPIO_IRQConfig+0xc0>
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f64:	d80c      	bhi.n	8000f80 <GPIO_IRQConfig+0xc0>
            *NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000f66:	4b17      	ldr	r3, [pc, #92]	@ (8000fc4 <GPIO_IRQConfig+0x104>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	f002 021f 	and.w	r2, r2, #31
 8000f70:	2101      	movs	r1, #1
 8000f72:	fa01 f202 	lsl.w	r2, r1, r2
 8000f76:	4611      	mov	r1, r2
 8000f78:	4a12      	ldr	r2, [pc, #72]	@ (8000fc4 <GPIO_IRQConfig+0x104>)
 8000f7a:	430b      	orrs	r3, r1
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e012      	b.n	8000fa6 <GPIO_IRQConfig+0xe6>
        else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f84:	d90f      	bls.n	8000fa6 <GPIO_IRQConfig+0xe6>
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b5f      	cmp	r3, #95	@ 0x5f
 8000f8a:	d80c      	bhi.n	8000fa6 <GPIO_IRQConfig+0xe6>
            *NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <GPIO_IRQConfig+0x108>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	79fa      	ldrb	r2, [r7, #7]
 8000f92:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000f96:	2101      	movs	r1, #1
 8000f98:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <GPIO_IRQConfig+0x108>)
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	e7ff      	b.n	8000fa6 <GPIO_IRQConfig+0xe6>
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000e104 	.word	0xe000e104
 8000fbc:	e000e108 	.word	0xe000e108
 8000fc0:	e000e180 	.word	0xe000e180
 8000fc4:	e000e184 	.word	0xe000e184
 8000fc8:	e000e188 	.word	0xe000e188

08000fcc <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
    // Calculate the priority group
    uint8_t iprx = IRQNumber / 4;
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	73fb      	strb	r3, [r7, #15]
    uint8_t iprx_section = IRQNumber % 4;
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	73bb      	strb	r3, [r7, #14]
    uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	3304      	adds	r3, #4
 8000fee:	737b      	strb	r3, [r7, #13]
    *(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000ff8:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000ffc:	6819      	ldr	r1, [r3, #0]
 8000ffe:	7b7b      	ldrb	r3, [r7, #13]
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	409a      	lsls	r2, r3
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 800100c:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8001010:	430a      	orrs	r2, r1
 8001012:	601a      	str	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber) {
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
    // Clear the EXTI line pending register
    if (EXTI->PR & (1 << PinNumber)) {
 800102a:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <GPIO_IRQHandling+0x3c>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	79fa      	ldrb	r2, [r7, #7]
 8001030:	2101      	movs	r1, #1
 8001032:	fa01 f202 	lsl.w	r2, r1, r2
 8001036:	4013      	ands	r3, r2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d009      	beq.n	8001050 <GPIO_IRQHandling+0x30>
        EXTI->PR |= (1 << PinNumber);
 800103c:	4b07      	ldr	r3, [pc, #28]	@ (800105c <GPIO_IRQHandling+0x3c>)
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	79fa      	ldrb	r2, [r7, #7]
 8001042:	2101      	movs	r1, #1
 8001044:	fa01 f202 	lsl.w	r2, r1, r2
 8001048:	4611      	mov	r1, r2
 800104a:	4a04      	ldr	r2, [pc, #16]	@ (800105c <GPIO_IRQHandling+0x3c>)
 800104c:	430b      	orrs	r3, r1
 800104e:	6153      	str	r3, [r2, #20]
    }
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40013c00 	.word	0x40013c00

08001060 <I2C1_Init>:
#include "stm32f429i_i2c_driver.h"
#include "stm32f429i_gpio_driver.h"
#include "stm32f429i.h"  // 若有共用宏定義，也可包含此檔

void I2C1_Init(void) {
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
    // 開啟時鐘
    GPIOB_PCLK_EN();
 8001064:	4b27      	ldr	r3, [pc, #156]	@ (8001104 <I2C1_Init+0xa4>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001068:	4a26      	ldr	r2, [pc, #152]	@ (8001104 <I2C1_Init+0xa4>)
 800106a:	f043 0302 	orr.w	r3, r3, #2
 800106e:	6313      	str	r3, [r2, #48]	@ 0x30
    I2C1_PCLK_EN();
 8001070:	4b24      	ldr	r3, [pc, #144]	@ (8001104 <I2C1_Init+0xa4>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001074:	4a23      	ldr	r2, [pc, #140]	@ (8001104 <I2C1_Init+0xa4>)
 8001076:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800107a:	6413      	str	r3, [r2, #64]	@ 0x40

    // 設定 PB6 = I2C1_SCL, PB7 = I2C1_SDA
    GPIOB->MODER &= ~(0xF << (6 * 2));  // 清 PB6, PB7
 800107c:	4b22      	ldr	r3, [pc, #136]	@ (8001108 <I2C1_Init+0xa8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a21      	ldr	r2, [pc, #132]	@ (8001108 <I2C1_Init+0xa8>)
 8001082:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001086:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (0xA << (6 * 2));   // AF mode
 8001088:	4b1f      	ldr	r3, [pc, #124]	@ (8001108 <I2C1_Init+0xa8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a1e      	ldr	r2, [pc, #120]	@ (8001108 <I2C1_Init+0xa8>)
 800108e:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8001092:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER |= (0x3 << 6);        // Open-drain
 8001094:	4b1c      	ldr	r3, [pc, #112]	@ (8001108 <I2C1_Init+0xa8>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	4a1b      	ldr	r2, [pc, #108]	@ (8001108 <I2C1_Init+0xa8>)
 800109a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800109e:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (0xF << (6 * 2)); // High speed
 80010a0:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <I2C1_Init+0xa8>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	4a18      	ldr	r2, [pc, #96]	@ (8001108 <I2C1_Init+0xa8>)
 80010a6:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 80010aa:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(0xF << (6 * 2));  // No pull-up/down
 80010ac:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <I2C1_Init+0xa8>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	4a15      	ldr	r2, [pc, #84]	@ (8001108 <I2C1_Init+0xa8>)
 80010b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80010b6:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[0] |= (4 << (6 * 4));    // AF4 for I2C1_SCL
 80010b8:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <I2C1_Init+0xa8>)
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <I2C1_Init+0xa8>)
 80010be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010c2:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (4 << (7 * 4));    // AF4 for I2C1_SDA
 80010c4:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <I2C1_Init+0xa8>)
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001108 <I2C1_Init+0xa8>)
 80010ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80010ce:	6213      	str	r3, [r2, #32]

    // 關閉 I2C 模組
    I2C1->CR[0] &= ~(1 << 0);
 80010d0:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <I2C1_Init+0xac>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0d      	ldr	r2, [pc, #52]	@ (800110c <I2C1_Init+0xac>)
 80010d6:	f023 0301 	bic.w	r3, r3, #1
 80010da:	6013      	str	r3, [r2, #0]

    // 設定外部時鐘來源 = 16MHz（或依實際）
    I2C1->CR[0] = 16;
 80010dc:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <I2C1_Init+0xac>)
 80010de:	2210      	movs	r2, #16
 80010e0:	601a      	str	r2, [r3, #0]

    // 設定 clock control register（100kHz, standard mode）
    I2C1->CCR = 80;  // CCR = Fpclk / (2 * I2C_speed) = 16MHz / (2 * 100kHz)
 80010e2:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <I2C1_Init+0xac>)
 80010e4:	2250      	movs	r2, #80	@ 0x50
 80010e6:	61da      	str	r2, [r3, #28]

    // 設定 TRISE = Fpclk + 1 = 17
    I2C1->TRISE = 17;
 80010e8:	4b08      	ldr	r3, [pc, #32]	@ (800110c <I2C1_Init+0xac>)
 80010ea:	2211      	movs	r2, #17
 80010ec:	621a      	str	r2, [r3, #32]

    // 開啟模組
    I2C1->CR[0] |= (1 << 0);
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <I2C1_Init+0xac>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a06      	ldr	r2, [pc, #24]	@ (800110c <I2C1_Init+0xac>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6013      	str	r3, [r2, #0]
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	40023800 	.word	0x40023800
 8001108:	40020400 	.word	0x40020400
 800110c:	40005400 	.word	0x40005400

08001110 <I2C1_SendByte>:

void I2C1_SendByte(uint8_t slave_address, uint8_t data) {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	460a      	mov	r2, r1
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]
    // 產生 START
    I2C1->CR[0] |= (1 << 8);
 8001120:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <I2C1_SendByte+0x80>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a1a      	ldr	r2, [pc, #104]	@ (8001190 <I2C1_SendByte+0x80>)
 8001126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800112a:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR[0] & (1 << 0)));  // SB set
 800112c:	bf00      	nop
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <I2C1_SendByte+0x80>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f9      	beq.n	800112e <I2C1_SendByte+0x1e>

    // 發送 slave address + write (0)
    I2C1->DR = slave_address << 1;
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	4a14      	ldr	r2, [pc, #80]	@ (8001190 <I2C1_SendByte+0x80>)
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR[0] & (1 << 1)));  // ADDR set
 8001142:	bf00      	nop
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <I2C1_SendByte+0x80>)
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f9      	beq.n	8001144 <I2C1_SendByte+0x34>
    (void)I2C1->SR[1];  // 清 ADDR
 8001150:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <I2C1_SendByte+0x80>)
 8001152:	699b      	ldr	r3, [r3, #24]

    // 傳送 data
    I2C1->DR = data;
 8001154:	4a0e      	ldr	r2, [pc, #56]	@ (8001190 <I2C1_SendByte+0x80>)
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR[0] & (1 << 7)));  // TXE set
 800115a:	bf00      	nop
 800115c:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <I2C1_SendByte+0x80>)
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0f9      	beq.n	800115c <I2C1_SendByte+0x4c>
    while (!(I2C1->SR[0] & (1 << 2)));  // BTF set
 8001168:	bf00      	nop
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <I2C1_SendByte+0x80>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f9      	beq.n	800116a <I2C1_SendByte+0x5a>

    // 發送 STOP
    I2C1->CR[0] |= (1 << 9);
 8001176:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <I2C1_SendByte+0x80>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <I2C1_SendByte+0x80>)
 800117c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001180:	6013      	str	r3, [r2, #0]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40005400 	.word	0x40005400

08001194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800119c:	4a14      	ldr	r2, [pc, #80]	@ (80011f0 <_sbrk+0x5c>)
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <_sbrk+0x60>)
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a8:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b0:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <_sbrk+0x64>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	@ (80011fc <_sbrk+0x68>)
 80011b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b6:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d207      	bcs.n	80011d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c4:	f000 f90c 	bl	80013e0 <__errno>
 80011c8:	4603      	mov	r3, r0
 80011ca:	220c      	movs	r2, #12
 80011cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011d2:	e009      	b.n	80011e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d4:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011da:	4b07      	ldr	r3, [pc, #28]	@ (80011f8 <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a05      	ldr	r2, [pc, #20]	@ (80011f8 <_sbrk+0x64>)
 80011e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20030000 	.word	0x20030000
 80011f4:	00000400 	.word	0x00000400
 80011f8:	2000007c 	.word	0x2000007c
 80011fc:	200001c8 	.word	0x200001c8

08001200 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001200:	480d      	ldr	r0, [pc, #52]	@ (8001238 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001202:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001204:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001208:	480c      	ldr	r0, [pc, #48]	@ (800123c <LoopForever+0x6>)
  ldr r1, =_edata
 800120a:	490d      	ldr	r1, [pc, #52]	@ (8001240 <LoopForever+0xa>)
  ldr r2, =_sidata
 800120c:	4a0d      	ldr	r2, [pc, #52]	@ (8001244 <LoopForever+0xe>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001220:	4c0a      	ldr	r4, [pc, #40]	@ (800124c <LoopForever+0x16>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800122e:	f000 f8dd 	bl	80013ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001232:	f7ff fab9 	bl	80007a8 <main>

08001236 <LoopForever>:

LoopForever:
  b LoopForever
 8001236:	e7fe      	b.n	8001236 <LoopForever>
  ldr   r0, =_estack
 8001238:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001244:	08001544 	.word	0x08001544
  ldr r2, =_sbss
 8001248:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 800124c:	200001c8 	.word	0x200001c8

08001250 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC_IRQHandler>
	...

08001254 <malloc>:
 8001254:	4b02      	ldr	r3, [pc, #8]	@ (8001260 <malloc+0xc>)
 8001256:	4601      	mov	r1, r0
 8001258:	6818      	ldr	r0, [r3, #0]
 800125a:	f000 b825 	b.w	80012a8 <_malloc_r>
 800125e:	bf00      	nop
 8001260:	20000000 	.word	0x20000000

08001264 <sbrk_aligned>:
 8001264:	b570      	push	{r4, r5, r6, lr}
 8001266:	4e0f      	ldr	r6, [pc, #60]	@ (80012a4 <sbrk_aligned+0x40>)
 8001268:	460c      	mov	r4, r1
 800126a:	6831      	ldr	r1, [r6, #0]
 800126c:	4605      	mov	r5, r0
 800126e:	b911      	cbnz	r1, 8001276 <sbrk_aligned+0x12>
 8001270:	f000 f8a6 	bl	80013c0 <_sbrk_r>
 8001274:	6030      	str	r0, [r6, #0]
 8001276:	4621      	mov	r1, r4
 8001278:	4628      	mov	r0, r5
 800127a:	f000 f8a1 	bl	80013c0 <_sbrk_r>
 800127e:	1c43      	adds	r3, r0, #1
 8001280:	d103      	bne.n	800128a <sbrk_aligned+0x26>
 8001282:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001286:	4620      	mov	r0, r4
 8001288:	bd70      	pop	{r4, r5, r6, pc}
 800128a:	1cc4      	adds	r4, r0, #3
 800128c:	f024 0403 	bic.w	r4, r4, #3
 8001290:	42a0      	cmp	r0, r4
 8001292:	d0f8      	beq.n	8001286 <sbrk_aligned+0x22>
 8001294:	1a21      	subs	r1, r4, r0
 8001296:	4628      	mov	r0, r5
 8001298:	f000 f892 	bl	80013c0 <_sbrk_r>
 800129c:	3001      	adds	r0, #1
 800129e:	d1f2      	bne.n	8001286 <sbrk_aligned+0x22>
 80012a0:	e7ef      	b.n	8001282 <sbrk_aligned+0x1e>
 80012a2:	bf00      	nop
 80012a4:	20000080 	.word	0x20000080

080012a8 <_malloc_r>:
 80012a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012ac:	1ccd      	adds	r5, r1, #3
 80012ae:	f025 0503 	bic.w	r5, r5, #3
 80012b2:	3508      	adds	r5, #8
 80012b4:	2d0c      	cmp	r5, #12
 80012b6:	bf38      	it	cc
 80012b8:	250c      	movcc	r5, #12
 80012ba:	2d00      	cmp	r5, #0
 80012bc:	4606      	mov	r6, r0
 80012be:	db01      	blt.n	80012c4 <_malloc_r+0x1c>
 80012c0:	42a9      	cmp	r1, r5
 80012c2:	d904      	bls.n	80012ce <_malloc_r+0x26>
 80012c4:	230c      	movs	r3, #12
 80012c6:	6033      	str	r3, [r6, #0]
 80012c8:	2000      	movs	r0, #0
 80012ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80013a4 <_malloc_r+0xfc>
 80012d2:	f000 f869 	bl	80013a8 <__malloc_lock>
 80012d6:	f8d8 3000 	ldr.w	r3, [r8]
 80012da:	461c      	mov	r4, r3
 80012dc:	bb44      	cbnz	r4, 8001330 <_malloc_r+0x88>
 80012de:	4629      	mov	r1, r5
 80012e0:	4630      	mov	r0, r6
 80012e2:	f7ff ffbf 	bl	8001264 <sbrk_aligned>
 80012e6:	1c43      	adds	r3, r0, #1
 80012e8:	4604      	mov	r4, r0
 80012ea:	d158      	bne.n	800139e <_malloc_r+0xf6>
 80012ec:	f8d8 4000 	ldr.w	r4, [r8]
 80012f0:	4627      	mov	r7, r4
 80012f2:	2f00      	cmp	r7, #0
 80012f4:	d143      	bne.n	800137e <_malloc_r+0xd6>
 80012f6:	2c00      	cmp	r4, #0
 80012f8:	d04b      	beq.n	8001392 <_malloc_r+0xea>
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	4639      	mov	r1, r7
 80012fe:	4630      	mov	r0, r6
 8001300:	eb04 0903 	add.w	r9, r4, r3
 8001304:	f000 f85c 	bl	80013c0 <_sbrk_r>
 8001308:	4581      	cmp	r9, r0
 800130a:	d142      	bne.n	8001392 <_malloc_r+0xea>
 800130c:	6821      	ldr	r1, [r4, #0]
 800130e:	1a6d      	subs	r5, r5, r1
 8001310:	4629      	mov	r1, r5
 8001312:	4630      	mov	r0, r6
 8001314:	f7ff ffa6 	bl	8001264 <sbrk_aligned>
 8001318:	3001      	adds	r0, #1
 800131a:	d03a      	beq.n	8001392 <_malloc_r+0xea>
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	442b      	add	r3, r5
 8001320:	6023      	str	r3, [r4, #0]
 8001322:	f8d8 3000 	ldr.w	r3, [r8]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	bb62      	cbnz	r2, 8001384 <_malloc_r+0xdc>
 800132a:	f8c8 7000 	str.w	r7, [r8]
 800132e:	e00f      	b.n	8001350 <_malloc_r+0xa8>
 8001330:	6822      	ldr	r2, [r4, #0]
 8001332:	1b52      	subs	r2, r2, r5
 8001334:	d420      	bmi.n	8001378 <_malloc_r+0xd0>
 8001336:	2a0b      	cmp	r2, #11
 8001338:	d917      	bls.n	800136a <_malloc_r+0xc2>
 800133a:	1961      	adds	r1, r4, r5
 800133c:	42a3      	cmp	r3, r4
 800133e:	6025      	str	r5, [r4, #0]
 8001340:	bf18      	it	ne
 8001342:	6059      	strne	r1, [r3, #4]
 8001344:	6863      	ldr	r3, [r4, #4]
 8001346:	bf08      	it	eq
 8001348:	f8c8 1000 	streq.w	r1, [r8]
 800134c:	5162      	str	r2, [r4, r5]
 800134e:	604b      	str	r3, [r1, #4]
 8001350:	4630      	mov	r0, r6
 8001352:	f000 f82f 	bl	80013b4 <__malloc_unlock>
 8001356:	f104 000b 	add.w	r0, r4, #11
 800135a:	1d23      	adds	r3, r4, #4
 800135c:	f020 0007 	bic.w	r0, r0, #7
 8001360:	1ac2      	subs	r2, r0, r3
 8001362:	bf1c      	itt	ne
 8001364:	1a1b      	subne	r3, r3, r0
 8001366:	50a3      	strne	r3, [r4, r2]
 8001368:	e7af      	b.n	80012ca <_malloc_r+0x22>
 800136a:	6862      	ldr	r2, [r4, #4]
 800136c:	42a3      	cmp	r3, r4
 800136e:	bf0c      	ite	eq
 8001370:	f8c8 2000 	streq.w	r2, [r8]
 8001374:	605a      	strne	r2, [r3, #4]
 8001376:	e7eb      	b.n	8001350 <_malloc_r+0xa8>
 8001378:	4623      	mov	r3, r4
 800137a:	6864      	ldr	r4, [r4, #4]
 800137c:	e7ae      	b.n	80012dc <_malloc_r+0x34>
 800137e:	463c      	mov	r4, r7
 8001380:	687f      	ldr	r7, [r7, #4]
 8001382:	e7b6      	b.n	80012f2 <_malloc_r+0x4a>
 8001384:	461a      	mov	r2, r3
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	42a3      	cmp	r3, r4
 800138a:	d1fb      	bne.n	8001384 <_malloc_r+0xdc>
 800138c:	2300      	movs	r3, #0
 800138e:	6053      	str	r3, [r2, #4]
 8001390:	e7de      	b.n	8001350 <_malloc_r+0xa8>
 8001392:	230c      	movs	r3, #12
 8001394:	6033      	str	r3, [r6, #0]
 8001396:	4630      	mov	r0, r6
 8001398:	f000 f80c 	bl	80013b4 <__malloc_unlock>
 800139c:	e794      	b.n	80012c8 <_malloc_r+0x20>
 800139e:	6005      	str	r5, [r0, #0]
 80013a0:	e7d6      	b.n	8001350 <_malloc_r+0xa8>
 80013a2:	bf00      	nop
 80013a4:	20000084 	.word	0x20000084

080013a8 <__malloc_lock>:
 80013a8:	4801      	ldr	r0, [pc, #4]	@ (80013b0 <__malloc_lock+0x8>)
 80013aa:	f000 b843 	b.w	8001434 <__retarget_lock_acquire_recursive>
 80013ae:	bf00      	nop
 80013b0:	200001c4 	.word	0x200001c4

080013b4 <__malloc_unlock>:
 80013b4:	4801      	ldr	r0, [pc, #4]	@ (80013bc <__malloc_unlock+0x8>)
 80013b6:	f000 b83e 	b.w	8001436 <__retarget_lock_release_recursive>
 80013ba:	bf00      	nop
 80013bc:	200001c4 	.word	0x200001c4

080013c0 <_sbrk_r>:
 80013c0:	b538      	push	{r3, r4, r5, lr}
 80013c2:	4d06      	ldr	r5, [pc, #24]	@ (80013dc <_sbrk_r+0x1c>)
 80013c4:	2300      	movs	r3, #0
 80013c6:	4604      	mov	r4, r0
 80013c8:	4608      	mov	r0, r1
 80013ca:	602b      	str	r3, [r5, #0]
 80013cc:	f7ff fee2 	bl	8001194 <_sbrk>
 80013d0:	1c43      	adds	r3, r0, #1
 80013d2:	d102      	bne.n	80013da <_sbrk_r+0x1a>
 80013d4:	682b      	ldr	r3, [r5, #0]
 80013d6:	b103      	cbz	r3, 80013da <_sbrk_r+0x1a>
 80013d8:	6023      	str	r3, [r4, #0]
 80013da:	bd38      	pop	{r3, r4, r5, pc}
 80013dc:	200001c0 	.word	0x200001c0

080013e0 <__errno>:
 80013e0:	4b01      	ldr	r3, [pc, #4]	@ (80013e8 <__errno+0x8>)
 80013e2:	6818      	ldr	r0, [r3, #0]
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000000 	.word	0x20000000

080013ec <__libc_init_array>:
 80013ec:	b570      	push	{r4, r5, r6, lr}
 80013ee:	4d0d      	ldr	r5, [pc, #52]	@ (8001424 <__libc_init_array+0x38>)
 80013f0:	4c0d      	ldr	r4, [pc, #52]	@ (8001428 <__libc_init_array+0x3c>)
 80013f2:	1b64      	subs	r4, r4, r5
 80013f4:	10a4      	asrs	r4, r4, #2
 80013f6:	2600      	movs	r6, #0
 80013f8:	42a6      	cmp	r6, r4
 80013fa:	d109      	bne.n	8001410 <__libc_init_array+0x24>
 80013fc:	4d0b      	ldr	r5, [pc, #44]	@ (800142c <__libc_init_array+0x40>)
 80013fe:	4c0c      	ldr	r4, [pc, #48]	@ (8001430 <__libc_init_array+0x44>)
 8001400:	f000 f81a 	bl	8001438 <_init>
 8001404:	1b64      	subs	r4, r4, r5
 8001406:	10a4      	asrs	r4, r4, #2
 8001408:	2600      	movs	r6, #0
 800140a:	42a6      	cmp	r6, r4
 800140c:	d105      	bne.n	800141a <__libc_init_array+0x2e>
 800140e:	bd70      	pop	{r4, r5, r6, pc}
 8001410:	f855 3b04 	ldr.w	r3, [r5], #4
 8001414:	4798      	blx	r3
 8001416:	3601      	adds	r6, #1
 8001418:	e7ee      	b.n	80013f8 <__libc_init_array+0xc>
 800141a:	f855 3b04 	ldr.w	r3, [r5], #4
 800141e:	4798      	blx	r3
 8001420:	3601      	adds	r6, #1
 8001422:	e7f2      	b.n	800140a <__libc_init_array+0x1e>
 8001424:	0800153c 	.word	0x0800153c
 8001428:	0800153c 	.word	0x0800153c
 800142c:	0800153c 	.word	0x0800153c
 8001430:	08001540 	.word	0x08001540

08001434 <__retarget_lock_acquire_recursive>:
 8001434:	4770      	bx	lr

08001436 <__retarget_lock_release_recursive>:
 8001436:	4770      	bx	lr

08001438 <_init>:
 8001438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800143a:	bf00      	nop
 800143c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800143e:	bc08      	pop	{r3}
 8001440:	469e      	mov	lr, r3
 8001442:	4770      	bx	lr

08001444 <_fini>:
 8001444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001446:	bf00      	nop
 8001448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800144a:	bc08      	pop	{r3}
 800144c:	469e      	mov	lr, r3
 800144e:	4770      	bx	lr
