
morse-code-converter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008d0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a7c  08000a84  00001a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a7c  08000a7c  00001a84  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000a7c  08000a7c  00001a84  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000a7c  08000a84  00001a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a7c  08000a7c  00001a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a80  08000a80  00001a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001a84  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001a84  2**0
                  CONTENTS, READONLY
 13 .debug_info   000008e6  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000254  00000000  00000000  0000239a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  000025f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000073  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001673  00000000  00000000  0000270b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000dd7  00000000  00000000  00003d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005331  00000000  00000000  00004b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00009e86  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001c8  00000000  00000000  00009ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000a64 	.word	0x08000a64

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000a64 	.word	0x08000a64

080001ec <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b088      	sub	sp, #32
 80001f0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;

	GpioBtn.port = GPIOA;
 80001f2:	4b0e      	ldr	r3, [pc, #56]	@ (800022c <main+0x40>)
 80001f4:	607b      	str	r3, [r7, #4]
	GpioBtn.config.pin = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60bb      	str	r3, [r7, #8]
	GpioBtn.config.mode = GPIO_MODE_AF; // Falling edge trigger
 80001fa:	2302      	movs	r3, #2
 80001fc:	60fb      	str	r3, [r7, #12]
	GpioBtn.config.otype = GPIO_OTYPE_PP; // Push-pull
 80001fe:	2300      	movs	r3, #0
 8000200:	613b      	str	r3, [r7, #16]
	GpioBtn.config.ospeed = GPIO_OSPEED_LOW; // Fast speed
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]
	GpioBtn.config.pupd = GPIO_PUPD_UP; // Pull-up
 8000206:	2301      	movs	r3, #1
 8000208:	61bb      	str	r3, [r7, #24]
	GpioBtn.config.af = 1; // Alternate function 1 (AF1)
 800020a:	2301      	movs	r3, #1
 800020c:	61fb      	str	r3, [r7, #28]
	GPIO_Init(&GpioBtn);
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	4618      	mov	r0, r3
 8000212:	f000 f92d 	bl	8000470 <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI4, 15); // Set priority to lowest
 8000216:	210f      	movs	r1, #15
 8000218:	200a      	movs	r0, #10
 800021a:	f000 fb8b 	bl	8000934 <GPIO_IRQPriorityConfig>
	GPIO_IRQConfig(IRQ_NO_EXTI4, ENABLE); // Enable EXTI line 4 interrupt
 800021e:	2101      	movs	r1, #1
 8000220:	200a      	movs	r0, #10
 8000222:	f000 fb01 	bl	8000828 <GPIO_IRQConfig>

	while(1);
 8000226:	bf00      	nop
 8000228:	e7fd      	b.n	8000226 <main+0x3a>
 800022a:	bf00      	nop
 800022c:	40020000 	.word	0x40020000

08000230 <EXTI4_IRQHandler>:
	return 0;
}

void EXTI4_IRQHandler(void) {
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(4); // Handle the interrupt for EXTI line 4
 8000234:	2004      	movs	r0, #4
 8000236:	f000 fba7 	bl	8000988 <GPIO_IRQHandling>
	return;
 800023a:	bf00      	nop
}
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <GPIO_PeriClockControl>:
 */

#include "stm32f429i.h"
#include "stm32f429i_gpio_driver.h"

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	460b      	mov	r3, r1
 800024a:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE) {
 800024c:	78fb      	ldrb	r3, [r7, #3]
 800024e:	2b01      	cmp	r3, #1
 8000250:	d178      	bne.n	8000344 <GPIO_PeriClockControl+0x104>
        if (pGPIOx == GPIOA) {
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a7a      	ldr	r2, [pc, #488]	@ (8000440 <GPIO_PeriClockControl+0x200>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x28>
            GPIOA_PCLK_EN();
 800025a:	4b7a      	ldr	r3, [pc, #488]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800025e:	4a79      	ldr	r2, [pc, #484]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 8000260:	f043 0301 	orr.w	r3, r3, #1
 8000264:	6313      	str	r3, [r2, #48]	@ 0x30
            GPIOK_PCLK_DI();
        }
        else {
        }
    }
}
 8000266:	e0e5      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOB) {
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a77      	ldr	r2, [pc, #476]	@ (8000448 <GPIO_PeriClockControl+0x208>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x3e>
            GPIOB_PCLK_EN();
 8000270:	4b74      	ldr	r3, [pc, #464]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000274:	4a73      	ldr	r2, [pc, #460]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 8000276:	f043 0302 	orr.w	r3, r3, #2
 800027a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800027c:	e0da      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOC) {
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a72      	ldr	r2, [pc, #456]	@ (800044c <GPIO_PeriClockControl+0x20c>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0x54>
            GPIOC_PCLK_EN();
 8000286:	4b6f      	ldr	r3, [pc, #444]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028a:	4a6e      	ldr	r2, [pc, #440]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 800028c:	f043 0304 	orr.w	r3, r3, #4
 8000290:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000292:	e0cf      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOD) {
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a6e      	ldr	r2, [pc, #440]	@ (8000450 <GPIO_PeriClockControl+0x210>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0x6a>
            GPIOD_PCLK_EN();
 800029c:	4b69      	ldr	r3, [pc, #420]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a0:	4a68      	ldr	r2, [pc, #416]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002a8:	e0c4      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOE) {
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a69      	ldr	r2, [pc, #420]	@ (8000454 <GPIO_PeriClockControl+0x214>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d106      	bne.n	80002c0 <GPIO_PeriClockControl+0x80>
            GPIOE_PCLK_EN();
 80002b2:	4b64      	ldr	r3, [pc, #400]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b6:	4a63      	ldr	r2, [pc, #396]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 80002b8:	f043 0310 	orr.w	r3, r3, #16
 80002bc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002be:	e0b9      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOF) {
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a65      	ldr	r2, [pc, #404]	@ (8000458 <GPIO_PeriClockControl+0x218>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <GPIO_PeriClockControl+0x96>
            GPIOF_PCLK_EN();
 80002c8:	4b5e      	ldr	r3, [pc, #376]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002cc:	4a5d      	ldr	r2, [pc, #372]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 80002ce:	f043 0320 	orr.w	r3, r3, #32
 80002d2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002d4:	e0ae      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOG) {
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a60      	ldr	r2, [pc, #384]	@ (800045c <GPIO_PeriClockControl+0x21c>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0xac>
            GPIOG_PCLK_EN();
 80002de:	4b59      	ldr	r3, [pc, #356]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e2:	4a58      	ldr	r2, [pc, #352]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 80002e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002e8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ea:	e0a3      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOH) {
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a5c      	ldr	r2, [pc, #368]	@ (8000460 <GPIO_PeriClockControl+0x220>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0xc2>
            GPIOH_PCLK_EN();
 80002f4:	4b53      	ldr	r3, [pc, #332]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f8:	4a52      	ldr	r2, [pc, #328]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 80002fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000300:	e098      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOI) {
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a57      	ldr	r2, [pc, #348]	@ (8000464 <GPIO_PeriClockControl+0x224>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0xd8>
            GPIOI_PCLK_EN();
 800030a:	4b4e      	ldr	r3, [pc, #312]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030e:	4a4d      	ldr	r2, [pc, #308]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 8000310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000314:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000316:	e08d      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOJ) {
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a53      	ldr	r2, [pc, #332]	@ (8000468 <GPIO_PeriClockControl+0x228>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0xee>
            GPIOJ_PCLK_EN();
 8000320:	4b48      	ldr	r3, [pc, #288]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000324:	4a47      	ldr	r2, [pc, #284]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 8000326:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800032a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800032c:	e082      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOK) {
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a4e      	ldr	r2, [pc, #312]	@ (800046c <GPIO_PeriClockControl+0x22c>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d17e      	bne.n	8000434 <GPIO_PeriClockControl+0x1f4>
            GPIOK_PCLK_EN();
 8000336:	4b43      	ldr	r3, [pc, #268]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033a:	4a42      	ldr	r2, [pc, #264]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 800033c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000340:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000342:	e077      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        if (pGPIOx == GPIOA) {
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a3e      	ldr	r2, [pc, #248]	@ (8000440 <GPIO_PeriClockControl+0x200>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x11a>
            GPIOA_PCLK_DI();
 800034c:	4b3d      	ldr	r3, [pc, #244]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000350:	4a3c      	ldr	r2, [pc, #240]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 8000352:	f023 0301 	bic.w	r3, r3, #1
 8000356:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000358:	e06c      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOB) {
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a3a      	ldr	r2, [pc, #232]	@ (8000448 <GPIO_PeriClockControl+0x208>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x130>
            GPIOB_PCLK_DI();
 8000362:	4b38      	ldr	r3, [pc, #224]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000366:	4a37      	ldr	r2, [pc, #220]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 8000368:	f023 0302 	bic.w	r3, r3, #2
 800036c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800036e:	e061      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOC) {
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a36      	ldr	r2, [pc, #216]	@ (800044c <GPIO_PeriClockControl+0x20c>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d106      	bne.n	8000386 <GPIO_PeriClockControl+0x146>
            GPIOC_PCLK_DI();
 8000378:	4b32      	ldr	r3, [pc, #200]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037c:	4a31      	ldr	r2, [pc, #196]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 800037e:	f023 0304 	bic.w	r3, r3, #4
 8000382:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000384:	e056      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOD) {
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a31      	ldr	r2, [pc, #196]	@ (8000450 <GPIO_PeriClockControl+0x210>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d106      	bne.n	800039c <GPIO_PeriClockControl+0x15c>
            GPIOD_PCLK_DI();
 800038e:	4b2d      	ldr	r3, [pc, #180]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000392:	4a2c      	ldr	r2, [pc, #176]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 8000394:	f023 0308 	bic.w	r3, r3, #8
 8000398:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800039a:	e04b      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOE) {
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a2d      	ldr	r2, [pc, #180]	@ (8000454 <GPIO_PeriClockControl+0x214>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <GPIO_PeriClockControl+0x172>
            GPIOE_PCLK_DI();
 80003a4:	4b27      	ldr	r3, [pc, #156]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a8:	4a26      	ldr	r2, [pc, #152]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 80003aa:	f023 0310 	bic.w	r3, r3, #16
 80003ae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b0:	e040      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOF) {
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a28      	ldr	r2, [pc, #160]	@ (8000458 <GPIO_PeriClockControl+0x218>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d106      	bne.n	80003c8 <GPIO_PeriClockControl+0x188>
            GPIOF_PCLK_DI();
 80003ba:	4b22      	ldr	r3, [pc, #136]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003be:	4a21      	ldr	r2, [pc, #132]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 80003c0:	f023 0320 	bic.w	r3, r3, #32
 80003c4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c6:	e035      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOG) {
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a24      	ldr	r2, [pc, #144]	@ (800045c <GPIO_PeriClockControl+0x21c>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d106      	bne.n	80003de <GPIO_PeriClockControl+0x19e>
            GPIOG_PCLK_DI();
 80003d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 80003d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80003da:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003dc:	e02a      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOH) {
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000460 <GPIO_PeriClockControl+0x220>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d106      	bne.n	80003f4 <GPIO_PeriClockControl+0x1b4>
            GPIOH_PCLK_DI();
 80003e6:	4b17      	ldr	r3, [pc, #92]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 80003e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ea:	4a16      	ldr	r2, [pc, #88]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 80003ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80003f0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f2:	e01f      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOI) {
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000464 <GPIO_PeriClockControl+0x224>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d106      	bne.n	800040a <GPIO_PeriClockControl+0x1ca>
            GPIOI_PCLK_DI();
 80003fc:	4b11      	ldr	r3, [pc, #68]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 80003fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000400:	4a10      	ldr	r2, [pc, #64]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 8000402:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000406:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000408:	e014      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOJ) {
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a16      	ldr	r2, [pc, #88]	@ (8000468 <GPIO_PeriClockControl+0x228>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d106      	bne.n	8000420 <GPIO_PeriClockControl+0x1e0>
            GPIOJ_PCLK_DI();
 8000412:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 8000414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000416:	4a0b      	ldr	r2, [pc, #44]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 8000418:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800041c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800041e:	e009      	b.n	8000434 <GPIO_PeriClockControl+0x1f4>
        else if (pGPIOx == GPIOK) {
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a12      	ldr	r2, [pc, #72]	@ (800046c <GPIO_PeriClockControl+0x22c>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d105      	bne.n	8000434 <GPIO_PeriClockControl+0x1f4>
            GPIOK_PCLK_DI();
 8000428:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800042c:	4a05      	ldr	r2, [pc, #20]	@ (8000444 <GPIO_PeriClockControl+0x204>)
 800042e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000432:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	40020000 	.word	0x40020000
 8000444:	40023800 	.word	0x40023800
 8000448:	40020400 	.word	0x40020400
 800044c:	40020800 	.word	0x40020800
 8000450:	40020c00 	.word	0x40020c00
 8000454:	40021000 	.word	0x40021000
 8000458:	40021400 	.word	0x40021400
 800045c:	40021800 	.word	0x40021800
 8000460:	40021c00 	.word	0x40021c00
 8000464:	40022000 	.word	0x40022000
 8000468:	40022400 	.word	0x40022400
 800046c:	40022800 	.word	0x40022800

08000470 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]

    // Enable the peripheral clock for the GPIO port
    GPIO_PeriClockControl(pGPIOHandle->port, ENABLE);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2101      	movs	r1, #1
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff fedc 	bl	8000240 <GPIO_PeriClockControl>

    // Configure the mode
    if (pGPIOHandle->config.mode <= GPIO_MODE_ANALOG) {
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	689b      	ldr	r3, [r3, #8]
 800048c:	2b03      	cmp	r3, #3
 800048e:	d81f      	bhi.n	80004d0 <GPIO_Init+0x60>
        temp = (pGPIOHandle->config.mode << (2 * pGPIOHandle->config.pin));
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	689a      	ldr	r2, [r3, #8]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	fa02 f303 	lsl.w	r3, r2, r3
 800049e:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->MODER &= ~(0x03 << (2 * pGPIOHandle->config.pin)); // Clear the bits
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	2103      	movs	r1, #3
 80004ae:	fa01 f303 	lsl.w	r3, r1, r3
 80004b2:	43db      	mvns	r3, r3
 80004b4:	4619      	mov	r1, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	400a      	ands	r2, r1
 80004bc:	601a      	str	r2, [r3, #0]
        pGPIOHandle->port->MODER |= temp;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	6819      	ldr	r1, [r3, #0]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	68fa      	ldr	r2, [r7, #12]
 80004ca:	430a      	orrs	r2, r1
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	e0e6      	b.n	800069e <GPIO_Init+0x22e>
    }
    else {
        if (pGPIOHandle->config.mode == GPIO_MODE_IT_FT) {
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	2b04      	cmp	r3, #4
 80004d6:	d117      	bne.n	8000508 <GPIO_Init+0x98>
            // Configure for falling edge trigger
            EXTI->FTSR |= (1 << pGPIOHandle->config.pin);
 80004d8:	4b4e      	ldr	r3, [pc, #312]	@ (8000614 <GPIO_Init+0x1a4>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	6852      	ldr	r2, [r2, #4]
 80004e0:	2101      	movs	r1, #1
 80004e2:	fa01 f202 	lsl.w	r2, r1, r2
 80004e6:	4611      	mov	r1, r2
 80004e8:	4a4a      	ldr	r2, [pc, #296]	@ (8000614 <GPIO_Init+0x1a4>)
 80004ea:	430b      	orrs	r3, r1
 80004ec:	60d3      	str	r3, [r2, #12]
            EXTI->RTSR &= ~(1 << pGPIOHandle->config.pin); // Clear the rising edge trigger
 80004ee:	4b49      	ldr	r3, [pc, #292]	@ (8000614 <GPIO_Init+0x1a4>)
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	6852      	ldr	r2, [r2, #4]
 80004f6:	2101      	movs	r1, #1
 80004f8:	fa01 f202 	lsl.w	r2, r1, r2
 80004fc:	43d2      	mvns	r2, r2
 80004fe:	4611      	mov	r1, r2
 8000500:	4a44      	ldr	r2, [pc, #272]	@ (8000614 <GPIO_Init+0x1a4>)
 8000502:	400b      	ands	r3, r1
 8000504:	6093      	str	r3, [r2, #8]
 8000506:	e035      	b.n	8000574 <GPIO_Init+0x104>
        }
        else if (pGPIOHandle->config.mode == GPIO_MODE_IT_RT) {
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	2b05      	cmp	r3, #5
 800050e:	d117      	bne.n	8000540 <GPIO_Init+0xd0>
            // Configure for rising edge trigger
            EXTI->RTSR |= (1 << pGPIOHandle->config.pin);
 8000510:	4b40      	ldr	r3, [pc, #256]	@ (8000614 <GPIO_Init+0x1a4>)
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	6852      	ldr	r2, [r2, #4]
 8000518:	2101      	movs	r1, #1
 800051a:	fa01 f202 	lsl.w	r2, r1, r2
 800051e:	4611      	mov	r1, r2
 8000520:	4a3c      	ldr	r2, [pc, #240]	@ (8000614 <GPIO_Init+0x1a4>)
 8000522:	430b      	orrs	r3, r1
 8000524:	6093      	str	r3, [r2, #8]
            EXTI->FTSR &= ~(1 << pGPIOHandle->config.pin); // Clear the falling edge trigger
 8000526:	4b3b      	ldr	r3, [pc, #236]	@ (8000614 <GPIO_Init+0x1a4>)
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	6852      	ldr	r2, [r2, #4]
 800052e:	2101      	movs	r1, #1
 8000530:	fa01 f202 	lsl.w	r2, r1, r2
 8000534:	43d2      	mvns	r2, r2
 8000536:	4611      	mov	r1, r2
 8000538:	4a36      	ldr	r2, [pc, #216]	@ (8000614 <GPIO_Init+0x1a4>)
 800053a:	400b      	ands	r3, r1
 800053c:	60d3      	str	r3, [r2, #12]
 800053e:	e019      	b.n	8000574 <GPIO_Init+0x104>
        }
        else if (pGPIOHandle->config.mode == GPIO_MODE_IT_RFT) {
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	2b06      	cmp	r3, #6
 8000546:	d115      	bne.n	8000574 <GPIO_Init+0x104>
            // Configure for both edges trigger
            EXTI->RTSR |= (1 << pGPIOHandle->config.pin);
 8000548:	4b32      	ldr	r3, [pc, #200]	@ (8000614 <GPIO_Init+0x1a4>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	6852      	ldr	r2, [r2, #4]
 8000550:	2101      	movs	r1, #1
 8000552:	fa01 f202 	lsl.w	r2, r1, r2
 8000556:	4611      	mov	r1, r2
 8000558:	4a2e      	ldr	r2, [pc, #184]	@ (8000614 <GPIO_Init+0x1a4>)
 800055a:	430b      	orrs	r3, r1
 800055c:	6093      	str	r3, [r2, #8]
            EXTI->FTSR |= (1 << pGPIOHandle->config.pin);
 800055e:	4b2d      	ldr	r3, [pc, #180]	@ (8000614 <GPIO_Init+0x1a4>)
 8000560:	68db      	ldr	r3, [r3, #12]
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	6852      	ldr	r2, [r2, #4]
 8000566:	2101      	movs	r1, #1
 8000568:	fa01 f202 	lsl.w	r2, r1, r2
 800056c:	4611      	mov	r1, r2
 800056e:	4a29      	ldr	r2, [pc, #164]	@ (8000614 <GPIO_Init+0x1a4>)
 8000570:	430b      	orrs	r3, r1
 8000572:	60d3      	str	r3, [r2, #12]
        }

        //configure gpio portselection in SYSCFG_EXTICR
        uint8_t temp1 = pGPIOHandle->config.pin / 4;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	089b      	lsrs	r3, r3, #2
 800057a:	72fb      	strb	r3, [r7, #11]
        uint8_t temp2 = pGPIOHandle->config.pin % 4;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	f003 0303 	and.w	r3, r3, #3
 8000586:	72bb      	strb	r3, [r7, #10]
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->port);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a22      	ldr	r2, [pc, #136]	@ (8000618 <GPIO_Init+0x1a8>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d056      	beq.n	8000640 <GPIO_Init+0x1d0>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a21      	ldr	r2, [pc, #132]	@ (800061c <GPIO_Init+0x1ac>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d039      	beq.n	8000610 <GPIO_Init+0x1a0>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1f      	ldr	r2, [pc, #124]	@ (8000620 <GPIO_Init+0x1b0>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d032      	beq.n	800060c <GPIO_Init+0x19c>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000624 <GPIO_Init+0x1b4>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d02b      	beq.n	8000608 <GPIO_Init+0x198>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000628 <GPIO_Init+0x1b8>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d024      	beq.n	8000604 <GPIO_Init+0x194>
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a1b      	ldr	r2, [pc, #108]	@ (800062c <GPIO_Init+0x1bc>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d01d      	beq.n	8000600 <GPIO_Init+0x190>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a19      	ldr	r2, [pc, #100]	@ (8000630 <GPIO_Init+0x1c0>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d016      	beq.n	80005fc <GPIO_Init+0x18c>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a18      	ldr	r2, [pc, #96]	@ (8000634 <GPIO_Init+0x1c4>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d00f      	beq.n	80005f8 <GPIO_Init+0x188>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a16      	ldr	r2, [pc, #88]	@ (8000638 <GPIO_Init+0x1c8>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d008      	beq.n	80005f4 <GPIO_Init+0x184>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a15      	ldr	r2, [pc, #84]	@ (800063c <GPIO_Init+0x1cc>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d101      	bne.n	80005f0 <GPIO_Init+0x180>
 80005ec:	2309      	movs	r3, #9
 80005ee:	e028      	b.n	8000642 <GPIO_Init+0x1d2>
 80005f0:	230a      	movs	r3, #10
 80005f2:	e026      	b.n	8000642 <GPIO_Init+0x1d2>
 80005f4:	2308      	movs	r3, #8
 80005f6:	e024      	b.n	8000642 <GPIO_Init+0x1d2>
 80005f8:	2307      	movs	r3, #7
 80005fa:	e022      	b.n	8000642 <GPIO_Init+0x1d2>
 80005fc:	2306      	movs	r3, #6
 80005fe:	e020      	b.n	8000642 <GPIO_Init+0x1d2>
 8000600:	2305      	movs	r3, #5
 8000602:	e01e      	b.n	8000642 <GPIO_Init+0x1d2>
 8000604:	2304      	movs	r3, #4
 8000606:	e01c      	b.n	8000642 <GPIO_Init+0x1d2>
 8000608:	2303      	movs	r3, #3
 800060a:	e01a      	b.n	8000642 <GPIO_Init+0x1d2>
 800060c:	2302      	movs	r3, #2
 800060e:	e018      	b.n	8000642 <GPIO_Init+0x1d2>
 8000610:	2301      	movs	r3, #1
 8000612:	e016      	b.n	8000642 <GPIO_Init+0x1d2>
 8000614:	40013c00 	.word	0x40013c00
 8000618:	40020000 	.word	0x40020000
 800061c:	40020400 	.word	0x40020400
 8000620:	40020800 	.word	0x40020800
 8000624:	40020c00 	.word	0x40020c00
 8000628:	40021000 	.word	0x40021000
 800062c:	40021400 	.word	0x40021400
 8000630:	40021800 	.word	0x40021800
 8000634:	40021c00 	.word	0x40021c00
 8000638:	40022000 	.word	0x40022000
 800063c:	40022400 	.word	0x40022400
 8000640:	2300      	movs	r3, #0
 8000642:	727b      	strb	r3, [r7, #9]
        SYSCFG_PCLK_EN(); // Enable SYSCFG clock
 8000644:	4b75      	ldr	r3, [pc, #468]	@ (800081c <GPIO_Init+0x3ac>)
 8000646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000648:	4a74      	ldr	r2, [pc, #464]	@ (800081c <GPIO_Init+0x3ac>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800064e:	6453      	str	r3, [r2, #68]	@ 0x44
        SYSCFG->EXTICR[temp1] &= ~(0x0F << (temp2 * 4)); // Clear the bits
 8000650:	4a73      	ldr	r2, [pc, #460]	@ (8000820 <GPIO_Init+0x3b0>)
 8000652:	7afb      	ldrb	r3, [r7, #11]
 8000654:	3302      	adds	r3, #2
 8000656:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800065a:	7abb      	ldrb	r3, [r7, #10]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	210f      	movs	r1, #15
 8000660:	fa01 f303 	lsl.w	r3, r1, r3
 8000664:	43db      	mvns	r3, r3
 8000666:	4618      	mov	r0, r3
 8000668:	496d      	ldr	r1, [pc, #436]	@ (8000820 <GPIO_Init+0x3b0>)
 800066a:	7afb      	ldrb	r3, [r7, #11]
 800066c:	4002      	ands	r2, r0
 800066e:	3302      	adds	r3, #2
 8000670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4); // Set the bits
 8000674:	7a7a      	ldrb	r2, [r7, #9]
 8000676:	7abb      	ldrb	r3, [r7, #10]
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	fa02 f103 	lsl.w	r1, r2, r3
 800067e:	4a68      	ldr	r2, [pc, #416]	@ (8000820 <GPIO_Init+0x3b0>)
 8000680:	7afb      	ldrb	r3, [r7, #11]
 8000682:	3302      	adds	r3, #2
 8000684:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        // Enable the interrupt
        EXTI->IMR |= (1 << pGPIOHandle->config.pin); // Unmask the interrupt
 8000688:	4b66      	ldr	r3, [pc, #408]	@ (8000824 <GPIO_Init+0x3b4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	6852      	ldr	r2, [r2, #4]
 8000690:	2101      	movs	r1, #1
 8000692:	fa01 f202 	lsl.w	r2, r1, r2
 8000696:	4611      	mov	r1, r2
 8000698:	4a62      	ldr	r2, [pc, #392]	@ (8000824 <GPIO_Init+0x3b4>)
 800069a:	430b      	orrs	r3, r1
 800069c:	6013      	str	r3, [r2, #0]
    }
    temp = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]

    // Configure the output type
    if (pGPIOHandle->config.otype <= GPIO_OTYPE_OD) {
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d81c      	bhi.n	80006e4 <GPIO_Init+0x274>
        temp = (pGPIOHandle->config.otype << pGPIOHandle->config.pin);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	68da      	ldr	r2, [r3, #12]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->OTYPER &= ~(0x01 << pGPIOHandle->config.pin); // Clear the bit
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	2101      	movs	r1, #1
 80006c4:	fa01 f303 	lsl.w	r3, r1, r3
 80006c8:	43db      	mvns	r3, r3
 80006ca:	4619      	mov	r1, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	400a      	ands	r2, r1
 80006d2:	605a      	str	r2, [r3, #4]
        pGPIOHandle->port->OTYPER |= temp; // Set the bit
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	6859      	ldr	r1, [r3, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	430a      	orrs	r2, r1
 80006e2:	605a      	str	r2, [r3, #4]
    }
    temp = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]

    // Configure the speed
    if (pGPIOHandle->config.ospeed <= 3) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	691b      	ldr	r3, [r3, #16]
 80006ec:	2b03      	cmp	r3, #3
 80006ee:	d81e      	bhi.n	800072e <GPIO_Init+0x2be>
        temp = (pGPIOHandle->config.ospeed << (2 * pGPIOHandle->config.pin));
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	691a      	ldr	r2, [r3, #16]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->config.pin)); // Clear the bits
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	689a      	ldr	r2, [r3, #8]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	2103      	movs	r1, #3
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	43db      	mvns	r3, r3
 8000714:	4619      	mov	r1, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	400a      	ands	r2, r1
 800071c:	609a      	str	r2, [r3, #8]
        pGPIOHandle->port->OSPEEDR |= temp; // Set the bits
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	6899      	ldr	r1, [r3, #8]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	430a      	orrs	r2, r1
 800072c:	609a      	str	r2, [r3, #8]
    }
    temp = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]

    // Configure the pull-up/pull-down
    if (pGPIOHandle->config.pupd <= 3) {
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	2b03      	cmp	r3, #3
 8000738:	d81e      	bhi.n	8000778 <GPIO_Init+0x308>
        temp = (pGPIOHandle->config.pupd << (2 * pGPIOHandle->config.pin));
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	695a      	ldr	r2, [r3, #20]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	fa02 f303 	lsl.w	r3, r2, r3
 8000748:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->PUPDR &= ~(0x03 << (2 * pGPIOHandle->config.pin)); // Clear the bits
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	68da      	ldr	r2, [r3, #12]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	2103      	movs	r1, #3
 8000758:	fa01 f303 	lsl.w	r3, r1, r3
 800075c:	43db      	mvns	r3, r3
 800075e:	4619      	mov	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	400a      	ands	r2, r1
 8000766:	60da      	str	r2, [r3, #12]
        pGPIOHandle->port->PUPDR |= temp; // Set the bits
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	68d9      	ldr	r1, [r3, #12]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	430a      	orrs	r2, r1
 8000776:	60da      	str	r2, [r3, #12]
    }
    temp = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]

    // Configure the alternate function
    if (pGPIOHandle->config.mode == GPIO_MODE_AF) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	2b02      	cmp	r3, #2
 8000782:	d144      	bne.n	800080e <GPIO_Init+0x39e>
        if (pGPIOHandle->config.pin < 8) {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	2b07      	cmp	r3, #7
 800078a:	d81f      	bhi.n	80007cc <GPIO_Init+0x35c>
            temp = (pGPIOHandle->config.af << (4 * pGPIOHandle->config.pin));
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	699a      	ldr	r2, [r3, #24]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	60fb      	str	r3, [r7, #12]
            pGPIOHandle->port->AFR[0] &= ~(0x0F << (4 * pGPIOHandle->config.pin)); // Clear the bits
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	6a1a      	ldr	r2, [r3, #32]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	210f      	movs	r1, #15
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	43db      	mvns	r3, r3
 80007b0:	4619      	mov	r1, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	400a      	ands	r2, r1
 80007b8:	621a      	str	r2, [r3, #32]
            pGPIOHandle->port->AFR[0] |= temp;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	6a19      	ldr	r1, [r3, #32]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	430a      	orrs	r2, r1
 80007c8:	621a      	str	r2, [r3, #32]
 80007ca:	e020      	b.n	800080e <GPIO_Init+0x39e>
        }
        else {
            temp = (pGPIOHandle->config.af << (4 * (pGPIOHandle->config.pin - 8)));
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	699a      	ldr	r2, [r3, #24]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	3b08      	subs	r3, #8
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	fa02 f303 	lsl.w	r3, r2, r3
 80007dc:	60fb      	str	r3, [r7, #12]
            pGPIOHandle->port->AFR[1] &= ~(0x0F << (4 * (pGPIOHandle->config.pin - 8))); // Clear the bits
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	3b08      	subs	r3, #8
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	210f      	movs	r1, #15
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43db      	mvns	r3, r3
 80007f4:	4619      	mov	r1, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	400a      	ands	r2, r1
 80007fc:	625a      	str	r2, [r3, #36]	@ 0x24
            pGPIOHandle->port->AFR[1] |= temp;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	430a      	orrs	r2, r1
 800080c:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }
    temp = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800
 8000820:	40013800 	.word	0x40013800
 8000824:	40013c00 	.word	0x40013c00

08000828 <GPIO_IRQConfig>:

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
    pGPIOx->ODR ^= (1 << PinNumber);
}

void GPIO_IRQConfig (uint8_t IRQNumber, uint8_t EnorDi) {
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	460a      	mov	r2, r1
 8000832:	71fb      	strb	r3, [r7, #7]
 8000834:	4613      	mov	r3, r2
 8000836:	71bb      	strb	r3, [r7, #6]
    if (EnorDi == ENABLE) {
 8000838:	79bb      	ldrb	r3, [r7, #6]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d133      	bne.n	80008a6 <GPIO_IRQConfig+0x7e>
        if (IRQNumber <= 31) {
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2b1f      	cmp	r3, #31
 8000842:	d80a      	bhi.n	800085a <GPIO_IRQConfig+0x32>
            // Program ISER0 register
            *NVIC_ISER0 |= (1 << IRQNumber);
 8000844:	4b35      	ldr	r3, [pc, #212]	@ (800091c <GPIO_IRQConfig+0xf4>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	79fa      	ldrb	r2, [r7, #7]
 800084a:	2101      	movs	r1, #1
 800084c:	fa01 f202 	lsl.w	r2, r1, r2
 8000850:	4611      	mov	r1, r2
 8000852:	4a32      	ldr	r2, [pc, #200]	@ (800091c <GPIO_IRQConfig+0xf4>)
 8000854:	430b      	orrs	r3, r1
 8000856:	6013      	str	r3, [r2, #0]
        else if (IRQNumber >= 64 && IRQNumber < 96) {
            // Program ICER2 register
            *NVIC_ICER2 |= (1 << (IRQNumber % 64));
        }
    }
}
 8000858:	e059      	b.n	800090e <GPIO_IRQConfig+0xe6>
        else if (IRQNumber > 31 && IRQNumber < 64) {
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b1f      	cmp	r3, #31
 800085e:	d90f      	bls.n	8000880 <GPIO_IRQConfig+0x58>
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	2b3f      	cmp	r3, #63	@ 0x3f
 8000864:	d80c      	bhi.n	8000880 <GPIO_IRQConfig+0x58>
            *NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000866:	4b2e      	ldr	r3, [pc, #184]	@ (8000920 <GPIO_IRQConfig+0xf8>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	79fa      	ldrb	r2, [r7, #7]
 800086c:	f002 021f 	and.w	r2, r2, #31
 8000870:	2101      	movs	r1, #1
 8000872:	fa01 f202 	lsl.w	r2, r1, r2
 8000876:	4611      	mov	r1, r2
 8000878:	4a29      	ldr	r2, [pc, #164]	@ (8000920 <GPIO_IRQConfig+0xf8>)
 800087a:	430b      	orrs	r3, r1
 800087c:	6013      	str	r3, [r2, #0]
 800087e:	e046      	b.n	800090e <GPIO_IRQConfig+0xe6>
        else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b3f      	cmp	r3, #63	@ 0x3f
 8000884:	d943      	bls.n	800090e <GPIO_IRQConfig+0xe6>
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b5f      	cmp	r3, #95	@ 0x5f
 800088a:	d840      	bhi.n	800090e <GPIO_IRQConfig+0xe6>
            *NVIC_ISER2 |= (1 << (IRQNumber % 64));
 800088c:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <GPIO_IRQConfig+0xfc>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	79fa      	ldrb	r2, [r7, #7]
 8000892:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000896:	2101      	movs	r1, #1
 8000898:	fa01 f202 	lsl.w	r2, r1, r2
 800089c:	4611      	mov	r1, r2
 800089e:	4a21      	ldr	r2, [pc, #132]	@ (8000924 <GPIO_IRQConfig+0xfc>)
 80008a0:	430b      	orrs	r3, r1
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	e033      	b.n	800090e <GPIO_IRQConfig+0xe6>
        if (IRQNumber <= 31) {
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b1f      	cmp	r3, #31
 80008aa:	d80a      	bhi.n	80008c2 <GPIO_IRQConfig+0x9a>
            *NVIC_ICER0 |= (1 << IRQNumber);
 80008ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000928 <GPIO_IRQConfig+0x100>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	79fa      	ldrb	r2, [r7, #7]
 80008b2:	2101      	movs	r1, #1
 80008b4:	fa01 f202 	lsl.w	r2, r1, r2
 80008b8:	4611      	mov	r1, r2
 80008ba:	4a1b      	ldr	r2, [pc, #108]	@ (8000928 <GPIO_IRQConfig+0x100>)
 80008bc:	430b      	orrs	r3, r1
 80008be:	6013      	str	r3, [r2, #0]
}
 80008c0:	e025      	b.n	800090e <GPIO_IRQConfig+0xe6>
        else if (IRQNumber > 31 && IRQNumber < 64) {
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b1f      	cmp	r3, #31
 80008c6:	d90f      	bls.n	80008e8 <GPIO_IRQConfig+0xc0>
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80008cc:	d80c      	bhi.n	80008e8 <GPIO_IRQConfig+0xc0>
            *NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80008ce:	4b17      	ldr	r3, [pc, #92]	@ (800092c <GPIO_IRQConfig+0x104>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	79fa      	ldrb	r2, [r7, #7]
 80008d4:	f002 021f 	and.w	r2, r2, #31
 80008d8:	2101      	movs	r1, #1
 80008da:	fa01 f202 	lsl.w	r2, r1, r2
 80008de:	4611      	mov	r1, r2
 80008e0:	4a12      	ldr	r2, [pc, #72]	@ (800092c <GPIO_IRQConfig+0x104>)
 80008e2:	430b      	orrs	r3, r1
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	e012      	b.n	800090e <GPIO_IRQConfig+0xe6>
        else if (IRQNumber >= 64 && IRQNumber < 96) {
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80008ec:	d90f      	bls.n	800090e <GPIO_IRQConfig+0xe6>
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b5f      	cmp	r3, #95	@ 0x5f
 80008f2:	d80c      	bhi.n	800090e <GPIO_IRQConfig+0xe6>
            *NVIC_ICER2 |= (1 << (IRQNumber % 64));
 80008f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <GPIO_IRQConfig+0x108>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	79fa      	ldrb	r2, [r7, #7]
 80008fa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80008fe:	2101      	movs	r1, #1
 8000900:	fa01 f202 	lsl.w	r2, r1, r2
 8000904:	4611      	mov	r1, r2
 8000906:	4a0a      	ldr	r2, [pc, #40]	@ (8000930 <GPIO_IRQConfig+0x108>)
 8000908:	430b      	orrs	r3, r1
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	e7ff      	b.n	800090e <GPIO_IRQConfig+0xe6>
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000e104 	.word	0xe000e104
 8000924:	e000e108 	.word	0xe000e108
 8000928:	e000e180 	.word	0xe000e180
 800092c:	e000e184 	.word	0xe000e184
 8000930:	e000e188 	.word	0xe000e188

08000934 <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
    // Calculate the priority group
    uint8_t iprx = IRQNumber / 4;
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	089b      	lsrs	r3, r3, #2
 8000944:	73fb      	strb	r3, [r7, #15]
    uint8_t iprx_section = IRQNumber % 4;
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	f003 0303 	and.w	r3, r3, #3
 800094c:	73bb      	strb	r3, [r7, #14]
    uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 800094e:	7bbb      	ldrb	r3, [r7, #14]
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	b2db      	uxtb	r3, r3
 8000954:	3304      	adds	r3, #4
 8000956:	737b      	strb	r3, [r7, #13]
    *(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000960:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000964:	6819      	ldr	r1, [r3, #0]
 8000966:	7b7b      	ldrb	r3, [r7, #13]
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	409a      	lsls	r2, r3
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000974:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000978:	430a      	orrs	r2, r1
 800097a:	601a      	str	r2, [r3, #0]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber) {
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
    // Clear the EXTI line pending register
    if (EXTI->PR & (1 << PinNumber)) {
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <GPIO_IRQHandling+0x3c>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	79fa      	ldrb	r2, [r7, #7]
 8000998:	2101      	movs	r1, #1
 800099a:	fa01 f202 	lsl.w	r2, r1, r2
 800099e:	4013      	ands	r3, r2
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d009      	beq.n	80009b8 <GPIO_IRQHandling+0x30>
        EXTI->PR |= (1 << PinNumber);
 80009a4:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <GPIO_IRQHandling+0x3c>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	79fa      	ldrb	r2, [r7, #7]
 80009aa:	2101      	movs	r1, #1
 80009ac:	fa01 f202 	lsl.w	r2, r1, r2
 80009b0:	4611      	mov	r1, r2
 80009b2:	4a04      	ldr	r2, [pc, #16]	@ (80009c4 <GPIO_IRQHandling+0x3c>)
 80009b4:	430b      	orrs	r3, r1
 80009b6:	6153      	str	r3, [r2, #20]
    }
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	40013c00 	.word	0x40013c00

080009c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c8:	480d      	ldr	r0, [pc, #52]	@ (8000a00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d0:	480c      	ldr	r0, [pc, #48]	@ (8000a04 <LoopForever+0x6>)
  ldr r1, =_edata
 80009d2:	490d      	ldr	r1, [pc, #52]	@ (8000a08 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a0c <LoopForever+0xe>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000a14 <LoopForever+0x16>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009f6:	f000 f811 	bl	8000a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fa:	f7ff fbf7 	bl	80001ec <main>

080009fe <LoopForever>:

LoopForever:
  b LoopForever
 80009fe:	e7fe      	b.n	80009fe <LoopForever>
  ldr   r0, =_estack
 8000a00:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a0c:	08000a84 	.word	0x08000a84
  ldr r2, =_sbss
 8000a10:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a14:	2000001c 	.word	0x2000001c

08000a18 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC_IRQHandler>
	...

08000a1c <__libc_init_array>:
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	4d0d      	ldr	r5, [pc, #52]	@ (8000a54 <__libc_init_array+0x38>)
 8000a20:	4c0d      	ldr	r4, [pc, #52]	@ (8000a58 <__libc_init_array+0x3c>)
 8000a22:	1b64      	subs	r4, r4, r5
 8000a24:	10a4      	asrs	r4, r4, #2
 8000a26:	2600      	movs	r6, #0
 8000a28:	42a6      	cmp	r6, r4
 8000a2a:	d109      	bne.n	8000a40 <__libc_init_array+0x24>
 8000a2c:	4d0b      	ldr	r5, [pc, #44]	@ (8000a5c <__libc_init_array+0x40>)
 8000a2e:	4c0c      	ldr	r4, [pc, #48]	@ (8000a60 <__libc_init_array+0x44>)
 8000a30:	f000 f818 	bl	8000a64 <_init>
 8000a34:	1b64      	subs	r4, r4, r5
 8000a36:	10a4      	asrs	r4, r4, #2
 8000a38:	2600      	movs	r6, #0
 8000a3a:	42a6      	cmp	r6, r4
 8000a3c:	d105      	bne.n	8000a4a <__libc_init_array+0x2e>
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a44:	4798      	blx	r3
 8000a46:	3601      	adds	r6, #1
 8000a48:	e7ee      	b.n	8000a28 <__libc_init_array+0xc>
 8000a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a4e:	4798      	blx	r3
 8000a50:	3601      	adds	r6, #1
 8000a52:	e7f2      	b.n	8000a3a <__libc_init_array+0x1e>
 8000a54:	08000a7c 	.word	0x08000a7c
 8000a58:	08000a7c 	.word	0x08000a7c
 8000a5c:	08000a7c 	.word	0x08000a7c
 8000a60:	08000a80 	.word	0x08000a80

08000a64 <_init>:
 8000a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a66:	bf00      	nop
 8000a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a6a:	bc08      	pop	{r3}
 8000a6c:	469e      	mov	lr, r3
 8000a6e:	4770      	bx	lr

08000a70 <_fini>:
 8000a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a72:	bf00      	nop
 8000a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a76:	bc08      	pop	{r3}
 8000a78:	469e      	mov	lr, r3
 8000a7a:	4770      	bx	lr
