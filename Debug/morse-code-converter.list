
morse-code-converter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c3c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000de8  08000df0  00001df0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000de8  08000de8  00001df0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000de8  08000de8  00001df0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000de8  08000df0  00001df0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000de8  08000de8  00001de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000dec  08000dec  00001dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001df0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001df0  2**0
                  CONTENTS
 10 .bss          00000034  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000034  20000034  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012f6  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000459  00000000  00000000  00003116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  00003570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f0  00000000  00000000  000036c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000183d  00000000  00000000  000037b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015ee  00000000  00000000  00004fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005989  00000000  00000000  000065db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000bf64  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000047c  00000000  00000000  0000bfa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0000c424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000dd0 	.word	0x08000dd0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000dd0 	.word	0x08000dd0

080001ec <GPIO_InitConfig>:

uint32_t press_duration = 0; // Variable to store the duration of the button press
uint32_t start_time[2] = {0}; // Variable to store the press time
uint32_t end_time[2] = {0}; // Variable to store the release time

void GPIO_InitConfig(GPIO_Handle_t *GpioBtn, GPIO_Handle_t *GpioLED1, GPIO_Handle_t *GpioLED2) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	60f8      	str	r0, [r7, #12]
 80001f4:	60b9      	str	r1, [r7, #8]
 80001f6:	607a      	str	r2, [r7, #4]
	GPIOA_PCLK_EN();
 80001f8:	4b25      	ldr	r3, [pc, #148]	@ (8000290 <GPIO_InitConfig+0xa4>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fc:	4a24      	ldr	r2, [pc, #144]	@ (8000290 <GPIO_InitConfig+0xa4>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6313      	str	r3, [r2, #48]	@ 0x30
    // Initialize GPIOA as alternate function mode for TIM2_CH1
	GpioBtn->port = GPIOA;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	4a23      	ldr	r2, [pc, #140]	@ (8000294 <GPIO_InitConfig+0xa8>)
 8000208:	601a      	str	r2, [r3, #0]
	GpioBtn->config.pin = 0;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	2200      	movs	r2, #0
 800020e:	605a      	str	r2, [r3, #4]
	GpioBtn->config.mode = GPIO_MODE_AF; // Falling edge trigger
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	2202      	movs	r2, #2
 8000214:	609a      	str	r2, [r3, #8]
	GpioBtn->config.otype = GPIO_OTYPE_PP; // Push-pull
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	2200      	movs	r2, #0
 800021a:	60da      	str	r2, [r3, #12]
	GpioBtn->config.ospeed = GPIO_OSPEED_LOW; // Fast speed
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	2200      	movs	r2, #0
 8000220:	611a      	str	r2, [r3, #16]
	GpioBtn->config.pupd = GPIO_PUPD_UP; // Pull-up
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	2201      	movs	r2, #1
 8000226:	615a      	str	r2, [r3, #20]
	GpioBtn->config.af = 1; // Alternate function 1 (AF1)
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	2201      	movs	r2, #1
 800022c:	619a      	str	r2, [r3, #24]
	GPIO_Init(GpioBtn);
 800022e:	68f8      	ldr	r0, [r7, #12]
 8000230:	f000 fa3c 	bl	80006ac <GPIO_Init>

    // 初始化 GPIO2 和 GPIO3 為輸出模式
    GpioLED1->port = GPIOA;
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4a17      	ldr	r2, [pc, #92]	@ (8000294 <GPIO_InitConfig+0xa8>)
 8000238:	601a      	str	r2, [r3, #0]
    GpioLED1->config.pin = 4; // GPIO2
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	2204      	movs	r2, #4
 800023e:	605a      	str	r2, [r3, #4]
    GpioLED1->config.mode = GPIO_MODE_OUTPUT;
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	2201      	movs	r2, #1
 8000244:	609a      	str	r2, [r3, #8]
    GpioLED1->config.otype = GPIO_OTYPE_PP;
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
    GpioLED1->config.ospeed = GPIO_OSPEED_LOW;
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	2200      	movs	r2, #0
 8000250:	611a      	str	r2, [r3, #16]
	GpioLED1->config.pupd = GPIO_PUPD_NONE;
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	2200      	movs	r2, #0
 8000256:	615a      	str	r2, [r3, #20]
    GPIO_Init(GpioLED1);
 8000258:	68b8      	ldr	r0, [r7, #8]
 800025a:	f000 fa27 	bl	80006ac <GPIO_Init>

    GpioLED2->port = GPIOA;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4a0c      	ldr	r2, [pc, #48]	@ (8000294 <GPIO_InitConfig+0xa8>)
 8000262:	601a      	str	r2, [r3, #0]
    GpioLED2->config.pin = 5; // GPIO3
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2205      	movs	r2, #5
 8000268:	605a      	str	r2, [r3, #4]
    GpioLED2->config.mode = GPIO_MODE_OUTPUT;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2201      	movs	r2, #1
 800026e:	609a      	str	r2, [r3, #8]
    GpioLED2->config.otype = GPIO_OTYPE_PP;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2200      	movs	r2, #0
 8000274:	60da      	str	r2, [r3, #12]
    GpioLED2->config.ospeed = GPIO_OSPEED_LOW;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2200      	movs	r2, #0
 800027a:	611a      	str	r2, [r3, #16]
    GpioLED2->config.pupd = GPIO_PUPD_NONE;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2200      	movs	r2, #0
 8000280:	615a      	str	r2, [r3, #20]
    GPIO_Init(GpioLED2);
 8000282:	6878      	ldr	r0, [r7, #4]
 8000284:	f000 fa12 	bl	80006ac <GPIO_Init>
}
 8000288:	bf00      	nop
 800028a:	3710      	adds	r7, #16
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	40023800 	.word	0x40023800
 8000294:	40020000 	.word	0x40020000

08000298 <TIM_Config>:

// TIM2 configuration
void TIM_Config(TIM_Handle_t *TIMBtn, TIM_Handle_t *TIMLED1, TIM_Handle_t *TIMLED2) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	60b9      	str	r1, [r7, #8]
 80002a2:	607a      	str	r2, [r7, #4]
	// Initialize TIM2 for TIMBtn
	TIMBtn->pTIMx = TIM2;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002aa:	601a      	str	r2, [r3, #0]
	TIMBtn->config.prescaler = 16000; // Prescaler value
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80002b2:	605a      	str	r2, [r3, #4]
	TIMBtn->config.period = 0xFFFF; // Auto-reload value
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002ba:	609a      	str	r2, [r3, #8]
	TIMBtn->config.mode = 0; // Timer mode (up)
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	2200      	movs	r2, #0
 80002c0:	60da      	str	r2, [r3, #12]
	TIMBtn->config.channelConfig[0].ccm = TIM_CC_SELECTION_INPUT_DEFAULT; // 默認輸入捕捉
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	2201      	movs	r2, #1
 80002c6:	615a      	str	r2, [r3, #20]
	TIMBtn->config.channelConfig[0].ic_mode = TIM_IC_MODE_RF; // 捕捉上升沿
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	220a      	movs	r2, #10
 80002cc:	619a      	str	r2, [r3, #24]
	TIM_Init(TIMBtn); // Initialize TIM2
 80002ce:	68f8      	ldr	r0, [r7, #12]
 80002d0:	f000 fc74 	bl	8000bbc <TIM_Init>
	TIM2_PCLK_EN();
 80002d4:	4b33      	ldr	r3, [pc, #204]	@ (80003a4 <TIM_Config+0x10c>)
 80002d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002d8:	4a32      	ldr	r2, [pc, #200]	@ (80003a4 <TIM_Config+0x10c>)
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6413      	str	r3, [r2, #64]	@ 0x40

	// Initialize TIM3 for LED1
	TIMLED1->pTIMx = TIM3;
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	4a31      	ldr	r2, [pc, #196]	@ (80003a8 <TIM_Config+0x110>)
 80002e4:	601a      	str	r2, [r3, #0]
	TIM3->ARR = 600;
 80002e6:	4b30      	ldr	r3, [pc, #192]	@ (80003a8 <TIM_Config+0x110>)
 80002e8:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80002ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->PSC = 16000 - 1; // Prescaler value
 80002ee:	4b2e      	ldr	r3, [pc, #184]	@ (80003a8 <TIM_Config+0x110>)
 80002f0:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80002f4:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->CR[0] = 0; // Timer mode (up)
 80002f6:	4b2c      	ldr	r3, [pc, #176]	@ (80003a8 <TIM_Config+0x110>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
	TIM3_PCLK_EN();
 80002fc:	4b29      	ldr	r3, [pc, #164]	@ (80003a4 <TIM_Config+0x10c>)
 80002fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000300:	4a28      	ldr	r2, [pc, #160]	@ (80003a4 <TIM_Config+0x10c>)
 8000302:	f043 0302 	orr.w	r3, r3, #2
 8000306:	6413      	str	r3, [r2, #64]	@ 0x40

	// Initialize TIM4 for LED2
	TIMLED2->pTIMx = TIM4;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a28      	ldr	r2, [pc, #160]	@ (80003ac <TIM_Config+0x114>)
 800030c:	601a      	str	r2, [r3, #0]
	TIMLED2->config.prescaler = 16000; // Prescaler value
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000314:	605a      	str	r2, [r3, #4]
	TIMLED2->config.period = 1200; // Auto-reload value
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800031c:	609a      	str	r2, [r3, #8]
	TIMLED2->config.mode = 0;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]
	TIM_Init(TIMLED2); // Initialize TIM4
 8000324:	6878      	ldr	r0, [r7, #4]
 8000326:	f000 fc49 	bl	8000bbc <TIM_Init>
	TIM4_PCLK_EN();
 800032a:	4b1e      	ldr	r3, [pc, #120]	@ (80003a4 <TIM_Config+0x10c>)
 800032c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800032e:	4a1d      	ldr	r2, [pc, #116]	@ (80003a4 <TIM_Config+0x10c>)
 8000330:	f043 0304 	orr.w	r3, r3, #4
 8000334:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM_SetupChannel(TIMBtn, TIM_CC1); // Setup input channel 0
 8000336:	2100      	movs	r1, #0
 8000338:	68f8      	ldr	r0, [r7, #12]
 800033a:	f000 fc6d 	bl	8000c18 <TIM_SetupChannel>

	TIM_EnableInterrupt(TIMBtn, TIM_CC1); // Enable interrupt for channel 0
 800033e:	2100      	movs	r1, #0
 8000340:	68f8      	ldr	r0, [r7, #12]
 8000342:	f000 fcde 	bl	8000d02 <TIM_EnableInterrupt>
	TIMLED1->pTIMx->DIER |= (1 << 0); // Enable interrupt for TIM3
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	68da      	ldr	r2, [r3, #12]
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f042 0201 	orr.w	r2, r2, #1
 8000354:	60da      	str	r2, [r3, #12]
	TIMLED2->pTIMx->DIER |= (1 << 0); // Enable interrupt for TIM4
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	68da      	ldr	r2, [r3, #12]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f042 0201 	orr.w	r2, r2, #1
 8000364:	60da      	str	r2, [r3, #12]
	TIM_Start(TIMBtn); // Start the timer
 8000366:	68f8      	ldr	r0, [r7, #12]
 8000368:	f000 fc44 	bl	8000bf4 <TIM_Start>
	GPIO_IRQPriorityConfig(IRQ_NO_TIM2, NVIC_IRQ_PRI0); // Set TIM2 interrupt priority
 800036c:	2100      	movs	r1, #0
 800036e:	201c      	movs	r0, #28
 8000370:	f000 fbfa 	bl	8000b68 <GPIO_IRQPriorityConfig>
	GPIO_IRQPriorityConfig(IRQ_NO_TIM3, NVIC_IRQ_PRI1); // Set TIM3 interrupt priority
 8000374:	2101      	movs	r1, #1
 8000376:	201d      	movs	r0, #29
 8000378:	f000 fbf6 	bl	8000b68 <GPIO_IRQPriorityConfig>
	GPIO_IRQPriorityConfig(IRQ_NO_TIM4, NVIC_IRQ_PRI2); // Set TIM4 interrupt priority
 800037c:	2102      	movs	r1, #2
 800037e:	201e      	movs	r0, #30
 8000380:	f000 fbf2 	bl	8000b68 <GPIO_IRQPriorityConfig>
	GPIO_IRQConfig(IRQ_NO_TIM2, ENABLE); // Enable TIM2 interrupt in NVIC
 8000384:	2101      	movs	r1, #1
 8000386:	201c      	movs	r0, #28
 8000388:	f000 fb68 	bl	8000a5c <GPIO_IRQConfig>
	GPIO_IRQConfig(IRQ_NO_TIM3, ENABLE); // Enable TIM3 interrupt in NVIC
 800038c:	2101      	movs	r1, #1
 800038e:	201d      	movs	r0, #29
 8000390:	f000 fb64 	bl	8000a5c <GPIO_IRQConfig>
	GPIO_IRQConfig(IRQ_NO_TIM4, ENABLE); // Enable TIM4 interrupt in NVIC
 8000394:	2101      	movs	r1, #1
 8000396:	201e      	movs	r0, #30
 8000398:	f000 fb60 	bl	8000a5c <GPIO_IRQConfig>
}
 800039c:	bf00      	nop
 800039e:	3710      	adds	r7, #16
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40000400 	.word	0x40000400
 80003ac:	40000800 	.word	0x40000800

080003b0 <Timer3_StartCountdown>:

void Timer3_StartCountdown(uint32_t milliseconds) {
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
    TIM3->CR[0] &= ~(1 << 0);        // 確保 Timer 先停住
 80003b8:	4b17      	ldr	r3, [pc, #92]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a16      	ldr	r2, [pc, #88]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003be:	f023 0301 	bic.w	r3, r3, #1
 80003c2:	6013      	str	r3, [r2, #0]
    TIM3->CR[0] |= (1 << 2);
 80003c4:	4b14      	ldr	r3, [pc, #80]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a13      	ldr	r2, [pc, #76]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003ca:	f043 0304 	orr.w	r3, r3, #4
 80003ce:	6013      	str	r3, [r2, #0]
	TIM3->PSC = 16000 - 1;         // 設定 Prescaler
 80003d0:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003d2:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80003d6:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = milliseconds - 1;    // 設定 ARR
 80003d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	3b01      	subs	r3, #1
 80003de:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM3->CNT = 0;                   // 重設計數器
 80003e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->EGR |= (1 << 0);
 80003e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6153      	str	r3, [r2, #20]
    TIM3->SR &= ~TIM_FLAG_UIF;       // 清除中斷旗標
 80003f2:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003f4:	691b      	ldr	r3, [r3, #16]
 80003f6:	4a08      	ldr	r2, [pc, #32]	@ (8000418 <Timer3_StartCountdown+0x68>)
 80003f8:	f023 0301 	bic.w	r3, r3, #1
 80003fc:	6113      	str	r3, [r2, #16]
    TIM3->CR[0] |= (1 << 0);         // 啟動 Timer
 80003fe:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <Timer3_StartCountdown+0x68>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a05      	ldr	r2, [pc, #20]	@ (8000418 <Timer3_StartCountdown+0x68>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6013      	str	r3, [r2, #0]
}
 800040a:	bf00      	nop
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	40000400 	.word	0x40000400

0800041c <Timer4_StartCountdown>:

void Timer4_StartCountdown(uint32_t milliseconds) {
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	TIM4->CR[0] &= ~(1 << 0); // 確保 Timer 先停住
 8000424:	4b17      	ldr	r3, [pc, #92]	@ (8000484 <Timer4_StartCountdown+0x68>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a16      	ldr	r2, [pc, #88]	@ (8000484 <Timer4_StartCountdown+0x68>)
 800042a:	f023 0301 	bic.w	r3, r3, #1
 800042e:	6013      	str	r3, [r2, #0]
	TIM4->CR[0] |= (1 << 2);
 8000430:	4b14      	ldr	r3, [pc, #80]	@ (8000484 <Timer4_StartCountdown+0x68>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a13      	ldr	r2, [pc, #76]	@ (8000484 <Timer4_StartCountdown+0x68>)
 8000436:	f043 0304 	orr.w	r3, r3, #4
 800043a:	6013      	str	r3, [r2, #0]
	TIM4->PSC = 16000 - 1; // 設定 Prescaler
 800043c:	4b11      	ldr	r3, [pc, #68]	@ (8000484 <Timer4_StartCountdown+0x68>)
 800043e:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000442:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = milliseconds - 1;
 8000444:	4a0f      	ldr	r2, [pc, #60]	@ (8000484 <Timer4_StartCountdown+0x68>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	3b01      	subs	r3, #1
 800044a:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM4->CNT = 0;
 800044c:	4b0d      	ldr	r3, [pc, #52]	@ (8000484 <Timer4_StartCountdown+0x68>)
 800044e:	2200      	movs	r2, #0
 8000450:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->EGR |= (1 << 0); // 更新計數器
 8000452:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <Timer4_StartCountdown+0x68>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a0b      	ldr	r2, [pc, #44]	@ (8000484 <Timer4_StartCountdown+0x68>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6153      	str	r3, [r2, #20]
	TIM4->SR &= ~TIM_FLAG_UIF; // 清除 update flag
 800045e:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <Timer4_StartCountdown+0x68>)
 8000460:	691b      	ldr	r3, [r3, #16]
 8000462:	4a08      	ldr	r2, [pc, #32]	@ (8000484 <Timer4_StartCountdown+0x68>)
 8000464:	f023 0301 	bic.w	r3, r3, #1
 8000468:	6113      	str	r3, [r2, #16]
	TIM4->CR[0] |= (1 << 0); // 啟動 Timer
 800046a:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <Timer4_StartCountdown+0x68>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a05      	ldr	r2, [pc, #20]	@ (8000484 <Timer4_StartCountdown+0x68>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6013      	str	r3, [r2, #0]
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40000800 	.word	0x40000800

08000488 <Timer3_Stop>:

void Timer3_Stop(void) {
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
    TIM3->CR[0] &= ~(1 << 0); // 停止計數
 800048c:	4b0c      	ldr	r3, [pc, #48]	@ (80004c0 <Timer3_Stop+0x38>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a0b      	ldr	r2, [pc, #44]	@ (80004c0 <Timer3_Stop+0x38>)
 8000492:	f023 0301 	bic.w	r3, r3, #1
 8000496:	6013      	str	r3, [r2, #0]
    TIM3->CNT = 0;
 8000498:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <Timer3_Stop+0x38>)
 800049a:	2200      	movs	r2, #0
 800049c:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM3->SR &= ~TIM_FLAG_UIF;   // 清除旗標
 800049e:	4b08      	ldr	r3, [pc, #32]	@ (80004c0 <Timer3_Stop+0x38>)
 80004a0:	691b      	ldr	r3, [r3, #16]
 80004a2:	4a07      	ldr	r2, [pc, #28]	@ (80004c0 <Timer3_Stop+0x38>)
 80004a4:	f023 0301 	bic.w	r3, r3, #1
 80004a8:	6113      	str	r3, [r2, #16]
	GPIOA->ODR &= ~(1 << 4); // Reset GPIO2
 80004aa:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <Timer3_Stop+0x3c>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a05      	ldr	r2, [pc, #20]	@ (80004c4 <Timer3_Stop+0x3c>)
 80004b0:	f023 0310 	bic.w	r3, r3, #16
 80004b4:	6153      	str	r3, [r2, #20]
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	40000400 	.word	0x40000400
 80004c4:	40020000 	.word	0x40020000

080004c8 <Timer4_Stop>:

void Timer4_Stop(void) {
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	TIM4->CR[0] &= ~(1 << 0); // 停止計數
 80004cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <Timer4_Stop+0x38>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000500 <Timer4_Stop+0x38>)
 80004d2:	f023 0301 	bic.w	r3, r3, #1
 80004d6:	6013      	str	r3, [r2, #0]
	TIM4->CNT = 0;
 80004d8:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <Timer4_Stop+0x38>)
 80004da:	2200      	movs	r2, #0
 80004dc:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->SR &= ~TIM_FLAG_UIF;   // 清除旗標
 80004de:	4b08      	ldr	r3, [pc, #32]	@ (8000500 <Timer4_Stop+0x38>)
 80004e0:	691b      	ldr	r3, [r3, #16]
 80004e2:	4a07      	ldr	r2, [pc, #28]	@ (8000500 <Timer4_Stop+0x38>)
 80004e4:	f023 0301 	bic.w	r3, r3, #1
 80004e8:	6113      	str	r3, [r2, #16]
	GPIOA->ODR &= ~(1 << 5); // Reset GPIO2
 80004ea:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <Timer4_Stop+0x3c>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a05      	ldr	r2, [pc, #20]	@ (8000504 <Timer4_Stop+0x3c>)
 80004f0:	f023 0320 	bic.w	r3, r3, #32
 80004f4:	6153      	str	r3, [r2, #20]
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	40000800 	.word	0x40000800
 8000504:	40020000 	.word	0x40020000

08000508 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	static volatile uint32_t overflow_count = 0; // Overflow count
    if (TIM2->SR & TIM_FLAG_CC1IF) {
 800050c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000510:	691b      	ldr	r3, [r3, #16]
 8000512:	f003 0302 	and.w	r3, r3, #2
 8000516:	2b00      	cmp	r3, #0
 8000518:	d03a      	beq.n	8000590 <TIM2_IRQHandler+0x88>
        // Clear the interrupt flag
		if (GPIOA->IDR & (1 << 0)) { // Check if the button is pressed
 800051a:	4b29      	ldr	r3, [pc, #164]	@ (80005c0 <TIM2_IRQHandler+0xb8>)
 800051c:	691b      	ldr	r3, [r3, #16]
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	2b00      	cmp	r3, #0
 8000524:	d01a      	beq.n	800055c <TIM2_IRQHandler+0x54>
			end_time[0] = TIM2->CCR[0]; // Read the captured value
 8000526:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800052a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800052c:	4a25      	ldr	r2, [pc, #148]	@ (80005c4 <TIM2_IRQHandler+0xbc>)
 800052e:	6013      	str	r3, [r2, #0]
			end_time[1] = overflow_count; // Store the overflow count
 8000530:	4b25      	ldr	r3, [pc, #148]	@ (80005c8 <TIM2_IRQHandler+0xc0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a23      	ldr	r2, [pc, #140]	@ (80005c4 <TIM2_IRQHandler+0xbc>)
 8000536:	6053      	str	r3, [r2, #4]
			press_duration = end_time[0] - start_time[0];
 8000538:	4b22      	ldr	r3, [pc, #136]	@ (80005c4 <TIM2_IRQHandler+0xbc>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b23      	ldr	r3, [pc, #140]	@ (80005cc <TIM2_IRQHandler+0xc4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	4a23      	ldr	r2, [pc, #140]	@ (80005d0 <TIM2_IRQHandler+0xc8>)
 8000544:	6013      	str	r3, [r2, #0]
			Timer3_Stop(); // Stop the countdown
 8000546:	f7ff ff9f 	bl	8000488 <Timer3_Stop>
			Timer3_StartCountdown(600);
 800054a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800054e:	f7ff ff2f 	bl	80003b0 <Timer3_StartCountdown>
			Timer4_StartCountdown(1200);
 8000552:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8000556:	f7ff ff61 	bl	800041c <Timer4_StartCountdown>
 800055a:	e010      	b.n	800057e <TIM2_IRQHandler+0x76>
		}
		else { // Check if the button is released
			start_time[0] = TIM2->CCR[0]; // Read the captured value
 800055c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000562:	4a1a      	ldr	r2, [pc, #104]	@ (80005cc <TIM2_IRQHandler+0xc4>)
 8000564:	6013      	str	r3, [r2, #0]
			start_time[1] = overflow_count; // Store the overflow count
 8000566:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <TIM2_IRQHandler+0xc0>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a18      	ldr	r2, [pc, #96]	@ (80005cc <TIM2_IRQHandler+0xc4>)
 800056c:	6053      	str	r3, [r2, #4]
			Timer3_Stop();
 800056e:	f7ff ff8b 	bl	8000488 <Timer3_Stop>
			Timer4_Stop();
 8000572:	f7ff ffa9 	bl	80004c8 <Timer4_Stop>
			Timer3_StartCountdown(600); //Start 600ms countdown to determine it's a short press or a long press
 8000576:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800057a:	f7ff ff19 	bl	80003b0 <Timer3_StartCountdown>
		}
		TIM2->SR &= ~TIM_FLAG_CC1IF;
 800057e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000582:	691b      	ldr	r3, [r3, #16]
 8000584:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000588:	f023 0302 	bic.w	r3, r3, #2
 800058c:	6113      	str	r3, [r2, #16]
	else if (TIM2->SR & TIM_FLAG_UIF) {
		// Clear the update interrupt flag
		TIM2->SR &= ~TIM_FLAG_UIF;
		overflow_count++;
	}
    return;
 800058e:	e014      	b.n	80005ba <TIM2_IRQHandler+0xb2>
	else if (TIM2->SR & TIM_FLAG_UIF) {
 8000590:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000594:	691b      	ldr	r3, [r3, #16]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00d      	beq.n	80005ba <TIM2_IRQHandler+0xb2>
		TIM2->SR &= ~TIM_FLAG_UIF;
 800059e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005a2:	691b      	ldr	r3, [r3, #16]
 80005a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005a8:	f023 0301 	bic.w	r3, r3, #1
 80005ac:	6113      	str	r3, [r2, #16]
		overflow_count++;
 80005ae:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <TIM2_IRQHandler+0xc0>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	3301      	adds	r3, #1
 80005b4:	4a04      	ldr	r2, [pc, #16]	@ (80005c8 <TIM2_IRQHandler+0xc0>)
 80005b6:	6013      	str	r3, [r2, #0]
    return;
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
}
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40020000 	.word	0x40020000
 80005c4:	20000028 	.word	0x20000028
 80005c8:	20000030 	.word	0x20000030
 80005cc:	20000020 	.word	0x20000020
 80005d0:	2000001c 	.word	0x2000001c

080005d4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_FLAG_UIF) {
 80005d8:	4b10      	ldr	r3, [pc, #64]	@ (800061c <TIM3_IRQHandler+0x48>)
 80005da:	691b      	ldr	r3, [r3, #16]
 80005dc:	f003 0301 	and.w	r3, r3, #1
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d015      	beq.n	8000610 <TIM3_IRQHandler+0x3c>
        TIM3->SR &= ~TIM_FLAG_UIF; // 清中斷旗標
 80005e4:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <TIM3_IRQHandler+0x48>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a0c      	ldr	r2, [pc, #48]	@ (800061c <TIM3_IRQHandler+0x48>)
 80005ea:	f023 0301 	bic.w	r3, r3, #1
 80005ee:	6113      	str	r3, [r2, #16]
		TIM3->CR[0] &= ~(1 << 0); // 停止計數
 80005f0:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <TIM3_IRQHandler+0x48>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a09      	ldr	r2, [pc, #36]	@ (800061c <TIM3_IRQHandler+0x48>)
 80005f6:	f023 0301 	bic.w	r3, r3, #1
 80005fa:	6013      	str	r3, [r2, #0]
    	TIM3->CNT = 0;
 80005fc:	4b07      	ldr	r3, [pc, #28]	@ (800061c <TIM3_IRQHandler+0x48>)
 80005fe:	2200      	movs	r2, #0
 8000600:	625a      	str	r2, [r3, #36]	@ 0x24
        GPIOA->ODR |= (1 << 4); // Set GPIO3
 8000602:	4b07      	ldr	r3, [pc, #28]	@ (8000620 <TIM3_IRQHandler+0x4c>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a06      	ldr	r2, [pc, #24]	@ (8000620 <TIM3_IRQHandler+0x4c>)
 8000608:	f043 0310 	orr.w	r3, r3, #16
 800060c:	6153      	str	r3, [r2, #20]
    }
    return;
 800060e:	bf00      	nop
 8000610:	bf00      	nop
}
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40000400 	.word	0x40000400
 8000620:	40020000 	.word	0x40020000

08000624 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_FLAG_UIF) {
 8000628:	4b10      	ldr	r3, [pc, #64]	@ (800066c <TIM4_IRQHandler+0x48>)
 800062a:	691b      	ldr	r3, [r3, #16]
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	2b00      	cmp	r3, #0
 8000632:	d015      	beq.n	8000660 <TIM4_IRQHandler+0x3c>
        TIM4->SR &= ~TIM_FLAG_UIF; // 清中斷旗標
 8000634:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <TIM4_IRQHandler+0x48>)
 8000636:	691b      	ldr	r3, [r3, #16]
 8000638:	4a0c      	ldr	r2, [pc, #48]	@ (800066c <TIM4_IRQHandler+0x48>)
 800063a:	f023 0301 	bic.w	r3, r3, #1
 800063e:	6113      	str	r3, [r2, #16]
		TIM4->CR[0] &= ~(1 << 0); // 停止計數
 8000640:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <TIM4_IRQHandler+0x48>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a09      	ldr	r2, [pc, #36]	@ (800066c <TIM4_IRQHandler+0x48>)
 8000646:	f023 0301 	bic.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]
    	TIM4->CNT = 0;
 800064c:	4b07      	ldr	r3, [pc, #28]	@ (800066c <TIM4_IRQHandler+0x48>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	@ 0x24
        GPIOA->ODR |= (1 << 5); // Set GPIO3
 8000652:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <TIM4_IRQHandler+0x4c>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a06      	ldr	r2, [pc, #24]	@ (8000670 <TIM4_IRQHandler+0x4c>)
 8000658:	f043 0320 	orr.w	r3, r3, #32
 800065c:	6153      	str	r3, [r2, #20]
    }
    return;
 800065e:	bf00      	nop
 8000660:	bf00      	nop
}
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40000800 	.word	0x40000800
 8000670:	40020000 	.word	0x40020000

08000674 <main>:


int main(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b0c6      	sub	sp, #280	@ 0x118
 8000678:	af00      	add	r7, sp, #0
	// TIMER and GPIO handle;
	TIM_Handle_t TimBtn, TimLED1, TimLED2;
	GPIO_Handle_t GPIOBtn, GPIOLED1, GPIOLED2;
	uint32_t t;
	GPIO_InitConfig(&GPIOBtn, &GPIOLED1, &GPIOLED2); // Initialize GPIO configuration
 800067a:	463a      	mov	r2, r7
 800067c:	f107 011c 	add.w	r1, r7, #28
 8000680:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fdb1 	bl	80001ec <GPIO_InitConfig>
	TIM_Config(&TimBtn, &TimLED1, &TimLED2); // Initialize TIM2 configuration
 800068a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800068e:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8000692:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fdfe 	bl	8000298 <TIM_Config>
	while(1){
		t = press_duration;
 800069c:	4b02      	ldr	r3, [pc, #8]	@ (80006a8 <main+0x34>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80006a4:	e7fa      	b.n	800069c <main+0x28>
 80006a6:	bf00      	nop
 80006a8:	2000001c 	.word	0x2000001c

080006ac <GPIO_Init>:
        else {
        }
    }
}

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]


    // Configure the mode
    if (pGPIOHandle->config.mode <= GPIO_MODE_ANALOG) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	2b03      	cmp	r3, #3
 80006be:	d81f      	bhi.n	8000700 <GPIO_Init+0x54>
        temp = (pGPIOHandle->config.mode << (2 * pGPIOHandle->config.pin));
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	689a      	ldr	r2, [r3, #8]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->MODER &= ~(0x03 << (2 * pGPIOHandle->config.pin)); // Clear the bits
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	2103      	movs	r1, #3
 80006de:	fa01 f303 	lsl.w	r3, r1, r3
 80006e2:	43db      	mvns	r3, r3
 80006e4:	4619      	mov	r1, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	400a      	ands	r2, r1
 80006ec:	601a      	str	r2, [r3, #0]
        pGPIOHandle->port->MODER |= temp;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	6819      	ldr	r1, [r3, #0]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	68fa      	ldr	r2, [r7, #12]
 80006fa:	430a      	orrs	r2, r1
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	e0e6      	b.n	80008ce <GPIO_Init+0x222>
    }
    else {
        if (pGPIOHandle->config.mode == GPIO_MODE_IT_FT) {
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	2b04      	cmp	r3, #4
 8000706:	d117      	bne.n	8000738 <GPIO_Init+0x8c>
            // Configure for falling edge trigger
            EXTI->FTSR |= (1 << pGPIOHandle->config.pin);
 8000708:	4b4e      	ldr	r3, [pc, #312]	@ (8000844 <GPIO_Init+0x198>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	6852      	ldr	r2, [r2, #4]
 8000710:	2101      	movs	r1, #1
 8000712:	fa01 f202 	lsl.w	r2, r1, r2
 8000716:	4611      	mov	r1, r2
 8000718:	4a4a      	ldr	r2, [pc, #296]	@ (8000844 <GPIO_Init+0x198>)
 800071a:	430b      	orrs	r3, r1
 800071c:	60d3      	str	r3, [r2, #12]
            EXTI->RTSR &= ~(1 << pGPIOHandle->config.pin); // Clear the rising edge trigger
 800071e:	4b49      	ldr	r3, [pc, #292]	@ (8000844 <GPIO_Init+0x198>)
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	6852      	ldr	r2, [r2, #4]
 8000726:	2101      	movs	r1, #1
 8000728:	fa01 f202 	lsl.w	r2, r1, r2
 800072c:	43d2      	mvns	r2, r2
 800072e:	4611      	mov	r1, r2
 8000730:	4a44      	ldr	r2, [pc, #272]	@ (8000844 <GPIO_Init+0x198>)
 8000732:	400b      	ands	r3, r1
 8000734:	6093      	str	r3, [r2, #8]
 8000736:	e035      	b.n	80007a4 <GPIO_Init+0xf8>
        }
        else if (pGPIOHandle->config.mode == GPIO_MODE_IT_RT) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	2b05      	cmp	r3, #5
 800073e:	d117      	bne.n	8000770 <GPIO_Init+0xc4>
            // Configure for rising edge trigger
            EXTI->RTSR |= (1 << pGPIOHandle->config.pin);
 8000740:	4b40      	ldr	r3, [pc, #256]	@ (8000844 <GPIO_Init+0x198>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	6852      	ldr	r2, [r2, #4]
 8000748:	2101      	movs	r1, #1
 800074a:	fa01 f202 	lsl.w	r2, r1, r2
 800074e:	4611      	mov	r1, r2
 8000750:	4a3c      	ldr	r2, [pc, #240]	@ (8000844 <GPIO_Init+0x198>)
 8000752:	430b      	orrs	r3, r1
 8000754:	6093      	str	r3, [r2, #8]
            EXTI->FTSR &= ~(1 << pGPIOHandle->config.pin); // Clear the falling edge trigger
 8000756:	4b3b      	ldr	r3, [pc, #236]	@ (8000844 <GPIO_Init+0x198>)
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	6852      	ldr	r2, [r2, #4]
 800075e:	2101      	movs	r1, #1
 8000760:	fa01 f202 	lsl.w	r2, r1, r2
 8000764:	43d2      	mvns	r2, r2
 8000766:	4611      	mov	r1, r2
 8000768:	4a36      	ldr	r2, [pc, #216]	@ (8000844 <GPIO_Init+0x198>)
 800076a:	400b      	ands	r3, r1
 800076c:	60d3      	str	r3, [r2, #12]
 800076e:	e019      	b.n	80007a4 <GPIO_Init+0xf8>
        }
        else if (pGPIOHandle->config.mode == GPIO_MODE_IT_RFT) {
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	2b06      	cmp	r3, #6
 8000776:	d115      	bne.n	80007a4 <GPIO_Init+0xf8>
            // Configure for both edges trigger
            EXTI->RTSR |= (1 << pGPIOHandle->config.pin);
 8000778:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <GPIO_Init+0x198>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	6852      	ldr	r2, [r2, #4]
 8000780:	2101      	movs	r1, #1
 8000782:	fa01 f202 	lsl.w	r2, r1, r2
 8000786:	4611      	mov	r1, r2
 8000788:	4a2e      	ldr	r2, [pc, #184]	@ (8000844 <GPIO_Init+0x198>)
 800078a:	430b      	orrs	r3, r1
 800078c:	6093      	str	r3, [r2, #8]
            EXTI->FTSR |= (1 << pGPIOHandle->config.pin);
 800078e:	4b2d      	ldr	r3, [pc, #180]	@ (8000844 <GPIO_Init+0x198>)
 8000790:	68db      	ldr	r3, [r3, #12]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	6852      	ldr	r2, [r2, #4]
 8000796:	2101      	movs	r1, #1
 8000798:	fa01 f202 	lsl.w	r2, r1, r2
 800079c:	4611      	mov	r1, r2
 800079e:	4a29      	ldr	r2, [pc, #164]	@ (8000844 <GPIO_Init+0x198>)
 80007a0:	430b      	orrs	r3, r1
 80007a2:	60d3      	str	r3, [r2, #12]
        }

        //configure gpio portselection in SYSCFG_EXTICR
        uint8_t temp1 = pGPIOHandle->config.pin / 4;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	089b      	lsrs	r3, r3, #2
 80007aa:	72fb      	strb	r3, [r7, #11]
        uint8_t temp2 = pGPIOHandle->config.pin % 4;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	f003 0303 	and.w	r3, r3, #3
 80007b6:	72bb      	strb	r3, [r7, #10]
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->port);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a22      	ldr	r2, [pc, #136]	@ (8000848 <GPIO_Init+0x19c>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d056      	beq.n	8000870 <GPIO_Init+0x1c4>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a21      	ldr	r2, [pc, #132]	@ (800084c <GPIO_Init+0x1a0>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d039      	beq.n	8000840 <GPIO_Init+0x194>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a1f      	ldr	r2, [pc, #124]	@ (8000850 <GPIO_Init+0x1a4>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d032      	beq.n	800083c <GPIO_Init+0x190>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a1e      	ldr	r2, [pc, #120]	@ (8000854 <GPIO_Init+0x1a8>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d02b      	beq.n	8000838 <GPIO_Init+0x18c>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a1c      	ldr	r2, [pc, #112]	@ (8000858 <GPIO_Init+0x1ac>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d024      	beq.n	8000834 <GPIO_Init+0x188>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a1b      	ldr	r2, [pc, #108]	@ (800085c <GPIO_Init+0x1b0>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d01d      	beq.n	8000830 <GPIO_Init+0x184>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a19      	ldr	r2, [pc, #100]	@ (8000860 <GPIO_Init+0x1b4>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d016      	beq.n	800082c <GPIO_Init+0x180>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a18      	ldr	r2, [pc, #96]	@ (8000864 <GPIO_Init+0x1b8>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d00f      	beq.n	8000828 <GPIO_Init+0x17c>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a16      	ldr	r2, [pc, #88]	@ (8000868 <GPIO_Init+0x1bc>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d008      	beq.n	8000824 <GPIO_Init+0x178>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a15      	ldr	r2, [pc, #84]	@ (800086c <GPIO_Init+0x1c0>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d101      	bne.n	8000820 <GPIO_Init+0x174>
 800081c:	2309      	movs	r3, #9
 800081e:	e028      	b.n	8000872 <GPIO_Init+0x1c6>
 8000820:	230a      	movs	r3, #10
 8000822:	e026      	b.n	8000872 <GPIO_Init+0x1c6>
 8000824:	2308      	movs	r3, #8
 8000826:	e024      	b.n	8000872 <GPIO_Init+0x1c6>
 8000828:	2307      	movs	r3, #7
 800082a:	e022      	b.n	8000872 <GPIO_Init+0x1c6>
 800082c:	2306      	movs	r3, #6
 800082e:	e020      	b.n	8000872 <GPIO_Init+0x1c6>
 8000830:	2305      	movs	r3, #5
 8000832:	e01e      	b.n	8000872 <GPIO_Init+0x1c6>
 8000834:	2304      	movs	r3, #4
 8000836:	e01c      	b.n	8000872 <GPIO_Init+0x1c6>
 8000838:	2303      	movs	r3, #3
 800083a:	e01a      	b.n	8000872 <GPIO_Init+0x1c6>
 800083c:	2302      	movs	r3, #2
 800083e:	e018      	b.n	8000872 <GPIO_Init+0x1c6>
 8000840:	2301      	movs	r3, #1
 8000842:	e016      	b.n	8000872 <GPIO_Init+0x1c6>
 8000844:	40013c00 	.word	0x40013c00
 8000848:	40020000 	.word	0x40020000
 800084c:	40020400 	.word	0x40020400
 8000850:	40020800 	.word	0x40020800
 8000854:	40020c00 	.word	0x40020c00
 8000858:	40021000 	.word	0x40021000
 800085c:	40021400 	.word	0x40021400
 8000860:	40021800 	.word	0x40021800
 8000864:	40021c00 	.word	0x40021c00
 8000868:	40022000 	.word	0x40022000
 800086c:	40022400 	.word	0x40022400
 8000870:	2300      	movs	r3, #0
 8000872:	727b      	strb	r3, [r7, #9]
        SYSCFG_PCLK_EN(); // Enable SYSCFG clock
 8000874:	4b76      	ldr	r3, [pc, #472]	@ (8000a50 <GPIO_Init+0x3a4>)
 8000876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000878:	4a75      	ldr	r2, [pc, #468]	@ (8000a50 <GPIO_Init+0x3a4>)
 800087a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800087e:	6453      	str	r3, [r2, #68]	@ 0x44
        SYSCFG->EXTICR[temp1] &= ~(0x0F << (temp2 * 4)); // Clear the bits
 8000880:	4a74      	ldr	r2, [pc, #464]	@ (8000a54 <GPIO_Init+0x3a8>)
 8000882:	7afb      	ldrb	r3, [r7, #11]
 8000884:	3302      	adds	r3, #2
 8000886:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800088a:	7abb      	ldrb	r3, [r7, #10]
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	210f      	movs	r1, #15
 8000890:	fa01 f303 	lsl.w	r3, r1, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	4618      	mov	r0, r3
 8000898:	496e      	ldr	r1, [pc, #440]	@ (8000a54 <GPIO_Init+0x3a8>)
 800089a:	7afb      	ldrb	r3, [r7, #11]
 800089c:	4002      	ands	r2, r0
 800089e:	3302      	adds	r3, #2
 80008a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4); // Set the bits
 80008a4:	7a7a      	ldrb	r2, [r7, #9]
 80008a6:	7abb      	ldrb	r3, [r7, #10]
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	fa02 f103 	lsl.w	r1, r2, r3
 80008ae:	4a69      	ldr	r2, [pc, #420]	@ (8000a54 <GPIO_Init+0x3a8>)
 80008b0:	7afb      	ldrb	r3, [r7, #11]
 80008b2:	3302      	adds	r3, #2
 80008b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        // Enable the interrupt
        EXTI->IMR |= (1 << pGPIOHandle->config.pin); // Unmask the interrupt
 80008b8:	4b67      	ldr	r3, [pc, #412]	@ (8000a58 <GPIO_Init+0x3ac>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	6852      	ldr	r2, [r2, #4]
 80008c0:	2101      	movs	r1, #1
 80008c2:	fa01 f202 	lsl.w	r2, r1, r2
 80008c6:	4611      	mov	r1, r2
 80008c8:	4a63      	ldr	r2, [pc, #396]	@ (8000a58 <GPIO_Init+0x3ac>)
 80008ca:	430b      	orrs	r3, r1
 80008cc:	6013      	str	r3, [r2, #0]
    }
    temp = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]

    // Configure the output type
    if (pGPIOHandle->config.otype <= GPIO_OTYPE_OD) {
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d81c      	bhi.n	8000914 <GPIO_Init+0x268>
        temp = (pGPIOHandle->config.otype << pGPIOHandle->config.pin);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	68da      	ldr	r2, [r3, #12]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->OTYPER &= ~(0x01 << pGPIOHandle->config.pin); // Clear the bit
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	685a      	ldr	r2, [r3, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	2101      	movs	r1, #1
 80008f4:	fa01 f303 	lsl.w	r3, r1, r3
 80008f8:	43db      	mvns	r3, r3
 80008fa:	4619      	mov	r1, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	400a      	ands	r2, r1
 8000902:	605a      	str	r2, [r3, #4]
        pGPIOHandle->port->OTYPER |= temp; // Set the bit
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	6859      	ldr	r1, [r3, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	430a      	orrs	r2, r1
 8000912:	605a      	str	r2, [r3, #4]
    }
    temp = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]

    // Configure the speed
    if (pGPIOHandle->config.ospeed <= 3) {
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	691b      	ldr	r3, [r3, #16]
 800091c:	2b03      	cmp	r3, #3
 800091e:	d81e      	bhi.n	800095e <GPIO_Init+0x2b2>
        temp = (pGPIOHandle->config.ospeed << (2 * pGPIOHandle->config.pin));
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	691a      	ldr	r2, [r3, #16]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->config.pin)); // Clear the bits
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	689a      	ldr	r2, [r3, #8]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	2103      	movs	r1, #3
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	4619      	mov	r1, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	400a      	ands	r2, r1
 800094c:	609a      	str	r2, [r3, #8]
        pGPIOHandle->port->OSPEEDR |= temp; // Set the bits
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6899      	ldr	r1, [r3, #8]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	68fa      	ldr	r2, [r7, #12]
 800095a:	430a      	orrs	r2, r1
 800095c:	609a      	str	r2, [r3, #8]
    }
    temp = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]

    // Configure the pull-up/pull-down
    if (pGPIOHandle->config.pupd <= 3) {
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	2b03      	cmp	r3, #3
 8000968:	d81e      	bhi.n	80009a8 <GPIO_Init+0x2fc>
        temp = (pGPIOHandle->config.pupd << (2 * pGPIOHandle->config.pin));
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	695a      	ldr	r2, [r3, #20]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->PUPDR &= ~(0x03 << (2 * pGPIOHandle->config.pin)); // Clear the bits
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	68da      	ldr	r2, [r3, #12]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	2103      	movs	r1, #3
 8000988:	fa01 f303 	lsl.w	r3, r1, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	4619      	mov	r1, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	400a      	ands	r2, r1
 8000996:	60da      	str	r2, [r3, #12]
        pGPIOHandle->port->PUPDR |= temp; // Set the bits
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	68d9      	ldr	r1, [r3, #12]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	430a      	orrs	r2, r1
 80009a6:	60da      	str	r2, [r3, #12]
    }
    temp = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]

    // Configure the alternate function
    if (pGPIOHandle->config.mode == GPIO_MODE_AF) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d144      	bne.n	8000a3e <GPIO_Init+0x392>
        if (pGPIOHandle->config.pin < 8) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	2b07      	cmp	r3, #7
 80009ba:	d81f      	bhi.n	80009fc <GPIO_Init+0x350>
            temp = (pGPIOHandle->config.af << (4 * pGPIOHandle->config.pin));
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	699a      	ldr	r2, [r3, #24]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	60fb      	str	r3, [r7, #12]
            pGPIOHandle->port->AFR[0] &= ~(0x0F << (4 * pGPIOHandle->config.pin)); // Clear the bits
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6a1a      	ldr	r2, [r3, #32]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	210f      	movs	r1, #15
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	4619      	mov	r1, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	400a      	ands	r2, r1
 80009e8:	621a      	str	r2, [r3, #32]
            pGPIOHandle->port->AFR[0] |= temp;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	6a19      	ldr	r1, [r3, #32]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	430a      	orrs	r2, r1
 80009f8:	621a      	str	r2, [r3, #32]
 80009fa:	e020      	b.n	8000a3e <GPIO_Init+0x392>
        }
        else {
            temp = (pGPIOHandle->config.af << (4 * (pGPIOHandle->config.pin - 8)));
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	699a      	ldr	r2, [r3, #24]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	3b08      	subs	r3, #8
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	60fb      	str	r3, [r7, #12]
            pGPIOHandle->port->AFR[1] &= ~(0x0F << (4 * (pGPIOHandle->config.pin - 8))); // Clear the bits
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	3b08      	subs	r3, #8
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	210f      	movs	r1, #15
 8000a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	4619      	mov	r1, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	400a      	ands	r2, r1
 8000a2c:	625a      	str	r2, [r3, #36]	@ 0x24
            pGPIOHandle->port->AFR[1] |= temp;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }
    temp = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
}
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40013800 	.word	0x40013800
 8000a58:	40013c00 	.word	0x40013c00

08000a5c <GPIO_IRQConfig>:

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
    pGPIOx->ODR ^= (1 << PinNumber);
}

void GPIO_IRQConfig (uint8_t IRQNumber, uint8_t EnorDi) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	460a      	mov	r2, r1
 8000a66:	71fb      	strb	r3, [r7, #7]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	71bb      	strb	r3, [r7, #6]
    if (EnorDi == ENABLE) {
 8000a6c:	79bb      	ldrb	r3, [r7, #6]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d133      	bne.n	8000ada <GPIO_IRQConfig+0x7e>
        if (IRQNumber <= 31) {
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b1f      	cmp	r3, #31
 8000a76:	d80a      	bhi.n	8000a8e <GPIO_IRQConfig+0x32>
            // Program ISER0 register
            *NVIC_ISER0 |= (1 << IRQNumber);
 8000a78:	4b35      	ldr	r3, [pc, #212]	@ (8000b50 <GPIO_IRQConfig+0xf4>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	79fa      	ldrb	r2, [r7, #7]
 8000a7e:	2101      	movs	r1, #1
 8000a80:	fa01 f202 	lsl.w	r2, r1, r2
 8000a84:	4611      	mov	r1, r2
 8000a86:	4a32      	ldr	r2, [pc, #200]	@ (8000b50 <GPIO_IRQConfig+0xf4>)
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	6013      	str	r3, [r2, #0]
        else if (IRQNumber >= 64 && IRQNumber < 96) {
            // Program ICER2 register
            *NVIC_ICER2 |= (1 << (IRQNumber % 64));
        }
    }
}
 8000a8c:	e059      	b.n	8000b42 <GPIO_IRQConfig+0xe6>
        else if (IRQNumber > 31 && IRQNumber < 64) {
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b1f      	cmp	r3, #31
 8000a92:	d90f      	bls.n	8000ab4 <GPIO_IRQConfig+0x58>
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a98:	d80c      	bhi.n	8000ab4 <GPIO_IRQConfig+0x58>
            *NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b54 <GPIO_IRQConfig+0xf8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	79fa      	ldrb	r2, [r7, #7]
 8000aa0:	f002 021f 	and.w	r2, r2, #31
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4a29      	ldr	r2, [pc, #164]	@ (8000b54 <GPIO_IRQConfig+0xf8>)
 8000aae:	430b      	orrs	r3, r1
 8000ab0:	6013      	str	r3, [r2, #0]
 8000ab2:	e046      	b.n	8000b42 <GPIO_IRQConfig+0xe6>
        else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ab8:	d943      	bls.n	8000b42 <GPIO_IRQConfig+0xe6>
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b5f      	cmp	r3, #95	@ 0x5f
 8000abe:	d840      	bhi.n	8000b42 <GPIO_IRQConfig+0xe6>
            *NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000ac0:	4b25      	ldr	r3, [pc, #148]	@ (8000b58 <GPIO_IRQConfig+0xfc>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000aca:	2101      	movs	r1, #1
 8000acc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4a21      	ldr	r2, [pc, #132]	@ (8000b58 <GPIO_IRQConfig+0xfc>)
 8000ad4:	430b      	orrs	r3, r1
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	e033      	b.n	8000b42 <GPIO_IRQConfig+0xe6>
        if (IRQNumber <= 31) {
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b1f      	cmp	r3, #31
 8000ade:	d80a      	bhi.n	8000af6 <GPIO_IRQConfig+0x9a>
            *NVIC_ICER0 |= (1 << IRQNumber);
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <GPIO_IRQConfig+0x100>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	79fa      	ldrb	r2, [r7, #7]
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8000aec:	4611      	mov	r1, r2
 8000aee:	4a1b      	ldr	r2, [pc, #108]	@ (8000b5c <GPIO_IRQConfig+0x100>)
 8000af0:	430b      	orrs	r3, r1
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	e025      	b.n	8000b42 <GPIO_IRQConfig+0xe6>
        else if (IRQNumber > 31 && IRQNumber < 64) {
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b1f      	cmp	r3, #31
 8000afa:	d90f      	bls.n	8000b1c <GPIO_IRQConfig+0xc0>
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b00:	d80c      	bhi.n	8000b1c <GPIO_IRQConfig+0xc0>
            *NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <GPIO_IRQConfig+0x104>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	79fa      	ldrb	r2, [r7, #7]
 8000b08:	f002 021f 	and.w	r2, r2, #31
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b12:	4611      	mov	r1, r2
 8000b14:	4a12      	ldr	r2, [pc, #72]	@ (8000b60 <GPIO_IRQConfig+0x104>)
 8000b16:	430b      	orrs	r3, r1
 8000b18:	6013      	str	r3, [r2, #0]
 8000b1a:	e012      	b.n	8000b42 <GPIO_IRQConfig+0xe6>
        else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b20:	d90f      	bls.n	8000b42 <GPIO_IRQConfig+0xe6>
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b5f      	cmp	r3, #95	@ 0x5f
 8000b26:	d80c      	bhi.n	8000b42 <GPIO_IRQConfig+0xe6>
            *NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000b28:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <GPIO_IRQConfig+0x108>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	79fa      	ldrb	r2, [r7, #7]
 8000b2e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000b32:	2101      	movs	r1, #1
 8000b34:	fa01 f202 	lsl.w	r2, r1, r2
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <GPIO_IRQConfig+0x108>)
 8000b3c:	430b      	orrs	r3, r1
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	e7ff      	b.n	8000b42 <GPIO_IRQConfig+0xe6>
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000e104 	.word	0xe000e104
 8000b58:	e000e108 	.word	0xe000e108
 8000b5c:	e000e180 	.word	0xe000e180
 8000b60:	e000e184 	.word	0xe000e184
 8000b64:	e000e188 	.word	0xe000e188

08000b68 <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
    // Calculate the priority group
    uint8_t iprx = IRQNumber / 4;
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	73fb      	strb	r3, [r7, #15]
    uint8_t iprx_section = IRQNumber % 4;
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 0303 	and.w	r3, r3, #3
 8000b80:	73bb      	strb	r3, [r7, #14]
    uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000b82:	7bbb      	ldrb	r3, [r7, #14]
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	3304      	adds	r3, #4
 8000b8a:	737b      	strb	r3, [r7, #13]
    *(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000b94:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000b98:	6819      	ldr	r1, [r3, #0]
 8000b9a:	7b7b      	ldrb	r3, [r7, #13]
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	409a      	lsls	r2, r3
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000ba8:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000bac:	430a      	orrs	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <TIM_Init>:
 */

#include "stm32f429i.h"
#include "stm32f429i_timer_driver.h"

void TIM_Init(TIM_Handle_t *pTIMHandle) {
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
    // Enable the peripheral clock for the timer

    // Configure the timer
    pTIMHandle->pTIMx->PSC = pTIMHandle->config.prescaler - 1; // Set prescaler
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	629a      	str	r2, [r3, #40]	@ 0x28
    pTIMHandle->pTIMx->ARR = pTIMHandle->config.period - 1;    // Set auto-reload value
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	689a      	ldr	r2, [r3, #8]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3a01      	subs	r2, #1
 8000bda:	62da      	str	r2, [r3, #44]	@ 0x2c
    pTIMHandle->pTIMx->CR[0] = (pTIMHandle->config.mode << 4); // Set mode
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	68da      	ldr	r2, [r3, #12]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	601a      	str	r2, [r3, #0]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <TIM_Start>:

void TIM_SetPrescaler(TIM_Handle_t *pTIMHandle, uint32_t prescaler) {
    pTIMHandle->pTIMx->PSC = prescaler - 1; // Set prescaler
}

void TIM_Start(TIM_Handle_t *pTIMHandle) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
    pTIMHandle->pTIMx->CR[0] |= (1 << 0); // Enable the timer
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f042 0201 	orr.w	r2, r2, #1
 8000c0a:	601a      	str	r2, [r3, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <TIM_SetupChannel>:

void TIM_Stop(TIM_Handle_t *pTIMHandle) {
    pTIMHandle->pTIMx->CR[0] &= ~(1 << 0); // Disable the timer
}

void TIM_SetupChannel(TIM_Handle_t *pTIMHandle, uint32_t channel) {
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
    uint8_t temp1 = channel / 2;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	085b      	lsrs	r3, r3, #1
 8000c26:	73fb      	strb	r3, [r7, #15]
    uint8_t temp2 = channel % 2;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	73bb      	strb	r3, [r7, #14]
    // Configure the channel
    pTIMHandle->pTIMx->CCMR[temp1] &= ~(0x03 << (4 * temp2)); // Clear the bits
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	7bfa      	ldrb	r2, [r7, #15]
 8000c38:	3206      	adds	r2, #6
 8000c3a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c3e:	7bbb      	ldrb	r3, [r7, #14]
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	2203      	movs	r2, #3
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	7bfa      	ldrb	r2, [r7, #15]
 8000c52:	4001      	ands	r1, r0
 8000c54:	3206      	adds	r2, #6
 8000c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pTIMHandle->pTIMx->CCMR[temp1] |= (pTIMHandle->config.channelConfig[channel].ccm << temp2); // Set Capture/Compare mode
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	7bfa      	ldrb	r2, [r7, #15]
 8000c60:	3206      	adds	r2, #6
 8000c62:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	683a      	ldr	r2, [r7, #0]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	440b      	add	r3, r1
 8000c74:	3314      	adds	r3, #20
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	7bbb      	ldrb	r3, [r7, #14]
 8000c7a:	fa02 f103 	lsl.w	r1, r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	7bfa      	ldrb	r2, [r7, #15]
 8000c84:	4301      	orrs	r1, r0
 8000c86:	3206      	adds	r2, #6
 8000c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pTIMHandle->pTIMx->CCER &= ~(0x06 << (4 * channel)); // Clear the CCxP bits
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6a1a      	ldr	r2, [r3, #32]
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	2106      	movs	r1, #6
 8000c98:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	400a      	ands	r2, r1
 8000ca6:	621a      	str	r2, [r3, #32]
    uint32_t tmp = (pTIMHandle->config.channelConfig[channel].ic_mode);
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	4613      	mov	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	3318      	adds	r3, #24
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	60bb      	str	r3, [r7, #8]
    pTIMHandle->pTIMx->CCER |= (pTIMHandle->config.channelConfig[channel].ic_mode); // Set Input Capture mode
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	6a19      	ldr	r1, [r3, #32]
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	4413      	add	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4403      	add	r3, r0
 8000cd0:	3318      	adds	r3, #24
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	621a      	str	r2, [r3, #32]
    pTIMHandle->pTIMx->CCER |= (1 << (4 * channel)); // Enable the channel
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	6a1a      	ldr	r2, [r3, #32]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cec:	4619      	mov	r1, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	621a      	str	r2, [r3, #32]
}
 8000cf6:	bf00      	nop
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <TIM_EnableInterrupt>:
//         pTIMHandle->pTIMx->SR &= ~TIM_FLAG_CC1IF;
//         // Handle the interrupt (e.g., read captured value)
//     }
// }

void TIM_EnableInterrupt(TIM_Handle_t *pTIMHandle, uint32_t channel) {
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	6039      	str	r1, [r7, #0]
    pTIMHandle->pTIMx->DIER |= (1 << (channel + 1)); // Enable interrupt for the specified channel
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68da      	ldr	r2, [r3, #12]
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	3301      	adds	r3, #1
 8000d16:	2101      	movs	r1, #1
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	430a      	orrs	r2, r1
 8000d24:	60da      	str	r2, [r3, #12]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d34:	480d      	ldr	r0, [pc, #52]	@ (8000d6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d36:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d38:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d3c:	480c      	ldr	r0, [pc, #48]	@ (8000d70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d3e:	490d      	ldr	r1, [pc, #52]	@ (8000d74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d40:	4a0d      	ldr	r2, [pc, #52]	@ (8000d78 <LoopForever+0xe>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d54:	4c0a      	ldr	r4, [pc, #40]	@ (8000d80 <LoopForever+0x16>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d62:	f000 f811 	bl	8000d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d66:	f7ff fc85 	bl	8000674 <main>

08000d6a <LoopForever>:

LoopForever:
  b LoopForever
 8000d6a:	e7fe      	b.n	8000d6a <LoopForever>
  ldr   r0, =_estack
 8000d6c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d74:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d78:	08000df0 	.word	0x08000df0
  ldr r2, =_sbss
 8000d7c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d80:	20000034 	.word	0x20000034

08000d84 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC_IRQHandler>
	...

08000d88 <__libc_init_array>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	4d0d      	ldr	r5, [pc, #52]	@ (8000dc0 <__libc_init_array+0x38>)
 8000d8c:	4c0d      	ldr	r4, [pc, #52]	@ (8000dc4 <__libc_init_array+0x3c>)
 8000d8e:	1b64      	subs	r4, r4, r5
 8000d90:	10a4      	asrs	r4, r4, #2
 8000d92:	2600      	movs	r6, #0
 8000d94:	42a6      	cmp	r6, r4
 8000d96:	d109      	bne.n	8000dac <__libc_init_array+0x24>
 8000d98:	4d0b      	ldr	r5, [pc, #44]	@ (8000dc8 <__libc_init_array+0x40>)
 8000d9a:	4c0c      	ldr	r4, [pc, #48]	@ (8000dcc <__libc_init_array+0x44>)
 8000d9c:	f000 f818 	bl	8000dd0 <_init>
 8000da0:	1b64      	subs	r4, r4, r5
 8000da2:	10a4      	asrs	r4, r4, #2
 8000da4:	2600      	movs	r6, #0
 8000da6:	42a6      	cmp	r6, r4
 8000da8:	d105      	bne.n	8000db6 <__libc_init_array+0x2e>
 8000daa:	bd70      	pop	{r4, r5, r6, pc}
 8000dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8000db0:	4798      	blx	r3
 8000db2:	3601      	adds	r6, #1
 8000db4:	e7ee      	b.n	8000d94 <__libc_init_array+0xc>
 8000db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dba:	4798      	blx	r3
 8000dbc:	3601      	adds	r6, #1
 8000dbe:	e7f2      	b.n	8000da6 <__libc_init_array+0x1e>
 8000dc0:	08000de8 	.word	0x08000de8
 8000dc4:	08000de8 	.word	0x08000de8
 8000dc8:	08000de8 	.word	0x08000de8
 8000dcc:	08000dec 	.word	0x08000dec

08000dd0 <_init>:
 8000dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dd2:	bf00      	nop
 8000dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dd6:	bc08      	pop	{r3}
 8000dd8:	469e      	mov	lr, r3
 8000dda:	4770      	bx	lr

08000ddc <_fini>:
 8000ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dde:	bf00      	nop
 8000de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de2:	bc08      	pop	{r3}
 8000de4:	469e      	mov	lr, r3
 8000de6:	4770      	bx	lr
