
morse-code-converter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cac  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e58  08000e60  00001e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e58  08000e58  00001e60  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000e58  08000e58  00001e60  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000e58  08000e60  00001e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e58  08000e58  00001e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e5c  08000e5c  00001e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001e60  2**0
                  CONTENTS
 10 .bss          00000028  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012a0  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003df  00000000  00000000  00003130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00003510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000da  00000000  00000000  00003640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000197b  00000000  00000000  0000371a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000168c  00000000  00000000  00005095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005988  00000000  00000000  00006721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000c0a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003d0  00000000  00000000  0000c0ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0000c4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000e40 	.word	0x08000e40

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000e40 	.word	0x08000e40

080001ec <GPIO_InitConfig>:
#endif

char morse_input[6] = {0}; // Variable to store the Morse code input
int morse_index = 0; // Index for the Morse code input

void GPIO_InitConfig(GPIO_Handle_t *GpioBtn, GPIO_Handle_t *GpioLED1, GPIO_Handle_t *GpioLED2) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	60f8      	str	r0, [r7, #12]
 80001f4:	60b9      	str	r1, [r7, #8]
 80001f6:	607a      	str	r2, [r7, #4]
	GPIOA_PCLK_EN();
 80001f8:	4b24      	ldr	r3, [pc, #144]	@ (800028c <GPIO_InitConfig+0xa0>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fc:	4a23      	ldr	r2, [pc, #140]	@ (800028c <GPIO_InitConfig+0xa0>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6313      	str	r3, [r2, #48]	@ 0x30
    // Initialize GPIOA as alternate function mode for TIM2_CH1
	GpioBtn->port = GPIOA;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	4a22      	ldr	r2, [pc, #136]	@ (8000290 <GPIO_InitConfig+0xa4>)
 8000208:	601a      	str	r2, [r3, #0]
	GpioBtn->config.pin = 0;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	2200      	movs	r2, #0
 800020e:	605a      	str	r2, [r3, #4]
	GpioBtn->config.mode = GPIO_MODE_IT_RFT; // Interrupt mode
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	2206      	movs	r2, #6
 8000214:	609a      	str	r2, [r3, #8]
	GpioBtn->config.otype = GPIO_OTYPE_PP; // Push-pull
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	2200      	movs	r2, #0
 800021a:	60da      	str	r2, [r3, #12]
	GpioBtn->config.ospeed = GPIO_OSPEED_LOW; // Fast speed
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	2200      	movs	r2, #0
 8000220:	611a      	str	r2, [r3, #16]
	GpioBtn->config.pupd = GPIO_PUPD_NONE; // Pull-up
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	2200      	movs	r2, #0
 8000226:	615a      	str	r2, [r3, #20]
	GPIO_Init(GpioBtn);
 8000228:	68f8      	ldr	r0, [r7, #12]
 800022a:	f000 fabb 	bl	80007a4 <GPIO_Init>

    // 初始化 GPIO2 和 GPIO3 為輸出模式
    GpioLED1->port = GPIOA;
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	4a17      	ldr	r2, [pc, #92]	@ (8000290 <GPIO_InitConfig+0xa4>)
 8000232:	601a      	str	r2, [r3, #0]
    GpioLED1->config.pin = 4; // GPIO2
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	2204      	movs	r2, #4
 8000238:	605a      	str	r2, [r3, #4]
    GpioLED1->config.mode = GPIO_MODE_OUTPUT;
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	2201      	movs	r2, #1
 800023e:	609a      	str	r2, [r3, #8]
    GpioLED1->config.otype = GPIO_OTYPE_PP;
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	2200      	movs	r2, #0
 8000244:	60da      	str	r2, [r3, #12]
    GpioLED1->config.ospeed = GPIO_OSPEED_LOW;
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	2200      	movs	r2, #0
 800024a:	611a      	str	r2, [r3, #16]
	GpioLED1->config.pupd = GPIO_PUPD_NONE;
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	2200      	movs	r2, #0
 8000250:	615a      	str	r2, [r3, #20]
    GPIO_Init(GpioLED1);
 8000252:	68b8      	ldr	r0, [r7, #8]
 8000254:	f000 faa6 	bl	80007a4 <GPIO_Init>

    GpioLED2->port = GPIOA;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a0d      	ldr	r2, [pc, #52]	@ (8000290 <GPIO_InitConfig+0xa4>)
 800025c:	601a      	str	r2, [r3, #0]
    GpioLED2->config.pin = 5; // GPIO3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2205      	movs	r2, #5
 8000262:	605a      	str	r2, [r3, #4]
    GpioLED2->config.mode = GPIO_MODE_OUTPUT;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2201      	movs	r2, #1
 8000268:	609a      	str	r2, [r3, #8]
    GpioLED2->config.otype = GPIO_OTYPE_PP;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2200      	movs	r2, #0
 800026e:	60da      	str	r2, [r3, #12]
    GpioLED2->config.ospeed = GPIO_OSPEED_LOW;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2200      	movs	r2, #0
 8000274:	611a      	str	r2, [r3, #16]
    GpioLED2->config.pupd = GPIO_PUPD_NONE;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2200      	movs	r2, #0
 800027a:	615a      	str	r2, [r3, #20]
    GPIO_Init(GpioLED2);
 800027c:	6878      	ldr	r0, [r7, #4]
 800027e:	f000 fa91 	bl	80007a4 <GPIO_Init>
}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40023800 	.word	0x40023800
 8000290:	40020000 	.word	0x40020000

08000294 <TIM_Config>:

// TIM2 configuration
void TIM_Config(TIM_Handle_t *TIMBtn, TIM_Handle_t *TIMLED1, TIM_Handle_t *TIMLED2) {
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	60f8      	str	r0, [r7, #12]
 800029c:	60b9      	str	r1, [r7, #8]
 800029e:	607a      	str	r2, [r7, #4]
	// Initialize TIM2 for LED1
	TIMBtn->pTIMx = TIM2;
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002a6:	601a      	str	r2, [r3, #0]
	TIM2->ARR = 600;
 80002a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ac:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80002b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->PSC = 16000 - 1; // Prescaler value
 80002b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b6:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80002ba:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->CR[0] = 0; // Timer mode (up)
 80002bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
	TIM2_PCLK_EN();
 80002c4:	4b30      	ldr	r3, [pc, #192]	@ (8000388 <TIM_Config+0xf4>)
 80002c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002c8:	4a2f      	ldr	r2, [pc, #188]	@ (8000388 <TIM_Config+0xf4>)
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	6413      	str	r3, [r2, #64]	@ 0x40

	// Initialize TIM3 for LED1
	TIMLED1->pTIMx = TIM3;
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	4a2e      	ldr	r2, [pc, #184]	@ (800038c <TIM_Config+0xf8>)
 80002d4:	601a      	str	r2, [r3, #0]
	TIM3->ARR = 600;
 80002d6:	4b2d      	ldr	r3, [pc, #180]	@ (800038c <TIM_Config+0xf8>)
 80002d8:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80002dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->PSC = 16000 - 1; // Prescaler value
 80002de:	4b2b      	ldr	r3, [pc, #172]	@ (800038c <TIM_Config+0xf8>)
 80002e0:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80002e4:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->CR[0] = 0; // Timer mode (up)
 80002e6:	4b29      	ldr	r3, [pc, #164]	@ (800038c <TIM_Config+0xf8>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
	TIM3_PCLK_EN();
 80002ec:	4b26      	ldr	r3, [pc, #152]	@ (8000388 <TIM_Config+0xf4>)
 80002ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002f0:	4a25      	ldr	r2, [pc, #148]	@ (8000388 <TIM_Config+0xf4>)
 80002f2:	f043 0302 	orr.w	r3, r3, #2
 80002f6:	6413      	str	r3, [r2, #64]	@ 0x40

	// Initialize TIM4 for LED2
	TIMLED2->pTIMx = TIM4;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a25      	ldr	r2, [pc, #148]	@ (8000390 <TIM_Config+0xfc>)
 80002fc:	601a      	str	r2, [r3, #0]
	TIMLED2->config.prescaler = 16000; // Prescaler value
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000304:	605a      	str	r2, [r3, #4]
	TIMLED2->config.period = 1200; // Auto-reload value
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800030c:	609a      	str	r2, [r3, #8]
	TIMLED2->config.mode = 0;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
	TIM4_PCLK_EN();
 8000314:	4b1c      	ldr	r3, [pc, #112]	@ (8000388 <TIM_Config+0xf4>)
 8000316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000318:	4a1b      	ldr	r2, [pc, #108]	@ (8000388 <TIM_Config+0xf4>)
 800031a:	f043 0304 	orr.w	r3, r3, #4
 800031e:	6413      	str	r3, [r2, #64]	@ 0x40

	TIMBtn->pTIMx->DIER |= (1 << 0); // Enable interrupt for TIM2
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	68da      	ldr	r2, [r3, #12]
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f042 0201 	orr.w	r2, r2, #1
 800032e:	60da      	str	r2, [r3, #12]
	TIMLED1->pTIMx->DIER |= (1 << 0); // Enable interrupt for TIM3
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	68da      	ldr	r2, [r3, #12]
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f042 0201 	orr.w	r2, r2, #1
 800033e:	60da      	str	r2, [r3, #12]
	TIMLED2->pTIMx->DIER |= (1 << 0); // Enable interrupt for TIM4
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	68da      	ldr	r2, [r3, #12]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f042 0201 	orr.w	r2, r2, #1
 800034e:	60da      	str	r2, [r3, #12]
	GPIO_IRQPriorityConfig(IRQ_NO_TIM2, NVIC_IRQ_PRI0); // Set TIM2 interrupt priority
 8000350:	2100      	movs	r1, #0
 8000352:	201c      	movs	r0, #28
 8000354:	f000 fc84 	bl	8000c60 <GPIO_IRQPriorityConfig>
	GPIO_IRQPriorityConfig(IRQ_NO_TIM3, NVIC_IRQ_PRI1); // Set TIM3 interrupt priority
 8000358:	2101      	movs	r1, #1
 800035a:	201d      	movs	r0, #29
 800035c:	f000 fc80 	bl	8000c60 <GPIO_IRQPriorityConfig>
	GPIO_IRQPriorityConfig(IRQ_NO_TIM4, NVIC_IRQ_PRI2); // Set TIM4 interrupt priority
 8000360:	2102      	movs	r1, #2
 8000362:	201e      	movs	r0, #30
 8000364:	f000 fc7c 	bl	8000c60 <GPIO_IRQPriorityConfig>
	GPIO_IRQConfig(IRQ_NO_TIM2, ENABLE); // Enable TIM2 interrupt in NVIC
 8000368:	2101      	movs	r1, #1
 800036a:	201c      	movs	r0, #28
 800036c:	f000 fbf2 	bl	8000b54 <GPIO_IRQConfig>
	GPIO_IRQConfig(IRQ_NO_TIM3, ENABLE); // Enable TIM3 interrupt in NVIC
 8000370:	2101      	movs	r1, #1
 8000372:	201d      	movs	r0, #29
 8000374:	f000 fbee 	bl	8000b54 <GPIO_IRQConfig>
	GPIO_IRQConfig(IRQ_NO_TIM4, ENABLE); // Enable TIM4 interrupt in NVIC
 8000378:	2101      	movs	r1, #1
 800037a:	201e      	movs	r0, #30
 800037c:	f000 fbea 	bl	8000b54 <GPIO_IRQConfig>
}
 8000380:	bf00      	nop
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40023800 	.word	0x40023800
 800038c:	40000400 	.word	0x40000400
 8000390:	40000800 	.word	0x40000800

08000394 <Timer2_StartCountdown>:

void Timer2_StartCountdown(uint32_t milliseconds) {
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	TIM2->CR[0] &= ~(1 << 0);        // 確保 Timer 先停住
 800039c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003a6:	f023 0301 	bic.w	r3, r3, #1
 80003aa:	6013      	str	r3, [r2, #0]
	TIM2->CR[0] |= (1 << 2);
 80003ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003b6:	f043 0304 	orr.w	r3, r3, #4
 80003ba:	6013      	str	r3, [r2, #0]
	TIM2->PSC = 16000 - 1;         // 設定 Prescaler
 80003bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c0:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80003c4:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = milliseconds - 1;    // 設定 ARR
 80003c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	3b01      	subs	r3, #1
 80003ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM2->CNT = 0;                   // 重設計數器
 80003d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003d4:	2200      	movs	r2, #0
 80003d6:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->EGR |= (1 << 0);
 80003d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003e2:	f043 0301 	orr.w	r3, r3, #1
 80003e6:	6153      	str	r3, [r2, #20]
	TIM2->SR &= ~TIM_FLAG_UIF;       // 清除中斷旗標
 80003e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ec:	691b      	ldr	r3, [r3, #16]
 80003ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003f2:	f023 0301 	bic.w	r3, r3, #1
 80003f6:	6113      	str	r3, [r2, #16]
	TIM2->CR[0] |= (1 << 0);         // 啟動 Timer
 80003f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000402:	f043 0301 	orr.w	r3, r3, #1
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <Timer3_StartCountdown>:

void Timer3_StartCountdown(uint32_t milliseconds) {
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
    TIM3->CR[0] &= ~(1 << 0);        // 確保 Timer 先停住
 800041c:	4b17      	ldr	r3, [pc, #92]	@ (800047c <Timer3_StartCountdown+0x68>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a16      	ldr	r2, [pc, #88]	@ (800047c <Timer3_StartCountdown+0x68>)
 8000422:	f023 0301 	bic.w	r3, r3, #1
 8000426:	6013      	str	r3, [r2, #0]
    TIM3->CR[0] |= (1 << 2);
 8000428:	4b14      	ldr	r3, [pc, #80]	@ (800047c <Timer3_StartCountdown+0x68>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a13      	ldr	r2, [pc, #76]	@ (800047c <Timer3_StartCountdown+0x68>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6013      	str	r3, [r2, #0]
	TIM3->PSC = 16000 - 1;         // 設定 Prescaler
 8000434:	4b11      	ldr	r3, [pc, #68]	@ (800047c <Timer3_StartCountdown+0x68>)
 8000436:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800043a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = milliseconds - 1;    // 設定 ARR
 800043c:	4a0f      	ldr	r2, [pc, #60]	@ (800047c <Timer3_StartCountdown+0x68>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	3b01      	subs	r3, #1
 8000442:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM3->CNT = 0;                   // 重設計數器
 8000444:	4b0d      	ldr	r3, [pc, #52]	@ (800047c <Timer3_StartCountdown+0x68>)
 8000446:	2200      	movs	r2, #0
 8000448:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->EGR |= (1 << 0);
 800044a:	4b0c      	ldr	r3, [pc, #48]	@ (800047c <Timer3_StartCountdown+0x68>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a0b      	ldr	r2, [pc, #44]	@ (800047c <Timer3_StartCountdown+0x68>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6153      	str	r3, [r2, #20]
    TIM3->SR &= ~TIM_FLAG_UIF;       // 清除中斷旗標
 8000456:	4b09      	ldr	r3, [pc, #36]	@ (800047c <Timer3_StartCountdown+0x68>)
 8000458:	691b      	ldr	r3, [r3, #16]
 800045a:	4a08      	ldr	r2, [pc, #32]	@ (800047c <Timer3_StartCountdown+0x68>)
 800045c:	f023 0301 	bic.w	r3, r3, #1
 8000460:	6113      	str	r3, [r2, #16]
    TIM3->CR[0] |= (1 << 0);         // 啟動 Timer
 8000462:	4b06      	ldr	r3, [pc, #24]	@ (800047c <Timer3_StartCountdown+0x68>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a05      	ldr	r2, [pc, #20]	@ (800047c <Timer3_StartCountdown+0x68>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6013      	str	r3, [r2, #0]
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40000400 	.word	0x40000400

08000480 <Timer4_StartCountdown>:

void Timer4_StartCountdown(uint32_t milliseconds) {
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	TIM4->CR[0] &= ~(1 << 0); // 確保 Timer 先停住
 8000488:	4b17      	ldr	r3, [pc, #92]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a16      	ldr	r2, [pc, #88]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 800048e:	f023 0301 	bic.w	r3, r3, #1
 8000492:	6013      	str	r3, [r2, #0]
	TIM4->CR[0] |= (1 << 2);
 8000494:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a13      	ldr	r2, [pc, #76]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 800049a:	f043 0304 	orr.w	r3, r3, #4
 800049e:	6013      	str	r3, [r2, #0]
	TIM4->PSC = 16000 - 1; // 設定 Prescaler
 80004a0:	4b11      	ldr	r3, [pc, #68]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 80004a2:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80004a6:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = milliseconds - 1;
 80004a8:	4a0f      	ldr	r2, [pc, #60]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	3b01      	subs	r3, #1
 80004ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM4->CNT = 0;
 80004b0:	4b0d      	ldr	r3, [pc, #52]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->EGR |= (1 << 0); // 更新計數器
 80004b6:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a0b      	ldr	r2, [pc, #44]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6153      	str	r3, [r2, #20]
	TIM4->SR &= ~TIM_FLAG_UIF; // 清除 update flag
 80004c2:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 80004c4:	691b      	ldr	r3, [r3, #16]
 80004c6:	4a08      	ldr	r2, [pc, #32]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 80004c8:	f023 0301 	bic.w	r3, r3, #1
 80004cc:	6113      	str	r3, [r2, #16]
	TIM4->CR[0] |= (1 << 0); // 啟動 Timer
 80004ce:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a05      	ldr	r2, [pc, #20]	@ (80004e8 <Timer4_StartCountdown+0x68>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6013      	str	r3, [r2, #0]
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40000800 	.word	0x40000800

080004ec <Timer2_Stop>:

void Timer2_Stop(void) {
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
	TIM2->CR[0] &= ~(1 << 0); // 停止計數
 80004f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004fa:	f023 0301 	bic.w	r3, r3, #1
 80004fe:	6013      	str	r3, [r2, #0]
	TIM2->CNT = 0;
 8000500:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000504:	2200      	movs	r2, #0
 8000506:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->SR &= ~TIM_FLAG_UIF;   // 清除旗標
 8000508:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800050c:	691b      	ldr	r3, [r3, #16]
 800050e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000512:	f023 0301 	bic.w	r3, r3, #1
 8000516:	6113      	str	r3, [r2, #16]
	GPIOA->ODR &= ~(1 << 4); // Reset GPIO1
 8000518:	4b05      	ldr	r3, [pc, #20]	@ (8000530 <Timer2_Stop+0x44>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	4a04      	ldr	r2, [pc, #16]	@ (8000530 <Timer2_Stop+0x44>)
 800051e:	f023 0310 	bic.w	r3, r3, #16
 8000522:	6153      	str	r3, [r2, #20]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40020000 	.word	0x40020000

08000534 <Timer3_Stop>:

void Timer3_Stop(void) {
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
    TIM3->CR[0] &= ~(1 << 0); // 停止計數
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <Timer3_Stop+0x38>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a0b      	ldr	r2, [pc, #44]	@ (800056c <Timer3_Stop+0x38>)
 800053e:	f023 0301 	bic.w	r3, r3, #1
 8000542:	6013      	str	r3, [r2, #0]
    TIM3->CNT = 0;
 8000544:	4b09      	ldr	r3, [pc, #36]	@ (800056c <Timer3_Stop+0x38>)
 8000546:	2200      	movs	r2, #0
 8000548:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM3->SR &= ~TIM_FLAG_UIF;   // 清除旗標
 800054a:	4b08      	ldr	r3, [pc, #32]	@ (800056c <Timer3_Stop+0x38>)
 800054c:	691b      	ldr	r3, [r3, #16]
 800054e:	4a07      	ldr	r2, [pc, #28]	@ (800056c <Timer3_Stop+0x38>)
 8000550:	f023 0301 	bic.w	r3, r3, #1
 8000554:	6113      	str	r3, [r2, #16]
	GPIOA->ODR &= ~(1 << 4); // Reset GPIO2
 8000556:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <Timer3_Stop+0x3c>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a05      	ldr	r2, [pc, #20]	@ (8000570 <Timer3_Stop+0x3c>)
 800055c:	f023 0310 	bic.w	r3, r3, #16
 8000560:	6153      	str	r3, [r2, #20]
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	40000400 	.word	0x40000400
 8000570:	40020000 	.word	0x40020000

08000574 <Timer4_Stop>:

void Timer4_Stop(void) {
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	TIM4->CR[0] &= ~(1 << 0); // 停止計數
 8000578:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <Timer4_Stop+0x38>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a0b      	ldr	r2, [pc, #44]	@ (80005ac <Timer4_Stop+0x38>)
 800057e:	f023 0301 	bic.w	r3, r3, #1
 8000582:	6013      	str	r3, [r2, #0]
	TIM4->CNT = 0;
 8000584:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <Timer4_Stop+0x38>)
 8000586:	2200      	movs	r2, #0
 8000588:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->SR &= ~TIM_FLAG_UIF;   // 清除旗標
 800058a:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <Timer4_Stop+0x38>)
 800058c:	691b      	ldr	r3, [r3, #16]
 800058e:	4a07      	ldr	r2, [pc, #28]	@ (80005ac <Timer4_Stop+0x38>)
 8000590:	f023 0301 	bic.w	r3, r3, #1
 8000594:	6113      	str	r3, [r2, #16]
	GPIOA->ODR &= ~(1 << 5); // Reset GPIO2
 8000596:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <Timer4_Stop+0x3c>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a05      	ldr	r2, [pc, #20]	@ (80005b0 <Timer4_Stop+0x3c>)
 800059c:	f023 0320 	bic.w	r3, r3, #32
 80005a0:	6153      	str	r3, [r2, #20]
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	40000800 	.word	0x40000800
 80005b0:	40020000 	.word	0x40020000

080005b4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(0);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 fb7a 	bl	8000cb4 <GPIO_IRQHandling>
	 	if (GPIOA->IDR & (1 << 0)) { // Check if the button is pressed
 80005c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000670 <EXTI0_IRQHandler+0xbc>)
 80005c2:	691b      	ldr	r3, [r3, #16]
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d044      	beq.n	8000656 <EXTI0_IRQHandler+0xa2>
	 		if (morse_index < 6) {
 80005cc:	4b29      	ldr	r3, [pc, #164]	@ (8000674 <EXTI0_IRQHandler+0xc0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b05      	cmp	r3, #5
 80005d2:	dc24      	bgt.n	800061e <EXTI0_IRQHandler+0x6a>
	 			if (TIM2->SR & TIM_FLAG_UIF) {
 80005d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005d8:	691b      	ldr	r3, [r3, #16]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d012      	beq.n	8000608 <EXTI0_IRQHandler+0x54>
	 				morse_input[morse_index] = '-'; // Store the dash
 80005e2:	4b24      	ldr	r3, [pc, #144]	@ (8000674 <EXTI0_IRQHandler+0xc0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a24      	ldr	r2, [pc, #144]	@ (8000678 <EXTI0_IRQHandler+0xc4>)
 80005e8:	212d      	movs	r1, #45	@ 0x2d
 80005ea:	54d1      	strb	r1, [r2, r3]
	 				morse_index++;
 80005ec:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <EXTI0_IRQHandler+0xc0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	4a20      	ldr	r2, [pc, #128]	@ (8000674 <EXTI0_IRQHandler+0xc0>)
 80005f4:	6013      	str	r3, [r2, #0]
	 				TIM2->SR &= ~TIM_FLAG_UIF; // 清中斷旗標
 80005f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000600:	f023 0301 	bic.w	r3, r3, #1
 8000604:	6113      	str	r3, [r2, #16]
 8000606:	e01b      	b.n	8000640 <EXTI0_IRQHandler+0x8c>
	 			}
	 			else {
	 				morse_input[morse_index] = '.'; // Store the dot
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <EXTI0_IRQHandler+0xc0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a1a      	ldr	r2, [pc, #104]	@ (8000678 <EXTI0_IRQHandler+0xc4>)
 800060e:	212e      	movs	r1, #46	@ 0x2e
 8000610:	54d1      	strb	r1, [r2, r3]
	 				morse_index++;
 8000612:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <EXTI0_IRQHandler+0xc0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	4a16      	ldr	r2, [pc, #88]	@ (8000674 <EXTI0_IRQHandler+0xc0>)
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	e010      	b.n	8000640 <EXTI0_IRQHandler+0x8c>
	 			}
	 		}
	 		else {
	 			for (int i = 0; i < 6; i++) {
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	e007      	b.n	8000634 <EXTI0_IRQHandler+0x80>
	 				morse_input[i] = 0; // Reset the input
 8000624:	4a14      	ldr	r2, [pc, #80]	@ (8000678 <EXTI0_IRQHandler+0xc4>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
	 			for (int i = 0; i < 6; i++) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3301      	adds	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b05      	cmp	r3, #5
 8000638:	ddf4      	ble.n	8000624 <EXTI0_IRQHandler+0x70>
	 			}
	 			morse_index = 0;
 800063a:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <EXTI0_IRQHandler+0xc0>)
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
	 		}
	 		Timer2_Stop(); // Stop the countdown
 8000640:	f7ff ff54 	bl	80004ec <Timer2_Stop>
	 		Timer3_StartCountdown(600);
 8000644:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000648:	f7ff fee4 	bl	8000414 <Timer3_StartCountdown>
	 		Timer4_StartCountdown(1200);
 800064c:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8000650:	f7ff ff16 	bl	8000480 <Timer4_StartCountdown>
	 	else { // Check if the button is released
	 		Timer3_Stop();
	 		Timer4_Stop();
	 		Timer2_StartCountdown(600); //Start 600ms countdown to determine it's a short press or a long press
	 	}
     return;
 8000654:	e008      	b.n	8000668 <EXTI0_IRQHandler+0xb4>
	 		Timer3_Stop();
 8000656:	f7ff ff6d 	bl	8000534 <Timer3_Stop>
	 		Timer4_Stop();
 800065a:	f7ff ff8b 	bl	8000574 <Timer4_Stop>
	 		Timer2_StartCountdown(600); //Start 600ms countdown to determine it's a short press or a long press
 800065e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000662:	f7ff fe97 	bl	8000394 <Timer2_StartCountdown>
     return;
 8000666:	bf00      	nop
}
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40020000 	.word	0x40020000
 8000674:	20000024 	.word	0x20000024
 8000678:	2000001c 	.word	0x2000001c

0800067c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_FLAG_UIF) {
 8000680:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000684:	691b      	ldr	r3, [r3, #16]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	2b00      	cmp	r3, #0
 800068c:	d012      	beq.n	80006b4 <TIM2_IRQHandler+0x38>
		TIM2->CR[0] &= ~(1 << 0); // 停止計數
 800068e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000698:	f023 0301 	bic.w	r3, r3, #1
 800069c:	6013      	str	r3, [r2, #0]
    	TIM2->CNT = 0;
 800069e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	@ 0x24
        GPIOA->ODR |= (1 << 4); // Set GPIO3
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <TIM2_IRQHandler+0x44>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	4a05      	ldr	r2, [pc, #20]	@ (80006c0 <TIM2_IRQHandler+0x44>)
 80006ac:	f043 0310 	orr.w	r3, r3, #16
 80006b0:	6153      	str	r3, [r2, #20]
    }
    return;
 80006b2:	bf00      	nop
 80006b4:	bf00      	nop
}
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40020000 	.word	0x40020000

080006c4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_FLAG_UIF) {
 80006c8:	4b10      	ldr	r3, [pc, #64]	@ (800070c <TIM3_IRQHandler+0x48>)
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d015      	beq.n	8000700 <TIM3_IRQHandler+0x3c>
        TIM3->SR &= ~TIM_FLAG_UIF; // 清中斷旗標
 80006d4:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <TIM3_IRQHandler+0x48>)
 80006d6:	691b      	ldr	r3, [r3, #16]
 80006d8:	4a0c      	ldr	r2, [pc, #48]	@ (800070c <TIM3_IRQHandler+0x48>)
 80006da:	f023 0301 	bic.w	r3, r3, #1
 80006de:	6113      	str	r3, [r2, #16]
		TIM3->CR[0] &= ~(1 << 0); // 停止計數
 80006e0:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <TIM3_IRQHandler+0x48>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a09      	ldr	r2, [pc, #36]	@ (800070c <TIM3_IRQHandler+0x48>)
 80006e6:	f023 0301 	bic.w	r3, r3, #1
 80006ea:	6013      	str	r3, [r2, #0]
    	TIM3->CNT = 0;
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <TIM3_IRQHandler+0x48>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	@ 0x24
        GPIOA->ODR |= (1 << 4); // Set GPIO3
 80006f2:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <TIM3_IRQHandler+0x4c>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	4a06      	ldr	r2, [pc, #24]	@ (8000710 <TIM3_IRQHandler+0x4c>)
 80006f8:	f043 0310 	orr.w	r3, r3, #16
 80006fc:	6153      	str	r3, [r2, #20]
    }
    return;
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
}
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40000400 	.word	0x40000400
 8000710:	40020000 	.word	0x40020000

08000714 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_FLAG_UIF) {
 8000718:	4b10      	ldr	r3, [pc, #64]	@ (800075c <TIM4_IRQHandler+0x48>)
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	2b00      	cmp	r3, #0
 8000722:	d015      	beq.n	8000750 <TIM4_IRQHandler+0x3c>
        TIM4->SR &= ~TIM_FLAG_UIF; // 清中斷旗標
 8000724:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <TIM4_IRQHandler+0x48>)
 8000726:	691b      	ldr	r3, [r3, #16]
 8000728:	4a0c      	ldr	r2, [pc, #48]	@ (800075c <TIM4_IRQHandler+0x48>)
 800072a:	f023 0301 	bic.w	r3, r3, #1
 800072e:	6113      	str	r3, [r2, #16]
		TIM4->CR[0] &= ~(1 << 0); // 停止計數
 8000730:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <TIM4_IRQHandler+0x48>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a09      	ldr	r2, [pc, #36]	@ (800075c <TIM4_IRQHandler+0x48>)
 8000736:	f023 0301 	bic.w	r3, r3, #1
 800073a:	6013      	str	r3, [r2, #0]
    	TIM4->CNT = 0;
 800073c:	4b07      	ldr	r3, [pc, #28]	@ (800075c <TIM4_IRQHandler+0x48>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	@ 0x24
        GPIOA->ODR |= (1 << 5); // Set GPIO3
 8000742:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <TIM4_IRQHandler+0x4c>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	4a06      	ldr	r2, [pc, #24]	@ (8000760 <TIM4_IRQHandler+0x4c>)
 8000748:	f043 0320 	orr.w	r3, r3, #32
 800074c:	6153      	str	r3, [r2, #20]
    }
    return;
 800074e:	bf00      	nop
 8000750:	bf00      	nop
}
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40000800 	.word	0x40000800
 8000760:	40020000 	.word	0x40020000

08000764 <main>:


int main(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b0c6      	sub	sp, #280	@ 0x118
 8000768:	af00      	add	r7, sp, #0

	 // TIMER and GPIO handle;
	 TIM_Handle_t TimBtn, TimLED1, TimLED2;
	 GPIO_Handle_t GPIOBtn, GPIOLED1, GPIOLED2;\
     I2C1_Init();
 800076a:	f000 fac3 	bl	8000cf4 <I2C1_Init>
	 GPIO_InitConfig(&GPIOBtn, &GPIOLED1, &GPIOLED2); // Initialize GPIO configuration
 800076e:	1d3a      	adds	r2, r7, #4
 8000770:	f107 0120 	add.w	r1, r7, #32
 8000774:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fd37 	bl	80001ec <GPIO_InitConfig>
	 GPIO_IRQConfig(IRQ_NO_EXTI0, ENABLE); // Enable EXTI0 interrupt in NVIC
 800077e:	2101      	movs	r1, #1
 8000780:	2006      	movs	r0, #6
 8000782:	f000 f9e7 	bl	8000b54 <GPIO_IRQConfig>
	 GPIO_IRQPriorityConfig(IRQ_NO_EXTI0, NVIC_IRQ_PRI0); // Set EXTI0 interrupt priority
 8000786:	2100      	movs	r1, #0
 8000788:	2006      	movs	r0, #6
 800078a:	f000 fa69 	bl	8000c60 <GPIO_IRQPriorityConfig>
	 TIM_Config(&TimBtn, &TimLED1, &TimLED2); // Initialize TIM2 configuration
 800078e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8000792:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8000796:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fd7a 	bl	8000294 <TIM_Config>
     while (1) {
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <main+0x3c>

080007a4 <GPIO_Init>:
        else {
        }
    }
}

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]


    // Configure the mode
    if (pGPIOHandle->config.mode <= GPIO_MODE_ANALOG) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	d81f      	bhi.n	80007f8 <GPIO_Init+0x54>
        temp = (pGPIOHandle->config.mode << (2 * pGPIOHandle->config.pin));
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	689a      	ldr	r2, [r3, #8]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->MODER &= ~(0x03 << (2 * pGPIOHandle->config.pin)); // Clear the bits
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	2103      	movs	r1, #3
 80007d6:	fa01 f303 	lsl.w	r3, r1, r3
 80007da:	43db      	mvns	r3, r3
 80007dc:	4619      	mov	r1, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	400a      	ands	r2, r1
 80007e4:	601a      	str	r2, [r3, #0]
        pGPIOHandle->port->MODER |= temp;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	6819      	ldr	r1, [r3, #0]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	68fa      	ldr	r2, [r7, #12]
 80007f2:	430a      	orrs	r2, r1
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	e0e6      	b.n	80009c6 <GPIO_Init+0x222>
    }
    else {
        if (pGPIOHandle->config.mode == GPIO_MODE_IT_FT) {
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	2b04      	cmp	r3, #4
 80007fe:	d117      	bne.n	8000830 <GPIO_Init+0x8c>
            // Configure for falling edge trigger
            EXTI->FTSR |= (1 << pGPIOHandle->config.pin);
 8000800:	4b4e      	ldr	r3, [pc, #312]	@ (800093c <GPIO_Init+0x198>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	6852      	ldr	r2, [r2, #4]
 8000808:	2101      	movs	r1, #1
 800080a:	fa01 f202 	lsl.w	r2, r1, r2
 800080e:	4611      	mov	r1, r2
 8000810:	4a4a      	ldr	r2, [pc, #296]	@ (800093c <GPIO_Init+0x198>)
 8000812:	430b      	orrs	r3, r1
 8000814:	60d3      	str	r3, [r2, #12]
            EXTI->RTSR &= ~(1 << pGPIOHandle->config.pin); // Clear the rising edge trigger
 8000816:	4b49      	ldr	r3, [pc, #292]	@ (800093c <GPIO_Init+0x198>)
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	6852      	ldr	r2, [r2, #4]
 800081e:	2101      	movs	r1, #1
 8000820:	fa01 f202 	lsl.w	r2, r1, r2
 8000824:	43d2      	mvns	r2, r2
 8000826:	4611      	mov	r1, r2
 8000828:	4a44      	ldr	r2, [pc, #272]	@ (800093c <GPIO_Init+0x198>)
 800082a:	400b      	ands	r3, r1
 800082c:	6093      	str	r3, [r2, #8]
 800082e:	e035      	b.n	800089c <GPIO_Init+0xf8>
        }
        else if (pGPIOHandle->config.mode == GPIO_MODE_IT_RT) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	2b05      	cmp	r3, #5
 8000836:	d117      	bne.n	8000868 <GPIO_Init+0xc4>
            // Configure for rising edge trigger
            EXTI->RTSR |= (1 << pGPIOHandle->config.pin);
 8000838:	4b40      	ldr	r3, [pc, #256]	@ (800093c <GPIO_Init+0x198>)
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	6852      	ldr	r2, [r2, #4]
 8000840:	2101      	movs	r1, #1
 8000842:	fa01 f202 	lsl.w	r2, r1, r2
 8000846:	4611      	mov	r1, r2
 8000848:	4a3c      	ldr	r2, [pc, #240]	@ (800093c <GPIO_Init+0x198>)
 800084a:	430b      	orrs	r3, r1
 800084c:	6093      	str	r3, [r2, #8]
            EXTI->FTSR &= ~(1 << pGPIOHandle->config.pin); // Clear the falling edge trigger
 800084e:	4b3b      	ldr	r3, [pc, #236]	@ (800093c <GPIO_Init+0x198>)
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	6852      	ldr	r2, [r2, #4]
 8000856:	2101      	movs	r1, #1
 8000858:	fa01 f202 	lsl.w	r2, r1, r2
 800085c:	43d2      	mvns	r2, r2
 800085e:	4611      	mov	r1, r2
 8000860:	4a36      	ldr	r2, [pc, #216]	@ (800093c <GPIO_Init+0x198>)
 8000862:	400b      	ands	r3, r1
 8000864:	60d3      	str	r3, [r2, #12]
 8000866:	e019      	b.n	800089c <GPIO_Init+0xf8>
        }
        else if (pGPIOHandle->config.mode == GPIO_MODE_IT_RFT) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	2b06      	cmp	r3, #6
 800086e:	d115      	bne.n	800089c <GPIO_Init+0xf8>
            // Configure for both edges trigger
            EXTI->RTSR |= (1 << pGPIOHandle->config.pin);
 8000870:	4b32      	ldr	r3, [pc, #200]	@ (800093c <GPIO_Init+0x198>)
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	6852      	ldr	r2, [r2, #4]
 8000878:	2101      	movs	r1, #1
 800087a:	fa01 f202 	lsl.w	r2, r1, r2
 800087e:	4611      	mov	r1, r2
 8000880:	4a2e      	ldr	r2, [pc, #184]	@ (800093c <GPIO_Init+0x198>)
 8000882:	430b      	orrs	r3, r1
 8000884:	6093      	str	r3, [r2, #8]
            EXTI->FTSR |= (1 << pGPIOHandle->config.pin);
 8000886:	4b2d      	ldr	r3, [pc, #180]	@ (800093c <GPIO_Init+0x198>)
 8000888:	68db      	ldr	r3, [r3, #12]
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	6852      	ldr	r2, [r2, #4]
 800088e:	2101      	movs	r1, #1
 8000890:	fa01 f202 	lsl.w	r2, r1, r2
 8000894:	4611      	mov	r1, r2
 8000896:	4a29      	ldr	r2, [pc, #164]	@ (800093c <GPIO_Init+0x198>)
 8000898:	430b      	orrs	r3, r1
 800089a:	60d3      	str	r3, [r2, #12]
        }

        //configure gpio portselection in SYSCFG_EXTICR
        uint8_t temp1 = pGPIOHandle->config.pin / 4;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	089b      	lsrs	r3, r3, #2
 80008a2:	72fb      	strb	r3, [r7, #11]
        uint8_t temp2 = pGPIOHandle->config.pin % 4;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	f003 0303 	and.w	r3, r3, #3
 80008ae:	72bb      	strb	r3, [r7, #10]
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->port);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a22      	ldr	r2, [pc, #136]	@ (8000940 <GPIO_Init+0x19c>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d056      	beq.n	8000968 <GPIO_Init+0x1c4>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a21      	ldr	r2, [pc, #132]	@ (8000944 <GPIO_Init+0x1a0>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d039      	beq.n	8000938 <GPIO_Init+0x194>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a1f      	ldr	r2, [pc, #124]	@ (8000948 <GPIO_Init+0x1a4>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d032      	beq.n	8000934 <GPIO_Init+0x190>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a1e      	ldr	r2, [pc, #120]	@ (800094c <GPIO_Init+0x1a8>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d02b      	beq.n	8000930 <GPIO_Init+0x18c>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000950 <GPIO_Init+0x1ac>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d024      	beq.n	800092c <GPIO_Init+0x188>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a1b      	ldr	r2, [pc, #108]	@ (8000954 <GPIO_Init+0x1b0>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d01d      	beq.n	8000928 <GPIO_Init+0x184>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a19      	ldr	r2, [pc, #100]	@ (8000958 <GPIO_Init+0x1b4>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d016      	beq.n	8000924 <GPIO_Init+0x180>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a18      	ldr	r2, [pc, #96]	@ (800095c <GPIO_Init+0x1b8>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d00f      	beq.n	8000920 <GPIO_Init+0x17c>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a16      	ldr	r2, [pc, #88]	@ (8000960 <GPIO_Init+0x1bc>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d008      	beq.n	800091c <GPIO_Init+0x178>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a15      	ldr	r2, [pc, #84]	@ (8000964 <GPIO_Init+0x1c0>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d101      	bne.n	8000918 <GPIO_Init+0x174>
 8000914:	2309      	movs	r3, #9
 8000916:	e028      	b.n	800096a <GPIO_Init+0x1c6>
 8000918:	230a      	movs	r3, #10
 800091a:	e026      	b.n	800096a <GPIO_Init+0x1c6>
 800091c:	2308      	movs	r3, #8
 800091e:	e024      	b.n	800096a <GPIO_Init+0x1c6>
 8000920:	2307      	movs	r3, #7
 8000922:	e022      	b.n	800096a <GPIO_Init+0x1c6>
 8000924:	2306      	movs	r3, #6
 8000926:	e020      	b.n	800096a <GPIO_Init+0x1c6>
 8000928:	2305      	movs	r3, #5
 800092a:	e01e      	b.n	800096a <GPIO_Init+0x1c6>
 800092c:	2304      	movs	r3, #4
 800092e:	e01c      	b.n	800096a <GPIO_Init+0x1c6>
 8000930:	2303      	movs	r3, #3
 8000932:	e01a      	b.n	800096a <GPIO_Init+0x1c6>
 8000934:	2302      	movs	r3, #2
 8000936:	e018      	b.n	800096a <GPIO_Init+0x1c6>
 8000938:	2301      	movs	r3, #1
 800093a:	e016      	b.n	800096a <GPIO_Init+0x1c6>
 800093c:	40013c00 	.word	0x40013c00
 8000940:	40020000 	.word	0x40020000
 8000944:	40020400 	.word	0x40020400
 8000948:	40020800 	.word	0x40020800
 800094c:	40020c00 	.word	0x40020c00
 8000950:	40021000 	.word	0x40021000
 8000954:	40021400 	.word	0x40021400
 8000958:	40021800 	.word	0x40021800
 800095c:	40021c00 	.word	0x40021c00
 8000960:	40022000 	.word	0x40022000
 8000964:	40022400 	.word	0x40022400
 8000968:	2300      	movs	r3, #0
 800096a:	727b      	strb	r3, [r7, #9]
        SYSCFG_PCLK_EN(); // Enable SYSCFG clock
 800096c:	4b76      	ldr	r3, [pc, #472]	@ (8000b48 <GPIO_Init+0x3a4>)
 800096e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000970:	4a75      	ldr	r2, [pc, #468]	@ (8000b48 <GPIO_Init+0x3a4>)
 8000972:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000976:	6453      	str	r3, [r2, #68]	@ 0x44
        SYSCFG->EXTICR[temp1] &= ~(0x0F << (temp2 * 4)); // Clear the bits
 8000978:	4a74      	ldr	r2, [pc, #464]	@ (8000b4c <GPIO_Init+0x3a8>)
 800097a:	7afb      	ldrb	r3, [r7, #11]
 800097c:	3302      	adds	r3, #2
 800097e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000982:	7abb      	ldrb	r3, [r7, #10]
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	210f      	movs	r1, #15
 8000988:	fa01 f303 	lsl.w	r3, r1, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	4618      	mov	r0, r3
 8000990:	496e      	ldr	r1, [pc, #440]	@ (8000b4c <GPIO_Init+0x3a8>)
 8000992:	7afb      	ldrb	r3, [r7, #11]
 8000994:	4002      	ands	r2, r0
 8000996:	3302      	adds	r3, #2
 8000998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4); // Set the bits
 800099c:	7a7a      	ldrb	r2, [r7, #9]
 800099e:	7abb      	ldrb	r3, [r7, #10]
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	fa02 f103 	lsl.w	r1, r2, r3
 80009a6:	4a69      	ldr	r2, [pc, #420]	@ (8000b4c <GPIO_Init+0x3a8>)
 80009a8:	7afb      	ldrb	r3, [r7, #11]
 80009aa:	3302      	adds	r3, #2
 80009ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        // Enable the interrupt
        EXTI->IMR |= (1 << pGPIOHandle->config.pin); // Unmask the interrupt
 80009b0:	4b67      	ldr	r3, [pc, #412]	@ (8000b50 <GPIO_Init+0x3ac>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	6852      	ldr	r2, [r2, #4]
 80009b8:	2101      	movs	r1, #1
 80009ba:	fa01 f202 	lsl.w	r2, r1, r2
 80009be:	4611      	mov	r1, r2
 80009c0:	4a63      	ldr	r2, [pc, #396]	@ (8000b50 <GPIO_Init+0x3ac>)
 80009c2:	430b      	orrs	r3, r1
 80009c4:	6013      	str	r3, [r2, #0]
    }
    temp = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]

    // Configure the output type
    if (pGPIOHandle->config.otype <= GPIO_OTYPE_OD) {
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d81c      	bhi.n	8000a0c <GPIO_Init+0x268>
        temp = (pGPIOHandle->config.otype << pGPIOHandle->config.pin);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	68da      	ldr	r2, [r3, #12]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->OTYPER &= ~(0x01 << pGPIOHandle->config.pin); // Clear the bit
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	685a      	ldr	r2, [r3, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	2101      	movs	r1, #1
 80009ec:	fa01 f303 	lsl.w	r3, r1, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	4619      	mov	r1, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	400a      	ands	r2, r1
 80009fa:	605a      	str	r2, [r3, #4]
        pGPIOHandle->port->OTYPER |= temp; // Set the bit
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	6859      	ldr	r1, [r3, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	605a      	str	r2, [r3, #4]
    }
    temp = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]

    // Configure the speed
    if (pGPIOHandle->config.ospeed <= 3) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	691b      	ldr	r3, [r3, #16]
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	d81e      	bhi.n	8000a56 <GPIO_Init+0x2b2>
        temp = (pGPIOHandle->config.ospeed << (2 * pGPIOHandle->config.pin));
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	691a      	ldr	r2, [r3, #16]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->config.pin)); // Clear the bits
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	2103      	movs	r1, #3
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	400a      	ands	r2, r1
 8000a44:	609a      	str	r2, [r3, #8]
        pGPIOHandle->port->OSPEEDR |= temp; // Set the bits
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	6899      	ldr	r1, [r3, #8]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	430a      	orrs	r2, r1
 8000a54:	609a      	str	r2, [r3, #8]
    }
    temp = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]

    // Configure the pull-up/pull-down
    if (pGPIOHandle->config.pupd <= 3) {
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d81e      	bhi.n	8000aa0 <GPIO_Init+0x2fc>
        temp = (pGPIOHandle->config.pupd << (2 * pGPIOHandle->config.pin));
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	695a      	ldr	r2, [r3, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->port->PUPDR &= ~(0x03 << (2 * pGPIOHandle->config.pin)); // Clear the bits
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	68da      	ldr	r2, [r3, #12]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	2103      	movs	r1, #3
 8000a80:	fa01 f303 	lsl.w	r3, r1, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	4619      	mov	r1, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	400a      	ands	r2, r1
 8000a8e:	60da      	str	r2, [r3, #12]
        pGPIOHandle->port->PUPDR |= temp; // Set the bits
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	68d9      	ldr	r1, [r3, #12]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	60da      	str	r2, [r3, #12]
    }
    temp = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]

    // Configure the alternate function
    if (pGPIOHandle->config.mode == GPIO_MODE_AF) {
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d144      	bne.n	8000b36 <GPIO_Init+0x392>
        if (pGPIOHandle->config.pin < 8) {
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	2b07      	cmp	r3, #7
 8000ab2:	d81f      	bhi.n	8000af4 <GPIO_Init+0x350>
            temp = (pGPIOHandle->config.af << (4 * pGPIOHandle->config.pin));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	699a      	ldr	r2, [r3, #24]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	60fb      	str	r3, [r7, #12]
            pGPIOHandle->port->AFR[0] &= ~(0x0F << (4 * pGPIOHandle->config.pin)); // Clear the bits
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	6a1a      	ldr	r2, [r3, #32]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	210f      	movs	r1, #15
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	4619      	mov	r1, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	400a      	ands	r2, r1
 8000ae0:	621a      	str	r2, [r3, #32]
            pGPIOHandle->port->AFR[0] |= temp;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	6a19      	ldr	r1, [r3, #32]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	430a      	orrs	r2, r1
 8000af0:	621a      	str	r2, [r3, #32]
 8000af2:	e020      	b.n	8000b36 <GPIO_Init+0x392>
        }
        else {
            temp = (pGPIOHandle->config.af << (4 * (pGPIOHandle->config.pin - 8)));
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	699a      	ldr	r2, [r3, #24]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	3b08      	subs	r3, #8
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	60fb      	str	r3, [r7, #12]
            pGPIOHandle->port->AFR[1] &= ~(0x0F << (4 * (pGPIOHandle->config.pin - 8))); // Clear the bits
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	3b08      	subs	r3, #8
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	210f      	movs	r1, #15
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	400a      	ands	r2, r1
 8000b24:	625a      	str	r2, [r3, #36]	@ 0x24
            pGPIOHandle->port->AFR[1] |= temp;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	430a      	orrs	r2, r1
 8000b34:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }
    temp = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40013800 	.word	0x40013800
 8000b50:	40013c00 	.word	0x40013c00

08000b54 <GPIO_IRQConfig>:

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
    pGPIOx->ODR ^= (1 << PinNumber);
}

void GPIO_IRQConfig (uint8_t IRQNumber, uint8_t EnorDi) {
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	71fb      	strb	r3, [r7, #7]
 8000b60:	4613      	mov	r3, r2
 8000b62:	71bb      	strb	r3, [r7, #6]
    if (EnorDi == ENABLE) {
 8000b64:	79bb      	ldrb	r3, [r7, #6]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d133      	bne.n	8000bd2 <GPIO_IRQConfig+0x7e>
        if (IRQNumber <= 31) {
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b1f      	cmp	r3, #31
 8000b6e:	d80a      	bhi.n	8000b86 <GPIO_IRQConfig+0x32>
            // Program ISER0 register
            *NVIC_ISER0 |= (1 << IRQNumber);
 8000b70:	4b35      	ldr	r3, [pc, #212]	@ (8000c48 <GPIO_IRQConfig+0xf4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	79fa      	ldrb	r2, [r7, #7]
 8000b76:	2101      	movs	r1, #1
 8000b78:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4a32      	ldr	r2, [pc, #200]	@ (8000c48 <GPIO_IRQConfig+0xf4>)
 8000b80:	430b      	orrs	r3, r1
 8000b82:	6013      	str	r3, [r2, #0]
        else if (IRQNumber >= 64 && IRQNumber < 96) {
            // Program ICER2 register
            *NVIC_ICER2 |= (1 << (IRQNumber % 64));
        }
    }
}
 8000b84:	e059      	b.n	8000c3a <GPIO_IRQConfig+0xe6>
        else if (IRQNumber > 31 && IRQNumber < 64) {
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2b1f      	cmp	r3, #31
 8000b8a:	d90f      	bls.n	8000bac <GPIO_IRQConfig+0x58>
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b90:	d80c      	bhi.n	8000bac <GPIO_IRQConfig+0x58>
            *NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000b92:	4b2e      	ldr	r3, [pc, #184]	@ (8000c4c <GPIO_IRQConfig+0xf8>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	79fa      	ldrb	r2, [r7, #7]
 8000b98:	f002 021f 	and.w	r2, r2, #31
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4a29      	ldr	r2, [pc, #164]	@ (8000c4c <GPIO_IRQConfig+0xf8>)
 8000ba6:	430b      	orrs	r3, r1
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	e046      	b.n	8000c3a <GPIO_IRQConfig+0xe6>
        else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bb0:	d943      	bls.n	8000c3a <GPIO_IRQConfig+0xe6>
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b5f      	cmp	r3, #95	@ 0x5f
 8000bb6:	d840      	bhi.n	8000c3a <GPIO_IRQConfig+0xe6>
            *NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000bb8:	4b25      	ldr	r3, [pc, #148]	@ (8000c50 <GPIO_IRQConfig+0xfc>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	79fa      	ldrb	r2, [r7, #7]
 8000bbe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4a21      	ldr	r2, [pc, #132]	@ (8000c50 <GPIO_IRQConfig+0xfc>)
 8000bcc:	430b      	orrs	r3, r1
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	e033      	b.n	8000c3a <GPIO_IRQConfig+0xe6>
        if (IRQNumber <= 31) {
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b1f      	cmp	r3, #31
 8000bd6:	d80a      	bhi.n	8000bee <GPIO_IRQConfig+0x9a>
            *NVIC_ICER0 |= (1 << IRQNumber);
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c54 <GPIO_IRQConfig+0x100>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	79fa      	ldrb	r2, [r7, #7]
 8000bde:	2101      	movs	r1, #1
 8000be0:	fa01 f202 	lsl.w	r2, r1, r2
 8000be4:	4611      	mov	r1, r2
 8000be6:	4a1b      	ldr	r2, [pc, #108]	@ (8000c54 <GPIO_IRQConfig+0x100>)
 8000be8:	430b      	orrs	r3, r1
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	e025      	b.n	8000c3a <GPIO_IRQConfig+0xe6>
        else if (IRQNumber > 31 && IRQNumber < 64) {
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b1f      	cmp	r3, #31
 8000bf2:	d90f      	bls.n	8000c14 <GPIO_IRQConfig+0xc0>
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bf8:	d80c      	bhi.n	8000c14 <GPIO_IRQConfig+0xc0>
            *NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000bfa:	4b17      	ldr	r3, [pc, #92]	@ (8000c58 <GPIO_IRQConfig+0x104>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	79fa      	ldrb	r2, [r7, #7]
 8000c00:	f002 021f 	and.w	r2, r2, #31
 8000c04:	2101      	movs	r1, #1
 8000c06:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4a12      	ldr	r2, [pc, #72]	@ (8000c58 <GPIO_IRQConfig+0x104>)
 8000c0e:	430b      	orrs	r3, r1
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e012      	b.n	8000c3a <GPIO_IRQConfig+0xe6>
        else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c18:	d90f      	bls.n	8000c3a <GPIO_IRQConfig+0xe6>
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b5f      	cmp	r3, #95	@ 0x5f
 8000c1e:	d80c      	bhi.n	8000c3a <GPIO_IRQConfig+0xe6>
            *NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000c20:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <GPIO_IRQConfig+0x108>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	79fa      	ldrb	r2, [r7, #7]
 8000c26:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c30:	4611      	mov	r1, r2
 8000c32:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <GPIO_IRQConfig+0x108>)
 8000c34:	430b      	orrs	r3, r1
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	e7ff      	b.n	8000c3a <GPIO_IRQConfig+0xe6>
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000e104 	.word	0xe000e104
 8000c50:	e000e108 	.word	0xe000e108
 8000c54:	e000e180 	.word	0xe000e180
 8000c58:	e000e184 	.word	0xe000e184
 8000c5c:	e000e188 	.word	0xe000e188

08000c60 <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
    // Calculate the priority group
    uint8_t iprx = IRQNumber / 4;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	089b      	lsrs	r3, r3, #2
 8000c70:	73fb      	strb	r3, [r7, #15]
    uint8_t iprx_section = IRQNumber % 4;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	73bb      	strb	r3, [r7, #14]
    uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000c7a:	7bbb      	ldrb	r3, [r7, #14]
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	3304      	adds	r3, #4
 8000c82:	737b      	strb	r3, [r7, #13]
    *(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000c8c:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000c90:	6819      	ldr	r1, [r3, #0]
 8000c92:	7b7b      	ldrb	r3, [r7, #13]
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	409a      	lsls	r2, r3
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000ca0:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber) {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
    // Clear the EXTI line pending register
    if (EXTI->PR & (1 << PinNumber)) {
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <GPIO_IRQHandling+0x3c>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	79fa      	ldrb	r2, [r7, #7]
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cca:	4013      	ands	r3, r2
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d009      	beq.n	8000ce4 <GPIO_IRQHandling+0x30>
        EXTI->PR |= (1 << PinNumber);
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <GPIO_IRQHandling+0x3c>)
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	79fa      	ldrb	r2, [r7, #7]
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4a04      	ldr	r2, [pc, #16]	@ (8000cf0 <GPIO_IRQHandling+0x3c>)
 8000ce0:	430b      	orrs	r3, r1
 8000ce2:	6153      	str	r3, [r2, #20]
    }
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	40013c00 	.word	0x40013c00

08000cf4 <I2C1_Init>:
#include "stm32f429i_i2c_driver.h"
#include "stm32f429i_gpio_driver.h"
#include "stm32f429i.h"  // 若有共用宏定義，也可包含此檔

void I2C1_Init(void) {
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
    // 開啟時鐘
    GPIOB_PCLK_EN();
 8000cf8:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <I2C1_Init+0xa4>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfc:	4a26      	ldr	r2, [pc, #152]	@ (8000d98 <I2C1_Init+0xa4>)
 8000cfe:	f043 0302 	orr.w	r3, r3, #2
 8000d02:	6313      	str	r3, [r2, #48]	@ 0x30
    I2C1_PCLK_EN();
 8000d04:	4b24      	ldr	r3, [pc, #144]	@ (8000d98 <I2C1_Init+0xa4>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d08:	4a23      	ldr	r2, [pc, #140]	@ (8000d98 <I2C1_Init+0xa4>)
 8000d0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d0e:	6413      	str	r3, [r2, #64]	@ 0x40

    // 設定 PB6 = I2C1_SCL, PB7 = I2C1_SDA
    GPIOB->MODER &= ~(0xF << (6 * 2));  // 清 PB6, PB7
 8000d10:	4b22      	ldr	r3, [pc, #136]	@ (8000d9c <I2C1_Init+0xa8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a21      	ldr	r2, [pc, #132]	@ (8000d9c <I2C1_Init+0xa8>)
 8000d16:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000d1a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (0xA << (6 * 2));   // AF mode
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d9c <I2C1_Init+0xa8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a1e      	ldr	r2, [pc, #120]	@ (8000d9c <I2C1_Init+0xa8>)
 8000d22:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8000d26:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER |= (0x3 << 6);        // Open-drain
 8000d28:	4b1c      	ldr	r3, [pc, #112]	@ (8000d9c <I2C1_Init+0xa8>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d9c <I2C1_Init+0xa8>)
 8000d2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000d32:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (0xF << (6 * 2)); // High speed
 8000d34:	4b19      	ldr	r3, [pc, #100]	@ (8000d9c <I2C1_Init+0xa8>)
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	4a18      	ldr	r2, [pc, #96]	@ (8000d9c <I2C1_Init+0xa8>)
 8000d3a:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 8000d3e:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(0xF << (6 * 2));  // No pull-up/down
 8000d40:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <I2C1_Init+0xa8>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	4a15      	ldr	r2, [pc, #84]	@ (8000d9c <I2C1_Init+0xa8>)
 8000d46:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000d4a:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[0] |= (4 << (6 * 4));    // AF4 for I2C1_SCL
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <I2C1_Init+0xa8>)
 8000d4e:	6a1b      	ldr	r3, [r3, #32]
 8000d50:	4a12      	ldr	r2, [pc, #72]	@ (8000d9c <I2C1_Init+0xa8>)
 8000d52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d56:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (4 << (7 * 4));    // AF4 for I2C1_SDA
 8000d58:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <I2C1_Init+0xa8>)
 8000d5a:	6a1b      	ldr	r3, [r3, #32]
 8000d5c:	4a0f      	ldr	r2, [pc, #60]	@ (8000d9c <I2C1_Init+0xa8>)
 8000d5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000d62:	6213      	str	r3, [r2, #32]

    // 關閉 I2C 模組
    I2C1->CR[0] &= ~(1 << 0);
 8000d64:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <I2C1_Init+0xac>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0d      	ldr	r2, [pc, #52]	@ (8000da0 <I2C1_Init+0xac>)
 8000d6a:	f023 0301 	bic.w	r3, r3, #1
 8000d6e:	6013      	str	r3, [r2, #0]

    // 設定外部時鐘來源 = 16MHz（或依實際）
    I2C1->CR[0] = 16;
 8000d70:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <I2C1_Init+0xac>)
 8000d72:	2210      	movs	r2, #16
 8000d74:	601a      	str	r2, [r3, #0]

    // 設定 clock control register（100kHz, standard mode）
    I2C1->CCR = 80;  // CCR = Fpclk / (2 * I2C_speed) = 16MHz / (2 * 100kHz)
 8000d76:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <I2C1_Init+0xac>)
 8000d78:	2250      	movs	r2, #80	@ 0x50
 8000d7a:	61da      	str	r2, [r3, #28]

    // 設定 TRISE = Fpclk + 1 = 17
    I2C1->TRISE = 17;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <I2C1_Init+0xac>)
 8000d7e:	2211      	movs	r2, #17
 8000d80:	621a      	str	r2, [r3, #32]

    // 開啟模組
    I2C1->CR[0] |= (1 << 0);
 8000d82:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <I2C1_Init+0xac>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a06      	ldr	r2, [pc, #24]	@ (8000da0 <I2C1_Init+0xac>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6013      	str	r3, [r2, #0]
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020400 	.word	0x40020400
 8000da0:	40005400 	.word	0x40005400

08000da4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000da4:	480d      	ldr	r0, [pc, #52]	@ (8000ddc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000da6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000da8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dac:	480c      	ldr	r0, [pc, #48]	@ (8000de0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dae:	490d      	ldr	r1, [pc, #52]	@ (8000de4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db0:	4a0d      	ldr	r2, [pc, #52]	@ (8000de8 <LoopForever+0xe>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000df0 <LoopForever+0x16>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dd2:	f000 f811 	bl	8000df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dd6:	f7ff fcc5 	bl	8000764 <main>

08000dda <LoopForever>:

LoopForever:
  b LoopForever
 8000dda:	e7fe      	b.n	8000dda <LoopForever>
  ldr   r0, =_estack
 8000ddc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000de8:	08000e60 	.word	0x08000e60
  ldr r2, =_sbss
 8000dec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000df0:	20000028 	.word	0x20000028

08000df4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC_IRQHandler>
	...

08000df8 <__libc_init_array>:
 8000df8:	b570      	push	{r4, r5, r6, lr}
 8000dfa:	4d0d      	ldr	r5, [pc, #52]	@ (8000e30 <__libc_init_array+0x38>)
 8000dfc:	4c0d      	ldr	r4, [pc, #52]	@ (8000e34 <__libc_init_array+0x3c>)
 8000dfe:	1b64      	subs	r4, r4, r5
 8000e00:	10a4      	asrs	r4, r4, #2
 8000e02:	2600      	movs	r6, #0
 8000e04:	42a6      	cmp	r6, r4
 8000e06:	d109      	bne.n	8000e1c <__libc_init_array+0x24>
 8000e08:	4d0b      	ldr	r5, [pc, #44]	@ (8000e38 <__libc_init_array+0x40>)
 8000e0a:	4c0c      	ldr	r4, [pc, #48]	@ (8000e3c <__libc_init_array+0x44>)
 8000e0c:	f000 f818 	bl	8000e40 <_init>
 8000e10:	1b64      	subs	r4, r4, r5
 8000e12:	10a4      	asrs	r4, r4, #2
 8000e14:	2600      	movs	r6, #0
 8000e16:	42a6      	cmp	r6, r4
 8000e18:	d105      	bne.n	8000e26 <__libc_init_array+0x2e>
 8000e1a:	bd70      	pop	{r4, r5, r6, pc}
 8000e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e20:	4798      	blx	r3
 8000e22:	3601      	adds	r6, #1
 8000e24:	e7ee      	b.n	8000e04 <__libc_init_array+0xc>
 8000e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e2a:	4798      	blx	r3
 8000e2c:	3601      	adds	r6, #1
 8000e2e:	e7f2      	b.n	8000e16 <__libc_init_array+0x1e>
 8000e30:	08000e58 	.word	0x08000e58
 8000e34:	08000e58 	.word	0x08000e58
 8000e38:	08000e58 	.word	0x08000e58
 8000e3c:	08000e5c 	.word	0x08000e5c

08000e40 <_init>:
 8000e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e42:	bf00      	nop
 8000e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e46:	bc08      	pop	{r3}
 8000e48:	469e      	mov	lr, r3
 8000e4a:	4770      	bx	lr

08000e4c <_fini>:
 8000e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4e:	bf00      	nop
 8000e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e52:	bc08      	pop	{r3}
 8000e54:	469e      	mov	lr, r3
 8000e56:	4770      	bx	lr
