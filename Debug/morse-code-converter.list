
morse-code-converter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000388  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000534  0800053c  0000153c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000534  08000534  0000153c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000534  08000534  0000153c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000534  0800053c  0000153c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000534  08000534  00001534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000538  08000538  00001538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000153c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000153c  2**0
                  CONTENTS
 10 .bss          00000028  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000793  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000192  00000000  00000000  00001cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  00001e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000072  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000145b  00000000  00000000  00001faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000792  00000000  00000000  00003405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000579f  00000000  00000000  00003b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00009336  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001d0  00000000  00000000  0000937c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0000954c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800051c 	.word	0x0800051c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	0800051c 	.word	0x0800051c

080001ec <Timer3_StartCountdown>:
	TIM2->EGR |= (1 << 0);
	TIM2->SR &= ~TIM_FLAG_UIF;       // 清除中斷旗標
	TIM2->CR[0] |= (1 << 0);         // 啟動 Timer
}

void Timer3_StartCountdown(uint32_t milliseconds) {
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
    TIM3->CR[0] &= ~(1 << 0);        // 確保 Timer 先停住
 80001f4:	4b17      	ldr	r3, [pc, #92]	@ (8000254 <Timer3_StartCountdown+0x68>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a16      	ldr	r2, [pc, #88]	@ (8000254 <Timer3_StartCountdown+0x68>)
 80001fa:	f023 0301 	bic.w	r3, r3, #1
 80001fe:	6013      	str	r3, [r2, #0]
    TIM3->CR[0] |= (1 << 2);
 8000200:	4b14      	ldr	r3, [pc, #80]	@ (8000254 <Timer3_StartCountdown+0x68>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a13      	ldr	r2, [pc, #76]	@ (8000254 <Timer3_StartCountdown+0x68>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6013      	str	r3, [r2, #0]
	TIM3->PSC = 16000 - 1;         // 設定 Prescaler
 800020c:	4b11      	ldr	r3, [pc, #68]	@ (8000254 <Timer3_StartCountdown+0x68>)
 800020e:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000212:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = milliseconds - 1;    // 設定 ARR
 8000214:	4a0f      	ldr	r2, [pc, #60]	@ (8000254 <Timer3_StartCountdown+0x68>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	3b01      	subs	r3, #1
 800021a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM3->CNT = 0;                   // 重設計數器
 800021c:	4b0d      	ldr	r3, [pc, #52]	@ (8000254 <Timer3_StartCountdown+0x68>)
 800021e:	2200      	movs	r2, #0
 8000220:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->EGR |= (1 << 0);
 8000222:	4b0c      	ldr	r3, [pc, #48]	@ (8000254 <Timer3_StartCountdown+0x68>)
 8000224:	695b      	ldr	r3, [r3, #20]
 8000226:	4a0b      	ldr	r2, [pc, #44]	@ (8000254 <Timer3_StartCountdown+0x68>)
 8000228:	f043 0301 	orr.w	r3, r3, #1
 800022c:	6153      	str	r3, [r2, #20]
    TIM3->SR &= ~TIM_FLAG_UIF;       // 清除中斷旗標
 800022e:	4b09      	ldr	r3, [pc, #36]	@ (8000254 <Timer3_StartCountdown+0x68>)
 8000230:	691b      	ldr	r3, [r3, #16]
 8000232:	4a08      	ldr	r2, [pc, #32]	@ (8000254 <Timer3_StartCountdown+0x68>)
 8000234:	f023 0301 	bic.w	r3, r3, #1
 8000238:	6113      	str	r3, [r2, #16]
    TIM3->CR[0] |= (1 << 0);         // 啟動 Timer
 800023a:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <Timer3_StartCountdown+0x68>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a05      	ldr	r2, [pc, #20]	@ (8000254 <Timer3_StartCountdown+0x68>)
 8000240:	f043 0301 	orr.w	r3, r3, #1
 8000244:	6013      	str	r3, [r2, #0]
}
 8000246:	bf00      	nop
 8000248:	370c      	adds	r7, #12
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	40000400 	.word	0x40000400

08000258 <Timer4_StartCountdown>:

void Timer4_StartCountdown(uint32_t milliseconds) {
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	TIM4->CR[0] &= ~(1 << 0); // 確保 Timer 先停住
 8000260:	4b17      	ldr	r3, [pc, #92]	@ (80002c0 <Timer4_StartCountdown+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a16      	ldr	r2, [pc, #88]	@ (80002c0 <Timer4_StartCountdown+0x68>)
 8000266:	f023 0301 	bic.w	r3, r3, #1
 800026a:	6013      	str	r3, [r2, #0]
	TIM4->CR[0] |= (1 << 2);
 800026c:	4b14      	ldr	r3, [pc, #80]	@ (80002c0 <Timer4_StartCountdown+0x68>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a13      	ldr	r2, [pc, #76]	@ (80002c0 <Timer4_StartCountdown+0x68>)
 8000272:	f043 0304 	orr.w	r3, r3, #4
 8000276:	6013      	str	r3, [r2, #0]
	TIM4->PSC = 16000 - 1; // 設定 Prescaler
 8000278:	4b11      	ldr	r3, [pc, #68]	@ (80002c0 <Timer4_StartCountdown+0x68>)
 800027a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800027e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = milliseconds - 1;
 8000280:	4a0f      	ldr	r2, [pc, #60]	@ (80002c0 <Timer4_StartCountdown+0x68>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	3b01      	subs	r3, #1
 8000286:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM4->CNT = 0;
 8000288:	4b0d      	ldr	r3, [pc, #52]	@ (80002c0 <Timer4_StartCountdown+0x68>)
 800028a:	2200      	movs	r2, #0
 800028c:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->EGR |= (1 << 0); // 更新計數器
 800028e:	4b0c      	ldr	r3, [pc, #48]	@ (80002c0 <Timer4_StartCountdown+0x68>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0b      	ldr	r2, [pc, #44]	@ (80002c0 <Timer4_StartCountdown+0x68>)
 8000294:	f043 0301 	orr.w	r3, r3, #1
 8000298:	6153      	str	r3, [r2, #20]
	TIM4->SR &= ~TIM_FLAG_UIF; // 清除 update flag
 800029a:	4b09      	ldr	r3, [pc, #36]	@ (80002c0 <Timer4_StartCountdown+0x68>)
 800029c:	691b      	ldr	r3, [r3, #16]
 800029e:	4a08      	ldr	r2, [pc, #32]	@ (80002c0 <Timer4_StartCountdown+0x68>)
 80002a0:	f023 0301 	bic.w	r3, r3, #1
 80002a4:	6113      	str	r3, [r2, #16]
	TIM4->CR[0] |= (1 << 0); // 啟動 Timer
 80002a6:	4b06      	ldr	r3, [pc, #24]	@ (80002c0 <Timer4_StartCountdown+0x68>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a05      	ldr	r2, [pc, #20]	@ (80002c0 <Timer4_StartCountdown+0x68>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	6013      	str	r3, [r2, #0]
}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40000800 	.word	0x40000800

080002c4 <Timer3_Stop>:
	TIM2->CNT = 0;
	TIM2->SR &= ~TIM_FLAG_UIF;   // 清除旗標
	GPIOA->ODR &= ~(1 << 0); // Reset GPIO1
}

void Timer3_Stop(void) {
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
    TIM3->CR[0] &= ~(1 << 0); // 停止計數
 80002c8:	4b0c      	ldr	r3, [pc, #48]	@ (80002fc <Timer3_Stop+0x38>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a0b      	ldr	r2, [pc, #44]	@ (80002fc <Timer3_Stop+0x38>)
 80002ce:	f023 0301 	bic.w	r3, r3, #1
 80002d2:	6013      	str	r3, [r2, #0]
    TIM3->CNT = 0;
 80002d4:	4b09      	ldr	r3, [pc, #36]	@ (80002fc <Timer3_Stop+0x38>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM3->SR &= ~TIM_FLAG_UIF;   // 清除旗標
 80002da:	4b08      	ldr	r3, [pc, #32]	@ (80002fc <Timer3_Stop+0x38>)
 80002dc:	691b      	ldr	r3, [r3, #16]
 80002de:	4a07      	ldr	r2, [pc, #28]	@ (80002fc <Timer3_Stop+0x38>)
 80002e0:	f023 0301 	bic.w	r3, r3, #1
 80002e4:	6113      	str	r3, [r2, #16]
	GPIOA->ODR &= ~(1 << 4); // Reset GPIO2
 80002e6:	4b06      	ldr	r3, [pc, #24]	@ (8000300 <Timer3_Stop+0x3c>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	4a05      	ldr	r2, [pc, #20]	@ (8000300 <Timer3_Stop+0x3c>)
 80002ec:	f023 0310 	bic.w	r3, r3, #16
 80002f0:	6153      	str	r3, [r2, #20]
}
 80002f2:	bf00      	nop
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	40000400 	.word	0x40000400
 8000300:	40020000 	.word	0x40020000

08000304 <Timer4_Stop>:

void Timer4_Stop(void) {
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
	TIM4->CR[0] &= ~(1 << 0); // 停止計數
 8000308:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <Timer4_Stop+0x38>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a0b      	ldr	r2, [pc, #44]	@ (800033c <Timer4_Stop+0x38>)
 800030e:	f023 0301 	bic.w	r3, r3, #1
 8000312:	6013      	str	r3, [r2, #0]
	TIM4->CNT = 0;
 8000314:	4b09      	ldr	r3, [pc, #36]	@ (800033c <Timer4_Stop+0x38>)
 8000316:	2200      	movs	r2, #0
 8000318:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->SR &= ~TIM_FLAG_UIF;   // 清除旗標
 800031a:	4b08      	ldr	r3, [pc, #32]	@ (800033c <Timer4_Stop+0x38>)
 800031c:	691b      	ldr	r3, [r3, #16]
 800031e:	4a07      	ldr	r2, [pc, #28]	@ (800033c <Timer4_Stop+0x38>)
 8000320:	f023 0301 	bic.w	r3, r3, #1
 8000324:	6113      	str	r3, [r2, #16]
	GPIOA->ODR &= ~(1 << 5); // Reset GPIO2
 8000326:	4b06      	ldr	r3, [pc, #24]	@ (8000340 <Timer4_Stop+0x3c>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a05      	ldr	r2, [pc, #20]	@ (8000340 <Timer4_Stop+0x3c>)
 800032c:	f023 0320 	bic.w	r3, r3, #32
 8000330:	6153      	str	r3, [r2, #20]
}
 8000332:	bf00      	nop
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	40000800 	.word	0x40000800
 8000340:	40020000 	.word	0x40020000

08000344 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	static volatile uint32_t overflow_count = 0; // Overflow count
    if (TIM2->SR & TIM_FLAG_CC1IF) {
 8000348:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800034c:	691b      	ldr	r3, [r3, #16]
 800034e:	f003 0302 	and.w	r3, r3, #2
 8000352:	2b00      	cmp	r3, #0
 8000354:	d036      	beq.n	80003c4 <EXTI0_IRQHandler+0x80>
        // Clear the interrupt flag
		if (GPIOA->IDR & (1 << 0)) { // Check if the button is pressed
 8000356:	4b1c      	ldr	r3, [pc, #112]	@ (80003c8 <EXTI0_IRQHandler+0x84>)
 8000358:	691b      	ldr	r3, [r3, #16]
 800035a:	f003 0301 	and.w	r3, r3, #1
 800035e:	2b00      	cmp	r3, #0
 8000360:	d01f      	beq.n	80003a2 <EXTI0_IRQHandler+0x5e>
			if (morse_index < 6) {
 8000362:	4b1a      	ldr	r3, [pc, #104]	@ (80003cc <EXTI0_IRQHandler+0x88>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2b05      	cmp	r3, #5
 8000368:	dc10      	bgt.n	800038c <EXTI0_IRQHandler+0x48>
				if (TIM3->SR & TIM_FLAG_UIF) {
 800036a:	4b19      	ldr	r3, [pc, #100]	@ (80003d0 <EXTI0_IRQHandler+0x8c>)
 800036c:	691b      	ldr	r3, [r3, #16]
 800036e:	f003 0301 	and.w	r3, r3, #1
 8000372:	2b00      	cmp	r3, #0
 8000374:	d005      	beq.n	8000382 <EXTI0_IRQHandler+0x3e>
					morse_input[morse_index] = '-'; // Store the dash
 8000376:	4b15      	ldr	r3, [pc, #84]	@ (80003cc <EXTI0_IRQHandler+0x88>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a16      	ldr	r2, [pc, #88]	@ (80003d4 <EXTI0_IRQHandler+0x90>)
 800037c:	212d      	movs	r1, #45	@ 0x2d
 800037e:	54d1      	strb	r1, [r2, r3]
 8000380:	e004      	b.n	800038c <EXTI0_IRQHandler+0x48>
				}
				else {
					morse_input[morse_index] = '.'; // Store the dot
 8000382:	4b12      	ldr	r3, [pc, #72]	@ (80003cc <EXTI0_IRQHandler+0x88>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a13      	ldr	r2, [pc, #76]	@ (80003d4 <EXTI0_IRQHandler+0x90>)
 8000388:	212e      	movs	r1, #46	@ 0x2e
 800038a:	54d1      	strb	r1, [r2, r3]
				}
			}
			Timer3_Stop(); // Stop the countdown
 800038c:	f7ff ff9a 	bl	80002c4 <Timer3_Stop>
			Timer3_StartCountdown(600);
 8000390:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000394:	f7ff ff2a 	bl	80001ec <Timer3_StartCountdown>
			Timer4_StartCountdown(1200);
 8000398:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 800039c:	f7ff ff5c 	bl	8000258 <Timer4_StartCountdown>
 80003a0:	e007      	b.n	80003b2 <EXTI0_IRQHandler+0x6e>
		}
		else { // Check if the button is released
			Timer3_Stop();
 80003a2:	f7ff ff8f 	bl	80002c4 <Timer3_Stop>
			Timer4_Stop();
 80003a6:	f7ff ffad 	bl	8000304 <Timer4_Stop>
			Timer3_StartCountdown(600); //Start 600ms countdown to determine it's a short press or a long press
 80003aa:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80003ae:	f7ff ff1d 	bl	80001ec <Timer3_StartCountdown>
		}
		TIM2->SR &= ~TIM_FLAG_CC1IF;
 80003b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003b6:	691b      	ldr	r3, [r3, #16]
 80003b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003bc:	f023 0302 	bic.w	r3, r3, #2
 80003c0:	6113      	str	r3, [r2, #16]
    }
    return;
 80003c2:	bf00      	nop
 80003c4:	bf00      	nop
}
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40020000 	.word	0x40020000
 80003cc:	20000024 	.word	0x20000024
 80003d0:	40000400 	.word	0x40000400
 80003d4:	2000001c 	.word	0x2000001c

080003d8 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_FLAG_UIF) {
 80003dc:	4b10      	ldr	r3, [pc, #64]	@ (8000420 <TIM3_IRQHandler+0x48>)
 80003de:	691b      	ldr	r3, [r3, #16]
 80003e0:	f003 0301 	and.w	r3, r3, #1
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d015      	beq.n	8000414 <TIM3_IRQHandler+0x3c>
        TIM3->SR &= ~TIM_FLAG_UIF; // 清中斷旗標
 80003e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000420 <TIM3_IRQHandler+0x48>)
 80003ea:	691b      	ldr	r3, [r3, #16]
 80003ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000420 <TIM3_IRQHandler+0x48>)
 80003ee:	f023 0301 	bic.w	r3, r3, #1
 80003f2:	6113      	str	r3, [r2, #16]
		TIM3->CR[0] &= ~(1 << 0); // 停止計數
 80003f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000420 <TIM3_IRQHandler+0x48>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a09      	ldr	r2, [pc, #36]	@ (8000420 <TIM3_IRQHandler+0x48>)
 80003fa:	f023 0301 	bic.w	r3, r3, #1
 80003fe:	6013      	str	r3, [r2, #0]
    	TIM3->CNT = 0;
 8000400:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <TIM3_IRQHandler+0x48>)
 8000402:	2200      	movs	r2, #0
 8000404:	625a      	str	r2, [r3, #36]	@ 0x24
        GPIOA->ODR |= (1 << 4); // Set GPIO3
 8000406:	4b07      	ldr	r3, [pc, #28]	@ (8000424 <TIM3_IRQHandler+0x4c>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a06      	ldr	r2, [pc, #24]	@ (8000424 <TIM3_IRQHandler+0x4c>)
 800040c:	f043 0310 	orr.w	r3, r3, #16
 8000410:	6153      	str	r3, [r2, #20]
    }
    return;
 8000412:	bf00      	nop
 8000414:	bf00      	nop
}
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40000400 	.word	0x40000400
 8000424:	40020000 	.word	0x40020000

08000428 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_FLAG_UIF) {
 800042c:	4b10      	ldr	r3, [pc, #64]	@ (8000470 <TIM4_IRQHandler+0x48>)
 800042e:	691b      	ldr	r3, [r3, #16]
 8000430:	f003 0301 	and.w	r3, r3, #1
 8000434:	2b00      	cmp	r3, #0
 8000436:	d015      	beq.n	8000464 <TIM4_IRQHandler+0x3c>
        TIM4->SR &= ~TIM_FLAG_UIF; // 清中斷旗標
 8000438:	4b0d      	ldr	r3, [pc, #52]	@ (8000470 <TIM4_IRQHandler+0x48>)
 800043a:	691b      	ldr	r3, [r3, #16]
 800043c:	4a0c      	ldr	r2, [pc, #48]	@ (8000470 <TIM4_IRQHandler+0x48>)
 800043e:	f023 0301 	bic.w	r3, r3, #1
 8000442:	6113      	str	r3, [r2, #16]
		TIM4->CR[0] &= ~(1 << 0); // 停止計數
 8000444:	4b0a      	ldr	r3, [pc, #40]	@ (8000470 <TIM4_IRQHandler+0x48>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a09      	ldr	r2, [pc, #36]	@ (8000470 <TIM4_IRQHandler+0x48>)
 800044a:	f023 0301 	bic.w	r3, r3, #1
 800044e:	6013      	str	r3, [r2, #0]
    	TIM4->CNT = 0;
 8000450:	4b07      	ldr	r3, [pc, #28]	@ (8000470 <TIM4_IRQHandler+0x48>)
 8000452:	2200      	movs	r2, #0
 8000454:	625a      	str	r2, [r3, #36]	@ 0x24
        GPIOA->ODR |= (1 << 5); // Set GPIO3
 8000456:	4b07      	ldr	r3, [pc, #28]	@ (8000474 <TIM4_IRQHandler+0x4c>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a06      	ldr	r2, [pc, #24]	@ (8000474 <TIM4_IRQHandler+0x4c>)
 800045c:	f043 0320 	orr.w	r3, r3, #32
 8000460:	6153      	str	r3, [r2, #20]
    }
    return;
 8000462:	bf00      	nop
 8000464:	bf00      	nop
}
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	40000800 	.word	0x40000800
 8000474:	40020000 	.word	0x40020000

08000478 <main>:


int main(void) {
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
	while(1);
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <main+0x4>

08000480 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000480:	480d      	ldr	r0, [pc, #52]	@ (80004b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000482:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000484:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000488:	480c      	ldr	r0, [pc, #48]	@ (80004bc <LoopForever+0x6>)
  ldr r1, =_edata
 800048a:	490d      	ldr	r1, [pc, #52]	@ (80004c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800048c:	4a0d      	ldr	r2, [pc, #52]	@ (80004c4 <LoopForever+0xe>)
  movs r3, #0
 800048e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000490:	e002      	b.n	8000498 <LoopCopyDataInit>

08000492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000496:	3304      	adds	r3, #4

08000498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800049a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800049c:	d3f9      	bcc.n	8000492 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800049e:	4a0a      	ldr	r2, [pc, #40]	@ (80004c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a0:	4c0a      	ldr	r4, [pc, #40]	@ (80004cc <LoopForever+0x16>)
  movs r3, #0
 80004a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a4:	e001      	b.n	80004aa <LoopFillZerobss>

080004a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a8:	3204      	adds	r2, #4

080004aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ac:	d3fb      	bcc.n	80004a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ae:	f000 f811 	bl	80004d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004b2:	f7ff ffe1 	bl	8000478 <main>

080004b6 <LoopForever>:

LoopForever:
  b LoopForever
 80004b6:	e7fe      	b.n	80004b6 <LoopForever>
  ldr   r0, =_estack
 80004b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80004bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004c4:	0800053c 	.word	0x0800053c
  ldr r2, =_sbss
 80004c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004cc:	20000028 	.word	0x20000028

080004d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d0:	e7fe      	b.n	80004d0 <ADC_IRQHandler>
	...

080004d4 <__libc_init_array>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	4d0d      	ldr	r5, [pc, #52]	@ (800050c <__libc_init_array+0x38>)
 80004d8:	4c0d      	ldr	r4, [pc, #52]	@ (8000510 <__libc_init_array+0x3c>)
 80004da:	1b64      	subs	r4, r4, r5
 80004dc:	10a4      	asrs	r4, r4, #2
 80004de:	2600      	movs	r6, #0
 80004e0:	42a6      	cmp	r6, r4
 80004e2:	d109      	bne.n	80004f8 <__libc_init_array+0x24>
 80004e4:	4d0b      	ldr	r5, [pc, #44]	@ (8000514 <__libc_init_array+0x40>)
 80004e6:	4c0c      	ldr	r4, [pc, #48]	@ (8000518 <__libc_init_array+0x44>)
 80004e8:	f000 f818 	bl	800051c <_init>
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	10a4      	asrs	r4, r4, #2
 80004f0:	2600      	movs	r6, #0
 80004f2:	42a6      	cmp	r6, r4
 80004f4:	d105      	bne.n	8000502 <__libc_init_array+0x2e>
 80004f6:	bd70      	pop	{r4, r5, r6, pc}
 80004f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004fc:	4798      	blx	r3
 80004fe:	3601      	adds	r6, #1
 8000500:	e7ee      	b.n	80004e0 <__libc_init_array+0xc>
 8000502:	f855 3b04 	ldr.w	r3, [r5], #4
 8000506:	4798      	blx	r3
 8000508:	3601      	adds	r6, #1
 800050a:	e7f2      	b.n	80004f2 <__libc_init_array+0x1e>
 800050c:	08000534 	.word	0x08000534
 8000510:	08000534 	.word	0x08000534
 8000514:	08000534 	.word	0x08000534
 8000518:	08000538 	.word	0x08000538

0800051c <_init>:
 800051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051e:	bf00      	nop
 8000520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000522:	bc08      	pop	{r3}
 8000524:	469e      	mov	lr, r3
 8000526:	4770      	bx	lr

08000528 <_fini>:
 8000528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052a:	bf00      	nop
 800052c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052e:	bc08      	pop	{r3}
 8000530:	469e      	mov	lr, r3
 8000532:	4770      	bx	lr
